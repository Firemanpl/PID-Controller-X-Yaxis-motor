
SentryGun.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000893c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08008adc  08008adc  00018adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ca4  08008ca4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008ca4  08008ca4  00018ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cac  08008cac  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cb0  08008cb0  00018cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dac  200001e8  08008e98  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001f94  08008e98  00021f94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019940  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000396f  00000000  00000000  00039b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  0003d4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  0003e628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a24  00000000  00000000  0003f5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001580e  00000000  00000000  00059014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ffe9  00000000  00000000  0006e822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fe80b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c28  00000000  00000000  000fe860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ac4 	.word	0x08008ac4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08008ac4 	.word	0x08008ac4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_uldivmod>:
 8000608:	b953      	cbnz	r3, 8000620 <__aeabi_uldivmod+0x18>
 800060a:	b94a      	cbnz	r2, 8000620 <__aeabi_uldivmod+0x18>
 800060c:	2900      	cmp	r1, #0
 800060e:	bf08      	it	eq
 8000610:	2800      	cmpeq	r0, #0
 8000612:	bf1c      	itt	ne
 8000614:	f04f 31ff 	movne.w	r1, #4294967295
 8000618:	f04f 30ff 	movne.w	r0, #4294967295
 800061c:	f000 b96e 	b.w	80008fc <__aeabi_idiv0>
 8000620:	f1ad 0c08 	sub.w	ip, sp, #8
 8000624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000628:	f000 f806 	bl	8000638 <__udivmoddi4>
 800062c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <__udivmoddi4>:
 8000638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800063c:	9d08      	ldr	r5, [sp, #32]
 800063e:	4604      	mov	r4, r0
 8000640:	468c      	mov	ip, r1
 8000642:	2b00      	cmp	r3, #0
 8000644:	f040 8083 	bne.w	800074e <__udivmoddi4+0x116>
 8000648:	428a      	cmp	r2, r1
 800064a:	4617      	mov	r7, r2
 800064c:	d947      	bls.n	80006de <__udivmoddi4+0xa6>
 800064e:	fab2 f282 	clz	r2, r2
 8000652:	b142      	cbz	r2, 8000666 <__udivmoddi4+0x2e>
 8000654:	f1c2 0020 	rsb	r0, r2, #32
 8000658:	fa24 f000 	lsr.w	r0, r4, r0
 800065c:	4091      	lsls	r1, r2
 800065e:	4097      	lsls	r7, r2
 8000660:	ea40 0c01 	orr.w	ip, r0, r1
 8000664:	4094      	lsls	r4, r2
 8000666:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800066a:	0c23      	lsrs	r3, r4, #16
 800066c:	fbbc f6f8 	udiv	r6, ip, r8
 8000670:	fa1f fe87 	uxth.w	lr, r7
 8000674:	fb08 c116 	mls	r1, r8, r6, ip
 8000678:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800067c:	fb06 f10e 	mul.w	r1, r6, lr
 8000680:	4299      	cmp	r1, r3
 8000682:	d909      	bls.n	8000698 <__udivmoddi4+0x60>
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	f106 30ff 	add.w	r0, r6, #4294967295
 800068a:	f080 8119 	bcs.w	80008c0 <__udivmoddi4+0x288>
 800068e:	4299      	cmp	r1, r3
 8000690:	f240 8116 	bls.w	80008c0 <__udivmoddi4+0x288>
 8000694:	3e02      	subs	r6, #2
 8000696:	443b      	add	r3, r7
 8000698:	1a5b      	subs	r3, r3, r1
 800069a:	b2a4      	uxth	r4, r4
 800069c:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a0:	fb08 3310 	mls	r3, r8, r0, r3
 80006a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ac:	45a6      	cmp	lr, r4
 80006ae:	d909      	bls.n	80006c4 <__udivmoddi4+0x8c>
 80006b0:	193c      	adds	r4, r7, r4
 80006b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006b6:	f080 8105 	bcs.w	80008c4 <__udivmoddi4+0x28c>
 80006ba:	45a6      	cmp	lr, r4
 80006bc:	f240 8102 	bls.w	80008c4 <__udivmoddi4+0x28c>
 80006c0:	3802      	subs	r0, #2
 80006c2:	443c      	add	r4, r7
 80006c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006c8:	eba4 040e 	sub.w	r4, r4, lr
 80006cc:	2600      	movs	r6, #0
 80006ce:	b11d      	cbz	r5, 80006d8 <__udivmoddi4+0xa0>
 80006d0:	40d4      	lsrs	r4, r2
 80006d2:	2300      	movs	r3, #0
 80006d4:	e9c5 4300 	strd	r4, r3, [r5]
 80006d8:	4631      	mov	r1, r6
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	b902      	cbnz	r2, 80006e2 <__udivmoddi4+0xaa>
 80006e0:	deff      	udf	#255	; 0xff
 80006e2:	fab2 f282 	clz	r2, r2
 80006e6:	2a00      	cmp	r2, #0
 80006e8:	d150      	bne.n	800078c <__udivmoddi4+0x154>
 80006ea:	1bcb      	subs	r3, r1, r7
 80006ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006f0:	fa1f f887 	uxth.w	r8, r7
 80006f4:	2601      	movs	r6, #1
 80006f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80006fa:	0c21      	lsrs	r1, r4, #16
 80006fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000700:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000704:	fb08 f30c 	mul.w	r3, r8, ip
 8000708:	428b      	cmp	r3, r1
 800070a:	d907      	bls.n	800071c <__udivmoddi4+0xe4>
 800070c:	1879      	adds	r1, r7, r1
 800070e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000712:	d202      	bcs.n	800071a <__udivmoddi4+0xe2>
 8000714:	428b      	cmp	r3, r1
 8000716:	f200 80e9 	bhi.w	80008ec <__udivmoddi4+0x2b4>
 800071a:	4684      	mov	ip, r0
 800071c:	1ac9      	subs	r1, r1, r3
 800071e:	b2a3      	uxth	r3, r4
 8000720:	fbb1 f0fe 	udiv	r0, r1, lr
 8000724:	fb0e 1110 	mls	r1, lr, r0, r1
 8000728:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800072c:	fb08 f800 	mul.w	r8, r8, r0
 8000730:	45a0      	cmp	r8, r4
 8000732:	d907      	bls.n	8000744 <__udivmoddi4+0x10c>
 8000734:	193c      	adds	r4, r7, r4
 8000736:	f100 33ff 	add.w	r3, r0, #4294967295
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x10a>
 800073c:	45a0      	cmp	r8, r4
 800073e:	f200 80d9 	bhi.w	80008f4 <__udivmoddi4+0x2bc>
 8000742:	4618      	mov	r0, r3
 8000744:	eba4 0408 	sub.w	r4, r4, r8
 8000748:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800074c:	e7bf      	b.n	80006ce <__udivmoddi4+0x96>
 800074e:	428b      	cmp	r3, r1
 8000750:	d909      	bls.n	8000766 <__udivmoddi4+0x12e>
 8000752:	2d00      	cmp	r5, #0
 8000754:	f000 80b1 	beq.w	80008ba <__udivmoddi4+0x282>
 8000758:	2600      	movs	r6, #0
 800075a:	e9c5 0100 	strd	r0, r1, [r5]
 800075e:	4630      	mov	r0, r6
 8000760:	4631      	mov	r1, r6
 8000762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000766:	fab3 f683 	clz	r6, r3
 800076a:	2e00      	cmp	r6, #0
 800076c:	d14a      	bne.n	8000804 <__udivmoddi4+0x1cc>
 800076e:	428b      	cmp	r3, r1
 8000770:	d302      	bcc.n	8000778 <__udivmoddi4+0x140>
 8000772:	4282      	cmp	r2, r0
 8000774:	f200 80b8 	bhi.w	80008e8 <__udivmoddi4+0x2b0>
 8000778:	1a84      	subs	r4, r0, r2
 800077a:	eb61 0103 	sbc.w	r1, r1, r3
 800077e:	2001      	movs	r0, #1
 8000780:	468c      	mov	ip, r1
 8000782:	2d00      	cmp	r5, #0
 8000784:	d0a8      	beq.n	80006d8 <__udivmoddi4+0xa0>
 8000786:	e9c5 4c00 	strd	r4, ip, [r5]
 800078a:	e7a5      	b.n	80006d8 <__udivmoddi4+0xa0>
 800078c:	f1c2 0320 	rsb	r3, r2, #32
 8000790:	fa20 f603 	lsr.w	r6, r0, r3
 8000794:	4097      	lsls	r7, r2
 8000796:	fa01 f002 	lsl.w	r0, r1, r2
 800079a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800079e:	40d9      	lsrs	r1, r3
 80007a0:	4330      	orrs	r0, r6
 80007a2:	0c03      	lsrs	r3, r0, #16
 80007a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007a8:	fa1f f887 	uxth.w	r8, r7
 80007ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80007b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007b4:	fb06 f108 	mul.w	r1, r6, r8
 80007b8:	4299      	cmp	r1, r3
 80007ba:	fa04 f402 	lsl.w	r4, r4, r2
 80007be:	d909      	bls.n	80007d4 <__udivmoddi4+0x19c>
 80007c0:	18fb      	adds	r3, r7, r3
 80007c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007c6:	f080 808d 	bcs.w	80008e4 <__udivmoddi4+0x2ac>
 80007ca:	4299      	cmp	r1, r3
 80007cc:	f240 808a 	bls.w	80008e4 <__udivmoddi4+0x2ac>
 80007d0:	3e02      	subs	r6, #2
 80007d2:	443b      	add	r3, r7
 80007d4:	1a5b      	subs	r3, r3, r1
 80007d6:	b281      	uxth	r1, r0
 80007d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80007dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80007e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007e4:	fb00 f308 	mul.w	r3, r0, r8
 80007e8:	428b      	cmp	r3, r1
 80007ea:	d907      	bls.n	80007fc <__udivmoddi4+0x1c4>
 80007ec:	1879      	adds	r1, r7, r1
 80007ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80007f2:	d273      	bcs.n	80008dc <__udivmoddi4+0x2a4>
 80007f4:	428b      	cmp	r3, r1
 80007f6:	d971      	bls.n	80008dc <__udivmoddi4+0x2a4>
 80007f8:	3802      	subs	r0, #2
 80007fa:	4439      	add	r1, r7
 80007fc:	1acb      	subs	r3, r1, r3
 80007fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000802:	e778      	b.n	80006f6 <__udivmoddi4+0xbe>
 8000804:	f1c6 0c20 	rsb	ip, r6, #32
 8000808:	fa03 f406 	lsl.w	r4, r3, r6
 800080c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000810:	431c      	orrs	r4, r3
 8000812:	fa20 f70c 	lsr.w	r7, r0, ip
 8000816:	fa01 f306 	lsl.w	r3, r1, r6
 800081a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800081e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000822:	431f      	orrs	r7, r3
 8000824:	0c3b      	lsrs	r3, r7, #16
 8000826:	fbb1 f9fe 	udiv	r9, r1, lr
 800082a:	fa1f f884 	uxth.w	r8, r4
 800082e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000832:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000836:	fb09 fa08 	mul.w	sl, r9, r8
 800083a:	458a      	cmp	sl, r1
 800083c:	fa02 f206 	lsl.w	r2, r2, r6
 8000840:	fa00 f306 	lsl.w	r3, r0, r6
 8000844:	d908      	bls.n	8000858 <__udivmoddi4+0x220>
 8000846:	1861      	adds	r1, r4, r1
 8000848:	f109 30ff 	add.w	r0, r9, #4294967295
 800084c:	d248      	bcs.n	80008e0 <__udivmoddi4+0x2a8>
 800084e:	458a      	cmp	sl, r1
 8000850:	d946      	bls.n	80008e0 <__udivmoddi4+0x2a8>
 8000852:	f1a9 0902 	sub.w	r9, r9, #2
 8000856:	4421      	add	r1, r4
 8000858:	eba1 010a 	sub.w	r1, r1, sl
 800085c:	b2bf      	uxth	r7, r7
 800085e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000862:	fb0e 1110 	mls	r1, lr, r0, r1
 8000866:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800086a:	fb00 f808 	mul.w	r8, r0, r8
 800086e:	45b8      	cmp	r8, r7
 8000870:	d907      	bls.n	8000882 <__udivmoddi4+0x24a>
 8000872:	19e7      	adds	r7, r4, r7
 8000874:	f100 31ff 	add.w	r1, r0, #4294967295
 8000878:	d22e      	bcs.n	80008d8 <__udivmoddi4+0x2a0>
 800087a:	45b8      	cmp	r8, r7
 800087c:	d92c      	bls.n	80008d8 <__udivmoddi4+0x2a0>
 800087e:	3802      	subs	r0, #2
 8000880:	4427      	add	r7, r4
 8000882:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000886:	eba7 0708 	sub.w	r7, r7, r8
 800088a:	fba0 8902 	umull	r8, r9, r0, r2
 800088e:	454f      	cmp	r7, r9
 8000890:	46c6      	mov	lr, r8
 8000892:	4649      	mov	r1, r9
 8000894:	d31a      	bcc.n	80008cc <__udivmoddi4+0x294>
 8000896:	d017      	beq.n	80008c8 <__udivmoddi4+0x290>
 8000898:	b15d      	cbz	r5, 80008b2 <__udivmoddi4+0x27a>
 800089a:	ebb3 020e 	subs.w	r2, r3, lr
 800089e:	eb67 0701 	sbc.w	r7, r7, r1
 80008a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008a6:	40f2      	lsrs	r2, r6
 80008a8:	ea4c 0202 	orr.w	r2, ip, r2
 80008ac:	40f7      	lsrs	r7, r6
 80008ae:	e9c5 2700 	strd	r2, r7, [r5]
 80008b2:	2600      	movs	r6, #0
 80008b4:	4631      	mov	r1, r6
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	462e      	mov	r6, r5
 80008bc:	4628      	mov	r0, r5
 80008be:	e70b      	b.n	80006d8 <__udivmoddi4+0xa0>
 80008c0:	4606      	mov	r6, r0
 80008c2:	e6e9      	b.n	8000698 <__udivmoddi4+0x60>
 80008c4:	4618      	mov	r0, r3
 80008c6:	e6fd      	b.n	80006c4 <__udivmoddi4+0x8c>
 80008c8:	4543      	cmp	r3, r8
 80008ca:	d2e5      	bcs.n	8000898 <__udivmoddi4+0x260>
 80008cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80008d0:	eb69 0104 	sbc.w	r1, r9, r4
 80008d4:	3801      	subs	r0, #1
 80008d6:	e7df      	b.n	8000898 <__udivmoddi4+0x260>
 80008d8:	4608      	mov	r0, r1
 80008da:	e7d2      	b.n	8000882 <__udivmoddi4+0x24a>
 80008dc:	4660      	mov	r0, ip
 80008de:	e78d      	b.n	80007fc <__udivmoddi4+0x1c4>
 80008e0:	4681      	mov	r9, r0
 80008e2:	e7b9      	b.n	8000858 <__udivmoddi4+0x220>
 80008e4:	4666      	mov	r6, ip
 80008e6:	e775      	b.n	80007d4 <__udivmoddi4+0x19c>
 80008e8:	4630      	mov	r0, r6
 80008ea:	e74a      	b.n	8000782 <__udivmoddi4+0x14a>
 80008ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80008f0:	4439      	add	r1, r7
 80008f2:	e713      	b.n	800071c <__udivmoddi4+0xe4>
 80008f4:	3802      	subs	r0, #2
 80008f6:	443c      	add	r4, r7
 80008f8:	e724      	b.n	8000744 <__udivmoddi4+0x10c>
 80008fa:	bf00      	nop

080008fc <__aeabi_idiv0>:
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop

08000900 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <MX_GPIO_Init+0x84>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a1d      	ldr	r2, [pc, #116]	; (8000984 <MX_GPIO_Init+0x84>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_GPIO_Init+0x84>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_GPIO_Init+0x84>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a16      	ldr	r2, [pc, #88]	; (8000984 <MX_GPIO_Init+0x84>)
 800092c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_GPIO_Init+0x84>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_GPIO_Init+0x84>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <MX_GPIO_Init+0x84>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <MX_GPIO_Init+0x84>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_GPIO_Init+0x84>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <MX_GPIO_Init+0x84>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_GPIO_Init+0x84>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

}
 8000976:	bf00      	nop
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098c:	f000 fe54 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000990:	f000 f816 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000994:	f7ff ffb4 	bl	8000900 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000998:	f006 fe58 	bl	800764c <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800099c:	f000 faa2 	bl	8000ee4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009a0:	f000 fafa 	bl	8000f98 <MX_TIM4_Init>
  MX_TIM1_Init();
 80009a4:	f000 f9ee 	bl	8000d84 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009a8:	f000 fa44 	bl	8000e34 <MX_TIM2_Init>
  MX_TIM5_Init();
 80009ac:	f000 fb42 	bl	8001034 <MX_TIM5_Init>
  MX_TIM9_Init();
 80009b0:	f000 fb94 	bl	80010dc <MX_TIM9_Init>
  MX_TIM10_Init();
 80009b4:	f000 fbd8 	bl	8001168 <MX_TIM10_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		receive_usb_message();
 80009b8:	f000 f86a 	bl	8000a90 <receive_usb_message>
	while (1) {
 80009bc:	e7fc      	b.n	80009b8 <main+0x30>
	...

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	; 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	2230      	movs	r2, #48	; 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f007 fb92 	bl	80080f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <SystemClock_Config+0xc8>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a26      	ldr	r2, [pc, #152]	; (8000a88 <SystemClock_Config+0xc8>)
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <SystemClock_Config+0xc8>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <SystemClock_Config+0xcc>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a20      	ldr	r2, [pc, #128]	; (8000a8c <SystemClock_Config+0xcc>)
 8000a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <SystemClock_Config+0xcc>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a26:	2302      	movs	r3, #2
 8000a28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a30:	2319      	movs	r3, #25
 8000a32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a34:	23c0      	movs	r3, #192	; 0xc0
 8000a36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	f107 0320 	add.w	r3, r7, #32
 8000a44:	4618      	mov	r0, r3
 8000a46:	f002 faa7 	bl	8002f98 <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a50:	f000 f8a0 	bl	8000b94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a54:	230f      	movs	r3, #15
 8000a56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	2103      	movs	r1, #3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 fd09 	bl	8003488 <HAL_RCC_ClockConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a7c:	f000 f88a 	bl	8000b94 <Error_Handler>
  }
}
 8000a80:	bf00      	nop
 8000a82:	3750      	adds	r7, #80	; 0x50
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40007000 	.word	0x40007000

08000a90 <receive_usb_message>:

/* USER CODE BEGIN 4 */
void receive_usb_message() {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af02      	add	r7, sp, #8
	if (ReceivedDataFlag == 1) {
 8000a96:	4b33      	ldr	r3, [pc, #204]	; (8000b64 <receive_usb_message+0xd4>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d15f      	bne.n	8000b5e <receive_usb_message+0xce>
		ReceivedDataFlag = 0;
 8000a9e:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <receive_usb_message+0xd4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
		if (ReceivedData[0] == 'X' && strstr(ReceivedData, "Y")) {
 8000aa4:	4b30      	ldr	r3, [pc, #192]	; (8000b68 <receive_usb_message+0xd8>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b58      	cmp	r3, #88	; 0x58
 8000aaa:	d135      	bne.n	8000b18 <receive_usb_message+0x88>
 8000aac:	2159      	movs	r1, #89	; 0x59
 8000aae:	482e      	ldr	r0, [pc, #184]	; (8000b68 <receive_usb_message+0xd8>)
 8000ab0:	f007 fb4a 	bl	8008148 <strchr>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d02e      	beq.n	8000b18 <receive_usb_message+0x88>
			Xaxis = strtol(ReceivedData + 1, &endXarg, 10);
 8000aba:	4b2c      	ldr	r3, [pc, #176]	; (8000b6c <receive_usb_message+0xdc>)
 8000abc:	220a      	movs	r2, #10
 8000abe:	492c      	ldr	r1, [pc, #176]	; (8000b70 <receive_usb_message+0xe0>)
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f007 fbe7 	bl	8008294 <strtol>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fd33 	bl	8000534 <__aeabi_i2d>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	4928      	ldr	r1, [pc, #160]	; (8000b74 <receive_usb_message+0xe4>)
 8000ad4:	e9c1 2300 	strd	r2, r3, [r1]
			Yaxis = strtol(endXarg + 1, NULL, 10);
 8000ad8:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <receive_usb_message+0xe0>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	3301      	adds	r3, #1
 8000ade:	220a      	movs	r2, #10
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f007 fbd6 	bl	8008294 <strtol>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fd22 	bl	8000534 <__aeabi_i2d>
 8000af0:	4602      	mov	r2, r0
 8000af2:	460b      	mov	r3, r1
 8000af4:	4920      	ldr	r1, [pc, #128]	; (8000b78 <receive_usb_message+0xe8>)
 8000af6:	e9c1 2300 	strd	r2, r3, [r1]
			sprintf(message, "OK X=%d Y=%d", Xaxis, Yaxis);
 8000afa:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <receive_usb_message+0xe4>)
 8000afc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <receive_usb_message+0xe8>)
 8000b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b06:	e9cd 2300 	strd	r2, r3, [sp]
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	491b      	ldr	r1, [pc, #108]	; (8000b7c <receive_usb_message+0xec>)
 8000b10:	481b      	ldr	r0, [pc, #108]	; (8000b80 <receive_usb_message+0xf0>)
 8000b12:	f007 faf9 	bl	8008108 <siprintf>
 8000b16:	e01a      	b.n	8000b4e <receive_usb_message+0xbe>
		} else if (ReceivedData[0] == 'C') {
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <receive_usb_message+0xd8>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b43      	cmp	r3, #67	; 0x43
 8000b1e:	d104      	bne.n	8000b2a <receive_usb_message+0x9a>
			//calibrate motor
			sprintf(message, "Calibration in progress...");
 8000b20:	4918      	ldr	r1, [pc, #96]	; (8000b84 <receive_usb_message+0xf4>)
 8000b22:	4817      	ldr	r0, [pc, #92]	; (8000b80 <receive_usb_message+0xf0>)
 8000b24:	f007 faf0 	bl	8008108 <siprintf>
 8000b28:	e011      	b.n	8000b4e <receive_usb_message+0xbe>
		} else if (ReceivedData[0] == 'F') {
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <receive_usb_message+0xd8>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b46      	cmp	r3, #70	; 0x46
 8000b30:	d109      	bne.n	8000b46 <receive_usb_message+0xb6>
			FireFlag++;
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <receive_usb_message+0xf8>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	3301      	adds	r3, #1
 8000b38:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <receive_usb_message+0xf8>)
 8000b3a:	6013      	str	r3, [r2, #0]
			sprintf(message, "OK");
 8000b3c:	4913      	ldr	r1, [pc, #76]	; (8000b8c <receive_usb_message+0xfc>)
 8000b3e:	4810      	ldr	r0, [pc, #64]	; (8000b80 <receive_usb_message+0xf0>)
 8000b40:	f007 fae2 	bl	8008108 <siprintf>
 8000b44:	e003      	b.n	8000b4e <receive_usb_message+0xbe>
		} else {
			sprintf(message, "BAD_SYNTAX!");
 8000b46:	4912      	ldr	r1, [pc, #72]	; (8000b90 <receive_usb_message+0x100>)
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <receive_usb_message+0xf0>)
 8000b4a:	f007 fadd 	bl	8008108 <siprintf>
		}
		//sprintf(message,"%s",RecivedData);
		CDC_Transmit_FS(message, strlen(message));
 8000b4e:	480c      	ldr	r0, [pc, #48]	; (8000b80 <receive_usb_message+0xf0>)
 8000b50:	f7ff fb46 	bl	80001e0 <strlen>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4619      	mov	r1, r3
 8000b58:	4809      	ldr	r0, [pc, #36]	; (8000b80 <receive_usb_message+0xf0>)
 8000b5a:	f006 fe51 	bl	8007800 <CDC_Transmit_FS>
	}
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000204 	.word	0x20000204
 8000b68:	20000510 	.word	0x20000510
 8000b6c:	20000511 	.word	0x20000511
 8000b70:	200004c8 	.word	0x200004c8
 8000b74:	20000538 	.word	0x20000538
 8000b78:	20000508 	.word	0x20000508
 8000b7c:	08008adc 	.word	0x08008adc
 8000b80:	200004dc 	.word	0x200004dc
 8000b84:	08008aec 	.word	0x08008aec
 8000b88:	200004d8 	.word	0x200004d8
 8000b8c:	08008b08 	.word	0x08008b08
 8000b90:	08008b0c 	.word	0x08008b0c

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <HAL_MspInit+0x4c>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_MspInit+0x4c>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000bf4:	e7fe      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3c:	f000 fd4e 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c48:	4803      	ldr	r0, [pc, #12]	; (8000c58 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8000c4a:	f002 ff09 	bl	8003a60 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8000c4e:	4803      	ldr	r0, [pc, #12]	; (8000c5c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8000c50:	f002 ff06 	bl	8003a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000540 	.word	0x20000540
 8000c5c:	20000660 	.word	0x20000660

08000c60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8000c66:	f002 fefb 	bl	8003a60 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8000c6a:	4803      	ldr	r0, [pc, #12]	; (8000c78 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000c6c:	f002 fef8 	bl	8003a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000540 	.word	0x20000540
 8000c78:	200005d0 	.word	0x200005d0

08000c7c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000c82:	f002 feed 	bl	8003a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000540 	.word	0x20000540

08000c90 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <TIM1_CC_IRQHandler+0x10>)
 8000c96:	f002 fee3 	bl	8003a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000540 	.word	0x20000540

08000ca4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <TIM2_IRQHandler+0x10>)
 8000caa:	f002 fed9 	bl	8003a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000480 	.word	0x20000480

08000cb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <TIM3_IRQHandler+0x10>)
 8000cbe:	f002 fecf 	bl	8003a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000438 	.word	0x20000438

08000ccc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <TIM4_IRQHandler+0x10>)
 8000cd2:	f002 fec5 	bl	8003a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000588 	.word	0x20000588

08000ce0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <OTG_FS_IRQHandler+0x10>)
 8000ce6:	f001 f923 	bl	8001f30 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20001b7c 	.word	0x20001b7c

08000cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cfc:	4a14      	ldr	r2, [pc, #80]	; (8000d50 <_sbrk+0x5c>)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <_sbrk+0x60>)
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <_sbrk+0x64>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <_sbrk+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d207      	bcs.n	8000d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d24:	f007 f9be 	bl	80080a4 <__errno>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	e009      	b.n	8000d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <_sbrk+0x64>)
 8000d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20020000 	.word	0x20020000
 8000d54:	00000400 	.word	0x00000400
 8000d58:	20000208 	.word	0x20000208
 8000d5c:	20001f98 	.word	0x20001f98

08000d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <SystemInit+0x20>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <SystemInit+0x20>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08c      	sub	sp, #48	; 0x30
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	2224      	movs	r2, #36	; 0x24
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f007 f9b0 	bl	80080f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <MX_TIM1_Init+0xa8>)
 8000da2:	4a23      	ldr	r2, [pc, #140]	; (8000e30 <MX_TIM1_Init+0xac>)
 8000da4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <MX_TIM1_Init+0xa8>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <MX_TIM1_Init+0xa8>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000db2:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <MX_TIM1_Init+0xa8>)
 8000db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <MX_TIM1_Init+0xa8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_TIM1_Init+0xa8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <MX_TIM1_Init+0xa8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000de4:	2301      	movs	r3, #1
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	4619      	mov	r1, r3
 8000df6:	480d      	ldr	r0, [pc, #52]	; (8000e2c <MX_TIM1_Init+0xa8>)
 8000df8:	f002 fd8c 	bl	8003914 <HAL_TIM_Encoder_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000e02:	f7ff fec7 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	4619      	mov	r1, r3
 8000e12:	4806      	ldr	r0, [pc, #24]	; (8000e2c <MX_TIM1_Init+0xa8>)
 8000e14:	f003 fb8e 	bl	8004534 <HAL_TIMEx_MasterConfigSynchronization>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000e1e:	f7ff feb9 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	3730      	adds	r7, #48	; 0x30
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000540 	.word	0x20000540
 8000e30:	40010000 	.word	0x40010000

08000e34 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
 8000e52:	615a      	str	r2, [r3, #20]
 8000e54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e56:	4b22      	ldr	r3, [pc, #136]	; (8000ee0 <MX_TIM2_Init+0xac>)
 8000e58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3-1;
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <MX_TIM2_Init+0xac>)
 8000e60:	2202      	movs	r2, #2
 8000e62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <MX_TIM2_Init+0xac>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <MX_TIM2_Init+0xac>)
 8000e6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_TIM2_Init+0xac>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <MX_TIM2_Init+0xac>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e7e:	4818      	ldr	r0, [pc, #96]	; (8000ee0 <MX_TIM2_Init+0xac>)
 8000e80:	f002 fcf9 	bl	8003876 <HAL_TIM_PWM_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000e8a:	f7ff fe83 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e96:	f107 0320 	add.w	r3, r7, #32
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4810      	ldr	r0, [pc, #64]	; (8000ee0 <MX_TIM2_Init+0xac>)
 8000e9e:	f003 fb49 	bl	8004534 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000ea8:	f7ff fe74 	bl	8000b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eac:	2360      	movs	r3, #96	; 0x60
 8000eae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2208      	movs	r2, #8
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <MX_TIM2_Init+0xac>)
 8000ec4:	f002 fed4 	bl	8003c70 <HAL_TIM_PWM_ConfigChannel>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000ece:	f7ff fe61 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ed2:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <MX_TIM2_Init+0xac>)
 8000ed4:	f000 fada 	bl	800148c <HAL_TIM_MspPostInit>

}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	; 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000480 	.word	0x20000480

08000ee4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eea:	f107 0320 	add.w	r3, r7, #32
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]
 8000f02:	615a      	str	r2, [r3, #20]
 8000f04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f06:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <MX_TIM3_Init+0xac>)
 8000f08:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <MX_TIM3_Init+0xb0>)
 8000f0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 8000f0c:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <MX_TIM3_Init+0xac>)
 8000f0e:	2202      	movs	r2, #2
 8000f10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f12:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <MX_TIM3_Init+0xac>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000f18:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <MX_TIM3_Init+0xac>)
 8000f1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <MX_TIM3_Init+0xac>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <MX_TIM3_Init+0xac>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f2c:	4818      	ldr	r0, [pc, #96]	; (8000f90 <MX_TIM3_Init+0xac>)
 8000f2e:	f002 fca2 	bl	8003876 <HAL_TIM_PWM_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000f38:	f7ff fe2c 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f44:	f107 0320 	add.w	r3, r7, #32
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4811      	ldr	r0, [pc, #68]	; (8000f90 <MX_TIM3_Init+0xac>)
 8000f4c:	f003 faf2 	bl	8004534 <HAL_TIMEx_MasterConfigSynchronization>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000f56:	f7ff fe1d 	bl	8000b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5a:	2360      	movs	r3, #96	; 0x60
 8000f5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2208      	movs	r2, #8
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4807      	ldr	r0, [pc, #28]	; (8000f90 <MX_TIM3_Init+0xac>)
 8000f72:	f002 fe7d 	bl	8003c70 <HAL_TIM_PWM_ConfigChannel>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000f7c:	f7ff fe0a 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f80:	4803      	ldr	r0, [pc, #12]	; (8000f90 <MX_TIM3_Init+0xac>)
 8000f82:	f000 fa83 	bl	800148c <HAL_TIM_MspPostInit>

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000438 	.word	0x20000438
 8000f94:	40000400 	.word	0x40000400

08000f98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	463b      	mov	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	; (800102c <MX_TIM4_Init+0x94>)
 8000fb6:	4a1e      	ldr	r2, [pc, #120]	; (8001030 <MX_TIM4_Init+0x98>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5000-1;
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <MX_TIM4_Init+0x94>)
 8000fbc:	f241 3287 	movw	r2, #4999	; 0x1387
 8000fc0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_TIM4_Init+0x94>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fc8:	4b18      	ldr	r3, [pc, #96]	; (800102c <MX_TIM4_Init+0x94>)
 8000fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <MX_TIM4_Init+0x94>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <MX_TIM4_Init+0x94>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fdc:	4813      	ldr	r0, [pc, #76]	; (800102c <MX_TIM4_Init+0x94>)
 8000fde:	f002 fbfb 	bl	80037d8 <HAL_TIM_Base_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000fe8:	f7ff fdd4 	bl	8000b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <MX_TIM4_Init+0x94>)
 8000ffa:	f002 fefb 	bl	8003df4 <HAL_TIM_ConfigClockSource>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001004:	f7ff fdc6 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001010:	463b      	mov	r3, r7
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_TIM4_Init+0x94>)
 8001016:	f003 fa8d 	bl	8004534 <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001020:	f7ff fdb8 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000588 	.word	0x20000588
 8001030:	40000800 	.word	0x40000800

08001034 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	; 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	2224      	movs	r2, #36	; 0x24
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f007 f858 	bl	80080f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001050:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <MX_TIM5_Init+0xa0>)
 8001052:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <MX_TIM5_Init+0xa4>)
 8001054:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_TIM5_Init+0xa0>)
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <MX_TIM5_Init+0xa0>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_TIM5_Init+0xa0>)
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_TIM5_Init+0xa0>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_TIM5_Init+0xa0>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001076:	2303      	movs	r3, #3
 8001078:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800107e:	2301      	movs	r3, #1
 8001080:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800108e:	2301      	movs	r3, #1
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	4619      	mov	r1, r3
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <MX_TIM5_Init+0xa0>)
 80010a2:	f002 fc37 	bl	8003914 <HAL_TIM_Encoder_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80010ac:	f7ff fd72 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_TIM5_Init+0xa0>)
 80010be:	f003 fa39 	bl	8004534 <HAL_TIMEx_MasterConfigSynchronization>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80010c8:	f7ff fd64 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	3730      	adds	r7, #48	; 0x30
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000618 	.word	0x20000618
 80010d8:	40000c00 	.word	0x40000c00

080010dc <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
 80010f0:	615a      	str	r2, [r3, #20]
 80010f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <MX_TIM9_Init+0x84>)
 80010f6:	4a1b      	ldr	r2, [pc, #108]	; (8001164 <MX_TIM9_Init+0x88>)
 80010f8:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 5-1;
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MX_TIM9_Init+0x84>)
 80010fc:	2204      	movs	r2, #4
 80010fe:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <MX_TIM9_Init+0x84>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MX_TIM9_Init+0x84>)
 8001108:	f240 32e7 	movw	r2, #999	; 0x3e7
 800110c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <MX_TIM9_Init+0x84>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_TIM9_Init+0x84>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800111a:	4811      	ldr	r0, [pc, #68]	; (8001160 <MX_TIM9_Init+0x84>)
 800111c:	f002 fbab 	bl	8003876 <HAL_TIM_PWM_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001126:	f7ff fd35 	bl	8000b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112a:	2360      	movs	r3, #96	; 0x60
 800112c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2204      	movs	r2, #4
 800113e:	4619      	mov	r1, r3
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <MX_TIM9_Init+0x84>)
 8001142:	f002 fd95 	bl	8003c70 <HAL_TIM_PWM_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 800114c:	f7ff fd22 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001150:	4803      	ldr	r0, [pc, #12]	; (8001160 <MX_TIM9_Init+0x84>)
 8001152:	f000 f99b 	bl	800148c <HAL_TIM_MspPostInit>

}
 8001156:	bf00      	nop
 8001158:	3720      	adds	r7, #32
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000660 	.word	0x20000660
 8001164:	40014000 	.word	0x40014000

08001168 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
 800117c:	615a      	str	r2, [r3, #20]
 800117e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <MX_TIM10_Init+0x94>)
 8001182:	4a1f      	ldr	r2, [pc, #124]	; (8001200 <MX_TIM10_Init+0x98>)
 8001184:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 5-1;
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_TIM10_Init+0x94>)
 8001188:	2204      	movs	r2, #4
 800118a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_TIM10_Init+0x94>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_TIM10_Init+0x94>)
 8001194:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001198:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_TIM10_Init+0x94>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_TIM10_Init+0x94>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80011a6:	4815      	ldr	r0, [pc, #84]	; (80011fc <MX_TIM10_Init+0x94>)
 80011a8:	f002 fb16 	bl	80037d8 <HAL_TIM_Base_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80011b2:	f7ff fcef 	bl	8000b94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80011b6:	4811      	ldr	r0, [pc, #68]	; (80011fc <MX_TIM10_Init+0x94>)
 80011b8:	f002 fb5d 	bl	8003876 <HAL_TIM_PWM_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80011c2:	f7ff fce7 	bl	8000b94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c6:	2360      	movs	r3, #96	; 0x60
 80011c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2200      	movs	r2, #0
 80011da:	4619      	mov	r1, r3
 80011dc:	4807      	ldr	r0, [pc, #28]	; (80011fc <MX_TIM10_Init+0x94>)
 80011de:	f002 fd47 	bl	8003c70 <HAL_TIM_PWM_ConfigChannel>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80011e8:	f7ff fcd4 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80011ec:	4803      	ldr	r0, [pc, #12]	; (80011fc <MX_TIM10_Init+0x94>)
 80011ee:	f000 f94d 	bl	800148c <HAL_TIM_MspPostInit>

}
 80011f2:	bf00      	nop
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200005d0 	.word	0x200005d0
 8001200:	40014400 	.word	0x40014400

08001204 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	; 0x30
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a42      	ldr	r2, [pc, #264]	; (800132c <HAL_TIM_Encoder_MspInit+0x128>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d14d      	bne.n	80012c2 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <HAL_TIM_Encoder_MspInit+0x12c>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	4a40      	ldr	r2, [pc, #256]	; (8001330 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6453      	str	r3, [r2, #68]	; 0x44
 8001236:	4b3e      	ldr	r3, [pc, #248]	; (8001330 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	61bb      	str	r3, [r7, #24]
 8001240:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	4b3a      	ldr	r3, [pc, #232]	; (8001330 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a39      	ldr	r2, [pc, #228]	; (8001330 <HAL_TIM_Encoder_MspInit+0x12c>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b37      	ldr	r3, [pc, #220]	; (8001330 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M1E_OUT_A_Pin|M1E_OUT_B_Pin;
 800125e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001270:	2301      	movs	r3, #1
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	482e      	ldr	r0, [pc, #184]	; (8001334 <HAL_TIM_Encoder_MspInit+0x130>)
 800127c:	f000 fb84 	bl	8001988 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	2100      	movs	r1, #0
 8001284:	2018      	movs	r0, #24
 8001286:	f000 fb48 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800128a:	2018      	movs	r0, #24
 800128c:	f000 fb61 	bl	8001952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2019      	movs	r0, #25
 8001296:	f000 fb40 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800129a:	2019      	movs	r0, #25
 800129c:	f000 fb59 	bl	8001952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	201a      	movs	r0, #26
 80012a6:	f000 fb38 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80012aa:	201a      	movs	r0, #26
 80012ac:	f000 fb51 	bl	8001952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2100      	movs	r1, #0
 80012b4:	201b      	movs	r0, #27
 80012b6:	f000 fb30 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80012ba:	201b      	movs	r0, #27
 80012bc:	f000 fb49 	bl	8001952 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80012c0:	e030      	b.n	8001324 <HAL_TIM_Encoder_MspInit+0x120>
  else if(tim_encoderHandle->Instance==TIM5)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <HAL_TIM_Encoder_MspInit+0x134>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d12b      	bne.n	8001324 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <HAL_TIM_Encoder_MspInit+0x12c>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	4a16      	ldr	r2, [pc, #88]	; (8001330 <HAL_TIM_Encoder_MspInit+0x12c>)
 80012d6:	f043 0308 	orr.w	r3, r3, #8
 80012da:	6413      	str	r3, [r2, #64]	; 0x40
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <HAL_TIM_Encoder_MspInit+0x12c>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f003 0308 	and.w	r3, r3, #8
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <HAL_TIM_Encoder_MspInit+0x12c>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	4a0f      	ldr	r2, [pc, #60]	; (8001330 <HAL_TIM_Encoder_MspInit+0x12c>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6313      	str	r3, [r2, #48]	; 0x30
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <HAL_TIM_Encoder_MspInit+0x12c>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M2E_OUT_A_Pin|M2E_OUT_B_Pin;
 8001304:	2303      	movs	r3, #3
 8001306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001314:	2302      	movs	r3, #2
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <HAL_TIM_Encoder_MspInit+0x130>)
 8001320:	f000 fb32 	bl	8001988 <HAL_GPIO_Init>
}
 8001324:	bf00      	nop
 8001326:	3730      	adds	r7, #48	; 0x30
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40010000 	.word	0x40010000
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000
 8001338:	40000c00 	.word	0x40000c00

0800133c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800134c:	d116      	bne.n	800137c <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a27      	ldr	r2, [pc, #156]	; (80013f4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	201c      	movs	r0, #28
 8001370:	f000 fad3 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001374:	201c      	movs	r0, #28
 8001376:	f000 faec 	bl	8001952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800137a:	e036      	b.n	80013ea <HAL_TIM_PWM_MspInit+0xae>
  else if(tim_pwmHandle->Instance==TIM3)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a1d      	ldr	r2, [pc, #116]	; (80013f8 <HAL_TIM_PWM_MspInit+0xbc>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d116      	bne.n	80013b4 <HAL_TIM_PWM_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <HAL_TIM_PWM_MspInit+0xb8>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_TIM_PWM_MspInit+0xb8>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	201d      	movs	r0, #29
 80013a8:	f000 fab7 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013ac:	201d      	movs	r0, #29
 80013ae:	f000 fad0 	bl	8001952 <HAL_NVIC_EnableIRQ>
}
 80013b2:	e01a      	b.n	80013ea <HAL_TIM_PWM_MspInit+0xae>
  else if(tim_pwmHandle->Instance==TIM9)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a10      	ldr	r2, [pc, #64]	; (80013fc <HAL_TIM_PWM_MspInit+0xc0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d115      	bne.n	80013ea <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_TIM_PWM_MspInit+0xb8>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <HAL_TIM_PWM_MspInit+0xb8>)
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_TIM_PWM_MspInit+0xb8>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	2018      	movs	r0, #24
 80013e0:	f000 fa9b 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80013e4:	2018      	movs	r0, #24
 80013e6:	f000 fab4 	bl	8001952 <HAL_NVIC_EnableIRQ>
}
 80013ea:	bf00      	nop
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40000400 	.word	0x40000400
 80013fc:	40014000 	.word	0x40014000

08001400 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a1c      	ldr	r2, [pc, #112]	; (8001480 <HAL_TIM_Base_MspInit+0x80>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d116      	bne.n	8001440 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <HAL_TIM_Base_MspInit+0x84>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a1a      	ldr	r2, [pc, #104]	; (8001484 <HAL_TIM_Base_MspInit+0x84>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_TIM_Base_MspInit+0x84>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	201e      	movs	r0, #30
 8001434:	f000 fa71 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001438:	201e      	movs	r0, #30
 800143a:	f000 fa8a 	bl	8001952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800143e:	e01a      	b.n	8001476 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM10)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a10      	ldr	r2, [pc, #64]	; (8001488 <HAL_TIM_Base_MspInit+0x88>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d115      	bne.n	8001476 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_TIM_Base_MspInit+0x84>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a0c      	ldr	r2, [pc, #48]	; (8001484 <HAL_TIM_Base_MspInit+0x84>)
 8001454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_TIM_Base_MspInit+0x84>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	2019      	movs	r0, #25
 800146c:	f000 fa55 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001470:	2019      	movs	r0, #25
 8001472:	f000 fa6e 	bl	8001952 <HAL_NVIC_EnableIRQ>
}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40000800 	.word	0x40000800
 8001484:	40023800 	.word	0x40023800
 8001488:	40014400 	.word	0x40014400

0800148c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08c      	sub	sp, #48	; 0x30
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ac:	d11e      	bne.n	80014ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	4b46      	ldr	r3, [pc, #280]	; (80015cc <HAL_TIM_MspPostInit+0x140>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a45      	ldr	r2, [pc, #276]	; (80015cc <HAL_TIM_MspPostInit+0x140>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b43      	ldr	r3, [pc, #268]	; (80015cc <HAL_TIM_MspPostInit+0x140>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = M1PWMForward_Pin;
 80014ca:	2304      	movs	r3, #4
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014da:	2301      	movs	r3, #1
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1PWMForward_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	483a      	ldr	r0, [pc, #232]	; (80015d0 <HAL_TIM_MspPostInit+0x144>)
 80014e6:	f000 fa4f 	bl	8001988 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80014ea:	e06b      	b.n	80015c4 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM3)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a38      	ldr	r2, [pc, #224]	; (80015d4 <HAL_TIM_MspPostInit+0x148>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d11e      	bne.n	8001534 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	4b34      	ldr	r3, [pc, #208]	; (80015cc <HAL_TIM_MspPostInit+0x140>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a33      	ldr	r2, [pc, #204]	; (80015cc <HAL_TIM_MspPostInit+0x140>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b31      	ldr	r3, [pc, #196]	; (80015cc <HAL_TIM_MspPostInit+0x140>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M1PWMReverse_Pin;
 8001512:	2301      	movs	r3, #1
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001522:	2302      	movs	r3, #2
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M1PWMReverse_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4619      	mov	r1, r3
 800152c:	482a      	ldr	r0, [pc, #168]	; (80015d8 <HAL_TIM_MspPostInit+0x14c>)
 800152e:	f000 fa2b 	bl	8001988 <HAL_GPIO_Init>
}
 8001532:	e047      	b.n	80015c4 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM9)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a28      	ldr	r2, [pc, #160]	; (80015dc <HAL_TIM_MspPostInit+0x150>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d11e      	bne.n	800157c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_TIM_MspPostInit+0x140>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a21      	ldr	r2, [pc, #132]	; (80015cc <HAL_TIM_MspPostInit+0x140>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <HAL_TIM_MspPostInit+0x140>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M2PWMForward_Pin;
 800155a:	2308      	movs	r3, #8
 800155c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800156a:	2303      	movs	r3, #3
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2PWMForward_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	4816      	ldr	r0, [pc, #88]	; (80015d0 <HAL_TIM_MspPostInit+0x144>)
 8001576:	f000 fa07 	bl	8001988 <HAL_GPIO_Init>
}
 800157a:	e023      	b.n	80015c4 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM10)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a17      	ldr	r2, [pc, #92]	; (80015e0 <HAL_TIM_MspPostInit+0x154>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d11e      	bne.n	80015c4 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_TIM_MspPostInit+0x140>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <HAL_TIM_MspPostInit+0x140>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <HAL_TIM_MspPostInit+0x140>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M2PWMReverse_Pin;
 80015a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80015b4:	2303      	movs	r3, #3
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2PWMReverse_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	4806      	ldr	r0, [pc, #24]	; (80015d8 <HAL_TIM_MspPostInit+0x14c>)
 80015c0:	f000 f9e2 	bl	8001988 <HAL_GPIO_Init>
}
 80015c4:	bf00      	nop
 80015c6:	3730      	adds	r7, #48	; 0x30
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40000400 	.word	0x40000400
 80015d8:	40020400 	.word	0x40020400
 80015dc:	40014000 	.word	0x40014000
 80015e0:	40014400 	.word	0x40014400

080015e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800161c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ea:	490e      	ldr	r1, [pc, #56]	; (8001624 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015ec:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001600:	4c0b      	ldr	r4, [pc, #44]	; (8001630 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800160e:	f7ff fba7 	bl	8000d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001612:	f006 fd4d 	bl	80080b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001616:	f7ff f9b7 	bl	8000988 <main>
  bx  lr    
 800161a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800161c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001628:	08008cb4 	.word	0x08008cb4
  ldr r2, =_sbss
 800162c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001630:	20001f94 	.word	0x20001f94

08001634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC_IRQHandler>
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <HAL_Init+0x40>)
 8001642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001646:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <HAL_Init+0x40>)
 800164e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001652:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_Init+0x40>)
 800165a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f000 f94f 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001666:	200f      	movs	r0, #15
 8001668:	f000 f808 	bl	800167c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166c:	f7ff fa98 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023c00 	.word	0x40023c00

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x54>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x58>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f967 	bl	800196e <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00e      	b.n	80016c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d80a      	bhi.n	80016c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f000 f92f 	bl	800191a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HAL_InitTick+0x5c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000008 	.word	0x20000008
 80016d8:	20000004 	.word	0x20000004

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x20>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x24>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_IncTick+0x24>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000008 	.word	0x20000008
 8001700:	200006a8 	.word	0x200006a8

08001704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_GetTick+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	200006a8 	.word	0x200006a8

0800171c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff ffee 	bl	8001704 <HAL_GetTick>
 8001728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001734:	d005      	beq.n	8001742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_Delay+0x44>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001742:	bf00      	nop
 8001744:	f7ff ffde 	bl	8001704 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	429a      	cmp	r2, r3
 8001752:	d8f7      	bhi.n	8001744 <HAL_Delay+0x28>
  {
  }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000008 	.word	0x20000008

08001764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	60d3      	str	r3, [r2, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0b      	blt.n	80017f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4907      	ldr	r1, [pc, #28]	; (8001800 <__NVIC_EnableIRQ+0x38>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db0a      	blt.n	800182e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <__NVIC_SetPriority+0x4c>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800182c:	e00a      	b.n	8001844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <__NVIC_SetPriority+0x50>)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3b04      	subs	r3, #4
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	440b      	add	r3, r1
 8001842:	761a      	strb	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f1c3 0307 	rsb	r3, r3, #7
 8001872:	2b04      	cmp	r3, #4
 8001874:	bf28      	it	cs
 8001876:	2304      	movcs	r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3304      	adds	r3, #4
 800187e:	2b06      	cmp	r3, #6
 8001880:	d902      	bls.n	8001888 <NVIC_EncodePriority+0x30>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3b03      	subs	r3, #3
 8001886:	e000      	b.n	800188a <NVIC_EncodePriority+0x32>
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43da      	mvns	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43d9      	mvns	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	4313      	orrs	r3, r2
         );
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d0:	d301      	bcc.n	80018d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00f      	b.n	80018f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <SysTick_Config+0x40>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018de:	210f      	movs	r1, #15
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f7ff ff8e 	bl	8001804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <SysTick_Config+0x40>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SysTick_Config+0x40>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	e000e010 	.word	0xe000e010

08001904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff29 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800192c:	f7ff ff3e 	bl	80017ac <__NVIC_GetPriorityGrouping>
 8001930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	6978      	ldr	r0, [r7, #20]
 8001938:	f7ff ff8e 	bl	8001858 <NVIC_EncodePriority>
 800193c:	4602      	mov	r2, r0
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff5d 	bl	8001804 <__NVIC_SetPriority>
}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff31 	bl	80017c8 <__NVIC_EnableIRQ>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ffa2 	bl	80018c0 <SysTick_Config>
 800197c:	4603      	mov	r3, r0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	; 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	e159      	b.n	8001c58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a4:	2201      	movs	r2, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	429a      	cmp	r2, r3
 80019be:	f040 8148 	bne.w	8001c52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d005      	beq.n	80019da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d130      	bne.n	8001a3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a10:	2201      	movs	r2, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 0201 	and.w	r2, r3, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d017      	beq.n	8001a78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d123      	bne.n	8001acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	08da      	lsrs	r2, r3, #3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3208      	adds	r2, #8
 8001a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	69b9      	ldr	r1, [r7, #24]
 8001ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0203 	and.w	r2, r3, #3
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80a2 	beq.w	8001c52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b57      	ldr	r3, [pc, #348]	; (8001c70 <HAL_GPIO_Init+0x2e8>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a56      	ldr	r2, [pc, #344]	; (8001c70 <HAL_GPIO_Init+0x2e8>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b54      	ldr	r3, [pc, #336]	; (8001c70 <HAL_GPIO_Init+0x2e8>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b2a:	4a52      	ldr	r2, [pc, #328]	; (8001c74 <HAL_GPIO_Init+0x2ec>)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3302      	adds	r3, #2
 8001b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a49      	ldr	r2, [pc, #292]	; (8001c78 <HAL_GPIO_Init+0x2f0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d019      	beq.n	8001b8a <HAL_GPIO_Init+0x202>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a48      	ldr	r2, [pc, #288]	; (8001c7c <HAL_GPIO_Init+0x2f4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d013      	beq.n	8001b86 <HAL_GPIO_Init+0x1fe>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a47      	ldr	r2, [pc, #284]	; (8001c80 <HAL_GPIO_Init+0x2f8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d00d      	beq.n	8001b82 <HAL_GPIO_Init+0x1fa>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a46      	ldr	r2, [pc, #280]	; (8001c84 <HAL_GPIO_Init+0x2fc>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d007      	beq.n	8001b7e <HAL_GPIO_Init+0x1f6>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a45      	ldr	r2, [pc, #276]	; (8001c88 <HAL_GPIO_Init+0x300>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d101      	bne.n	8001b7a <HAL_GPIO_Init+0x1f2>
 8001b76:	2304      	movs	r3, #4
 8001b78:	e008      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b7a:	2307      	movs	r3, #7
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e004      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_GPIO_Init+0x204>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	f002 0203 	and.w	r2, r2, #3
 8001b92:	0092      	lsls	r2, r2, #2
 8001b94:	4093      	lsls	r3, r2
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b9c:	4935      	ldr	r1, [pc, #212]	; (8001c74 <HAL_GPIO_Init+0x2ec>)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bce:	4a2f      	ldr	r2, [pc, #188]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bf8:	4a24      	ldr	r2, [pc, #144]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfe:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c22:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c4c:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3301      	adds	r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	2b0f      	cmp	r3, #15
 8001c5c:	f67f aea2 	bls.w	80019a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40013800 	.word	0x40013800
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	40020800 	.word	0x40020800
 8001c84:	40020c00 	.word	0x40020c00
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40013c00 	.word	0x40013c00

08001c90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c92:	b08f      	sub	sp, #60	; 0x3c
 8001c94:	af0a      	add	r7, sp, #40	; 0x28
 8001c96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e10f      	b.n	8001ec2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d106      	bne.n	8001cc2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f005 fee7 	bl	8007a90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f002 fdbe 	bl	8004862 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	687e      	ldr	r6, [r7, #4]
 8001cee:	466d      	mov	r5, sp
 8001cf0:	f106 0410 	add.w	r4, r6, #16
 8001cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d00:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d04:	1d33      	adds	r3, r6, #4
 8001d06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d08:	6838      	ldr	r0, [r7, #0]
 8001d0a:	f002 fc95 	bl	8004638 <USB_CoreInit>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0d0      	b.n	8001ec2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f002 fdac 	bl	8004884 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	e04a      	b.n	8001dc8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	1a9b      	subs	r3, r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	333d      	adds	r3, #61	; 0x3d
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	333c      	adds	r3, #60	; 0x3c
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d5a:	7bfa      	ldrb	r2, [r7, #15]
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	b298      	uxth	r0, r3
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	1a9b      	subs	r3, r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	3342      	adds	r3, #66	; 0x42
 8001d6e:	4602      	mov	r2, r0
 8001d70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	1a9b      	subs	r3, r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	333f      	adds	r3, #63	; 0x3f
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d86:	7bfa      	ldrb	r2, [r7, #15]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	1a9b      	subs	r3, r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	3344      	adds	r3, #68	; 0x44
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	1a9b      	subs	r3, r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	3348      	adds	r3, #72	; 0x48
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	1a9b      	subs	r3, r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	3350      	adds	r3, #80	; 0x50
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	7bfa      	ldrb	r2, [r7, #15]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d3af      	bcc.n	8001d32 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]
 8001dd6:	e044      	b.n	8001e62 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dee:	7bfa      	ldrb	r2, [r7, #15]
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e04:	7bfa      	ldrb	r2, [r7, #15]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e1a:	7bfa      	ldrb	r2, [r7, #15]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e30:	7bfa      	ldrb	r2, [r7, #15]
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	1a9b      	subs	r3, r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e46:	7bfa      	ldrb	r2, [r7, #15]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	73fb      	strb	r3, [r7, #15]
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d3b5      	bcc.n	8001dd8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	687e      	ldr	r6, [r7, #4]
 8001e74:	466d      	mov	r5, sp
 8001e76:	f106 0410 	add.w	r4, r6, #16
 8001e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e86:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e8a:	1d33      	adds	r3, r6, #4
 8001e8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e8e:	6838      	ldr	r0, [r7, #0]
 8001e90:	f002 fd44 	bl	800491c <USB_DevInit>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00d      	b.n	8001ec2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 fdc0 	bl	8005a40 <USB_DevDisconnect>

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001eca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b084      	sub	sp, #16
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_PCD_Start+0x1c>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e020      	b.n	8001f28 <HAL_PCD_Start+0x5e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d109      	bne.n	8001f0a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d005      	beq.n	8001f0a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f002 fc96 	bl	8004840 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f003 fd70 	bl	80059fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b08d      	sub	sp, #52	; 0x34
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f003 fe2e 	bl	8005ba8 <USB_GetMode>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f040 839d 	bne.w	800268e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f003 fd92 	bl	8005a82 <USB_ReadInterrupts>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 8393 	beq.w	800268c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 fd89 	bl	8005a82 <USB_ReadInterrupts>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d107      	bne.n	8001f8a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f002 0202 	and.w	r2, r2, #2
 8001f88:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 fd77 	bl	8005a82 <USB_ReadInterrupts>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d161      	bne.n	8002062 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699a      	ldr	r2, [r3, #24]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0210 	bic.w	r2, r2, #16
 8001fac:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	f003 020f 	and.w	r2, r3, #15
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	0c5b      	lsrs	r3, r3, #17
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d124      	bne.n	8002024 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d035      	beq.n	8002052 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ff0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	6a38      	ldr	r0, [r7, #32]
 8001ffa:	f003 fbae 	bl	800575a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800200a:	441a      	add	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800201c:	441a      	add	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	619a      	str	r2, [r3, #24]
 8002022:	e016      	b.n	8002052 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	0c5b      	lsrs	r3, r3, #17
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	2b06      	cmp	r3, #6
 800202e:	d110      	bne.n	8002052 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002036:	2208      	movs	r2, #8
 8002038:	4619      	mov	r1, r3
 800203a:	6a38      	ldr	r0, [r7, #32]
 800203c:	f003 fb8d 	bl	800575a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	699a      	ldr	r2, [r3, #24]
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	091b      	lsrs	r3, r3, #4
 8002048:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800204c:	441a      	add	r2, r3
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699a      	ldr	r2, [r3, #24]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0210 	orr.w	r2, r2, #16
 8002060:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f003 fd0b 	bl	8005a82 <USB_ReadInterrupts>
 800206c:	4603      	mov	r3, r0
 800206e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002072:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002076:	d16e      	bne.n	8002156 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f003 fd11 	bl	8005aa8 <USB_ReadDevAllOutEpInterrupt>
 8002086:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002088:	e062      	b.n	8002150 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d057      	beq.n	8002144 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 fd36 	bl	8005b10 <USB_ReadDevOutEPInterrupt>
 80020a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00c      	beq.n	80020ca <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020bc:	461a      	mov	r2, r3
 80020be:	2301      	movs	r3, #1
 80020c0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80020c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fdb1 	bl	8002c2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00c      	beq.n	80020ee <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e0:	461a      	mov	r2, r3
 80020e2:	2308      	movs	r3, #8
 80020e4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 feab 	bl	8002e44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002104:	461a      	mov	r2, r3
 8002106:	2310      	movs	r3, #16
 8002108:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	4413      	add	r3, r2
 800211c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002120:	461a      	mov	r2, r3
 8002122:	2320      	movs	r3, #32
 8002124:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d009      	beq.n	8002144 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	4413      	add	r3, r2
 8002138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800213c:	461a      	mov	r2, r3
 800213e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002142:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	3301      	adds	r3, #1
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214c:	085b      	lsrs	r3, r3, #1
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	2b00      	cmp	r3, #0
 8002154:	d199      	bne.n	800208a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f003 fc91 	bl	8005a82 <USB_ReadInterrupts>
 8002160:	4603      	mov	r3, r0
 8002162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002166:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800216a:	f040 80c0 	bne.w	80022ee <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f003 fcb2 	bl	8005adc <USB_ReadDevAllInEpInterrupt>
 8002178:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800217e:	e0b2      	b.n	80022e6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 80a7 	beq.w	80022da <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f003 fcd8 	bl	8005b4c <USB_ReadDevInEPInterrupt>
 800219c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d057      	beq.n	8002258 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	2201      	movs	r2, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69f9      	ldr	r1, [r7, #28]
 80021c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021c8:	4013      	ands	r3, r2
 80021ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021d8:	461a      	mov	r2, r3
 80021da:	2301      	movs	r3, #1
 80021dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d132      	bne.n	800224c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ea:	4613      	mov	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	3348      	adds	r3, #72	; 0x48
 80021f6:	6819      	ldr	r1, [r3, #0]
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4403      	add	r3, r0
 8002206:	3344      	adds	r3, #68	; 0x44
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4419      	add	r1, r3
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002210:	4613      	mov	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4403      	add	r3, r0
 800221a:	3348      	adds	r3, #72	; 0x48
 800221c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	2b00      	cmp	r3, #0
 8002222:	d113      	bne.n	800224c <HAL_PCD_IRQHandler+0x31c>
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	3350      	adds	r3, #80	; 0x50
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d108      	bne.n	800224c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002244:	461a      	mov	r2, r3
 8002246:	2101      	movs	r1, #1
 8002248:	f003 fce0 	bl	8005c0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	b2db      	uxtb	r3, r3
 8002250:	4619      	mov	r1, r3
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f005 fc9d 	bl	8007b92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d008      	beq.n	8002274 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	4413      	add	r3, r2
 800226a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800226e:	461a      	mov	r2, r3
 8002270:	2308      	movs	r3, #8
 8002272:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b00      	cmp	r3, #0
 800227c:	d008      	beq.n	8002290 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	4413      	add	r3, r2
 8002286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800228a:	461a      	mov	r2, r3
 800228c:	2310      	movs	r3, #16
 800228e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d008      	beq.n	80022ac <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022a6:	461a      	mov	r2, r3
 80022a8:	2340      	movs	r3, #64	; 0x40
 80022aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022c2:	461a      	mov	r2, r3
 80022c4:	2302      	movs	r3, #2
 80022c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 fc1b 	bl	8002b10 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	3301      	adds	r3, #1
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	085b      	lsrs	r3, r3, #1
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f47f af49 	bne.w	8002180 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 fbc5 	bl	8005a82 <USB_ReadInterrupts>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002302:	d122      	bne.n	800234a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800231e:	2b01      	cmp	r3, #1
 8002320:	d108      	bne.n	8002334 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800232a:	2100      	movs	r1, #0
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fe27 	bl	8002f80 <HAL_PCDEx_LPM_Callback>
 8002332:	e002      	b.n	800233a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f005 fc99 	bl	8007c6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695a      	ldr	r2, [r3, #20]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002348:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f003 fb97 	bl	8005a82 <USB_ReadInterrupts>
 8002354:	4603      	mov	r3, r0
 8002356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800235a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800235e:	d112      	bne.n	8002386 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b01      	cmp	r3, #1
 800236e:	d102      	bne.n	8002376 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f005 fc55 	bl	8007c20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002384:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f003 fb79 	bl	8005a82 <USB_ReadInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239a:	f040 80c7 	bne.w	800252c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	69fa      	ldr	r2, [r7, #28]
 80023a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2110      	movs	r1, #16
 80023b8:	4618      	mov	r0, r3
 80023ba:	f002 fc13 	bl	8004be4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023be:	2300      	movs	r3, #0
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c2:	e056      	b.n	8002472 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80023c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023d0:	461a      	mov	r2, r3
 80023d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e8:	0151      	lsls	r1, r2, #5
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	440a      	add	r2, r1
 80023ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023f6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80023f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002408:	0151      	lsls	r1, r2, #5
 800240a:	69fa      	ldr	r2, [r7, #28]
 800240c:	440a      	add	r2, r1
 800240e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002412:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002416:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	4413      	add	r3, r2
 8002420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002424:	461a      	mov	r2, r3
 8002426:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800242a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	4413      	add	r3, r2
 8002434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800243c:	0151      	lsls	r1, r2, #5
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	440a      	add	r2, r1
 8002442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002446:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800244a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800244c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	4413      	add	r3, r2
 8002454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800245c:	0151      	lsls	r1, r2, #5
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	440a      	add	r2, r1
 8002462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002466:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800246a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	3301      	adds	r3, #1
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002478:	429a      	cmp	r2, r3
 800247a:	d3a3      	bcc.n	80023c4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800248a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800248e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	2b00      	cmp	r3, #0
 8002496:	d016      	beq.n	80024c6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800249e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024a8:	f043 030b 	orr.w	r3, r3, #11
 80024ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024be:	f043 030b 	orr.w	r3, r3, #11
 80024c2:	6453      	str	r3, [r2, #68]	; 0x44
 80024c4:	e015      	b.n	80024f2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	69fa      	ldr	r2, [r7, #28]
 80024d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024d8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80024dc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ec:	f043 030b 	orr.w	r3, r3, #11
 80024f0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002500:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002504:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002516:	461a      	mov	r2, r3
 8002518:	f003 fb78 	bl	8005c0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800252a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f003 faa6 	bl	8005a82 <USB_ReadInterrupts>
 8002536:	4603      	mov	r3, r0
 8002538:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800253c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002540:	d124      	bne.n	800258c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f003 fb3c 	bl	8005bc4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f002 fba4 	bl	8004c9e <USB_GetDevSpeed>
 8002556:	4603      	mov	r3, r0
 8002558:	461a      	mov	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681c      	ldr	r4, [r3, #0]
 8002562:	f001 f92d 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
 8002566:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800256c:	b2db      	uxtb	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	4620      	mov	r0, r4
 8002572:	f002 f8c3 	bl	80046fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f005 fb33 	bl	8007be2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800258a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f003 fa76 	bl	8005a82 <USB_ReadInterrupts>
 8002596:	4603      	mov	r3, r0
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b08      	cmp	r3, #8
 800259e:	d10a      	bne.n	80025b6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f005 fb10 	bl	8007bc6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695a      	ldr	r2, [r3, #20]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f002 0208 	and.w	r2, r2, #8
 80025b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f003 fa61 	bl	8005a82 <USB_ReadInterrupts>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025ca:	d10f      	bne.n	80025ec <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	4619      	mov	r1, r3
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f005 fb68 	bl	8007cac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80025ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f003 fa46 	bl	8005a82 <USB_ReadInterrupts>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002600:	d10f      	bne.n	8002622 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	b2db      	uxtb	r3, r3
 800260a:	4619      	mov	r1, r3
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f005 fb3b 	bl	8007c88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002620:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f003 fa2b 	bl	8005a82 <USB_ReadInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002636:	d10a      	bne.n	800264e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f005 fb49 	bl	8007cd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800264c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f003 fa15 	bl	8005a82 <USB_ReadInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b04      	cmp	r3, #4
 8002660:	d115      	bne.n	800268e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f005 fb39 	bl	8007cec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	e000      	b.n	800268e <HAL_PCD_IRQHandler+0x75e>
      return;
 800268c:	bf00      	nop
    }
  }
}
 800268e:	3734      	adds	r7, #52	; 0x34
 8002690:	46bd      	mov	sp, r7
 8002692:	bd90      	pop	{r4, r7, pc}

08002694 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_PCD_SetAddress+0x1a>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e013      	b.n	80026d6 <HAL_PCD_SetAddress+0x42>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	78fa      	ldrb	r2, [r7, #3]
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f003 f973 	bl	80059b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	4608      	mov	r0, r1
 80026e8:	4611      	mov	r1, r2
 80026ea:	461a      	mov	r2, r3
 80026ec:	4603      	mov	r3, r0
 80026ee:	70fb      	strb	r3, [r7, #3]
 80026f0:	460b      	mov	r3, r1
 80026f2:	803b      	strh	r3, [r7, #0]
 80026f4:	4613      	mov	r3, r2
 80026f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002700:	2b00      	cmp	r3, #0
 8002702:	da0f      	bge.n	8002724 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	f003 020f 	and.w	r2, r3, #15
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	3338      	adds	r3, #56	; 0x38
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	4413      	add	r3, r2
 8002718:	3304      	adds	r3, #4
 800271a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	705a      	strb	r2, [r3, #1]
 8002722:	e00f      	b.n	8002744 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	f003 020f 	and.w	r2, r3, #15
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	1a9b      	subs	r3, r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	3304      	adds	r3, #4
 800273c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	b2da      	uxtb	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002750:	883a      	ldrh	r2, [r7, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	78ba      	ldrb	r2, [r7, #2]
 800275a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	785b      	ldrb	r3, [r3, #1]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d004      	beq.n	800276e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800276e:	78bb      	ldrb	r3, [r7, #2]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d102      	bne.n	800277a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_PCD_EP_Open+0xaa>
 8002784:	2302      	movs	r3, #2
 8002786:	e00e      	b.n	80027a6 <HAL_PCD_EP_Open+0xc8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68f9      	ldr	r1, [r7, #12]
 8002796:	4618      	mov	r0, r3
 8002798:	f002 faa6 	bl	8004ce8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80027a4:	7afb      	ldrb	r3, [r7, #11]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	460b      	mov	r3, r1
 80027b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	da0f      	bge.n	80027e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	f003 020f 	and.w	r2, r3, #15
 80027c8:	4613      	mov	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	3338      	adds	r3, #56	; 0x38
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	3304      	adds	r3, #4
 80027d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	705a      	strb	r2, [r3, #1]
 80027e0:	e00f      	b.n	8002802 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	f003 020f 	and.w	r2, r3, #15
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	4413      	add	r3, r2
 80027f8:	3304      	adds	r3, #4
 80027fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	b2da      	uxtb	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_PCD_EP_Close+0x6e>
 8002818:	2302      	movs	r3, #2
 800281a:	e00e      	b.n	800283a <HAL_PCD_EP_Close+0x8c>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68f9      	ldr	r1, [r7, #12]
 800282a:	4618      	mov	r0, r3
 800282c:	f002 fae4 	bl	8004df8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b086      	sub	sp, #24
 8002846:	af00      	add	r7, sp, #0
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	460b      	mov	r3, r1
 8002850:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002852:	7afb      	ldrb	r3, [r7, #11]
 8002854:	f003 020f 	and.w	r2, r3, #15
 8002858:	4613      	mov	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4413      	add	r3, r2
 8002868:	3304      	adds	r3, #4
 800286a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2200      	movs	r2, #0
 800287c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2200      	movs	r2, #0
 8002882:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002884:	7afb      	ldrb	r3, [r7, #11]
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	b2da      	uxtb	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d102      	bne.n	800289e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800289e:	7afb      	ldrb	r3, [r7, #11]
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	6979      	ldr	r1, [r7, #20]
 80028b6:	f002 fdbf 	bl	8005438 <USB_EP0StartXfer>
 80028ba:	e008      	b.n	80028ce <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	6979      	ldr	r1, [r7, #20]
 80028ca:	f002 fb71 	bl	8004fb0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	f003 020f 	and.w	r2, r3, #15
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80028fa:	681b      	ldr	r3, [r3, #0]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	460b      	mov	r3, r1
 8002916:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002918:	7afb      	ldrb	r3, [r7, #11]
 800291a:	f003 020f 	and.w	r2, r3, #15
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	3338      	adds	r3, #56	; 0x38
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	3304      	adds	r3, #4
 800292e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2200      	movs	r2, #0
 8002940:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2201      	movs	r2, #1
 8002946:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002948:	7afb      	ldrb	r3, [r7, #11]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	b2da      	uxtb	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d102      	bne.n	8002962 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002962:	7afb      	ldrb	r3, [r7, #11]
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	2b00      	cmp	r3, #0
 800296a:	d109      	bne.n	8002980 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	6979      	ldr	r1, [r7, #20]
 800297a:	f002 fd5d 	bl	8005438 <USB_EP0StartXfer>
 800297e:	e008      	b.n	8002992 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	6979      	ldr	r1, [r7, #20]
 800298e:	f002 fb0f 	bl	8004fb0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	f003 020f 	and.w	r2, r3, #15
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d901      	bls.n	80029ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e050      	b.n	8002a5c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	da0f      	bge.n	80029e2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	f003 020f 	and.w	r2, r3, #15
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	3338      	adds	r3, #56	; 0x38
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	3304      	adds	r3, #4
 80029d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	705a      	strb	r2, [r3, #1]
 80029e0:	e00d      	b.n	80029fe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4413      	add	r3, r2
 80029f4:	3304      	adds	r3, #4
 80029f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_PCD_EP_SetStall+0x82>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e01e      	b.n	8002a5c <HAL_PCD_EP_SetStall+0xc0>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68f9      	ldr	r1, [r7, #12]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f002 feec 	bl	800580a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	b2d9      	uxtb	r1, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f003 f8dd 	bl	8005c0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	f003 020f 	and.w	r2, r3, #15
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d901      	bls.n	8002a82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e042      	b.n	8002b08 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	da0f      	bge.n	8002aaa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	f003 020f 	and.w	r2, r3, #15
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	3338      	adds	r3, #56	; 0x38
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	705a      	strb	r2, [r3, #1]
 8002aa8:	e00f      	b.n	8002aca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	f003 020f 	and.w	r2, r3, #15
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_PCD_EP_ClrStall+0x86>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e00e      	b.n	8002b08 <HAL_PCD_EP_ClrStall+0xa4>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68f9      	ldr	r1, [r7, #12]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f002 fef4 	bl	80058e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	; 0x28
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	3338      	adds	r3, #56	; 0x38
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	4413      	add	r3, r2
 8002b34:	3304      	adds	r3, #4
 8002b36:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d901      	bls.n	8002b48 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e06c      	b.n	8002c22 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	695a      	ldr	r2, [r3, #20]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d902      	bls.n	8002b64 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	3303      	adds	r3, #3
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b6c:	e02b      	b.n	8002bc6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	695a      	ldr	r2, [r3, #20]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d902      	bls.n	8002b8a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3303      	adds	r3, #3
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	68d9      	ldr	r1, [r3, #12]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	6978      	ldr	r0, [r7, #20]
 8002baa:	f002 fd98 	bl	80056de <USB_WritePacket>

    ep->xfer_buff  += len;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	441a      	add	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	699a      	ldr	r2, [r3, #24]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	441a      	add	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d809      	bhi.n	8002bf0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	699a      	ldr	r2, [r3, #24]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d203      	bcs.n	8002bf0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1be      	bne.n	8002b6e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d811      	bhi.n	8002c20 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	2201      	movs	r2, #1
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	6939      	ldr	r1, [r7, #16]
 8002c18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3720      	adds	r7, #32
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	333c      	adds	r3, #60	; 0x3c
 8002c44:	3304      	adds	r3, #4
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	f040 80a0 	bne.w	8002da4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d015      	beq.n	8002c9a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4a72      	ldr	r2, [pc, #456]	; (8002e3c <PCD_EP_OutXfrComplete_int+0x210>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	f240 80dd 	bls.w	8002e32 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 80d7 	beq.w	8002e32 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c90:	461a      	mov	r2, r3
 8002c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c96:	6093      	str	r3, [r2, #8]
 8002c98:	e0cb      	b.n	8002e32 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d009      	beq.n	8002cb8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	6093      	str	r3, [r2, #8]
 8002cb6:	e0bc      	b.n	8002e32 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 80b7 	bne.w	8002e32 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4a5d      	ldr	r2, [pc, #372]	; (8002e3c <PCD_EP_OutXfrComplete_int+0x210>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d90f      	bls.n	8002cec <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ce8:	6093      	str	r3, [r2, #8]
 8002cea:	e0a2      	b.n	8002e32 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002cfe:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	0159      	lsls	r1, r3, #5
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	440b      	add	r3, r1
 8002d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002d12:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4403      	add	r3, r0
 8002d22:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d26:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d3a:	6819      	ldr	r1, [r3, #0]
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4403      	add	r3, r0
 8002d4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4419      	add	r1, r3
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4613      	mov	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4403      	add	r3, r0
 8002d60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d64:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d114      	bne.n	8002d96 <PCD_EP_OutXfrComplete_int+0x16a>
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d108      	bne.n	8002d96 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2101      	movs	r1, #1
 8002d92:	f002 ff3b 	bl	8005c0c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f004 fedd 	bl	8007b5c <HAL_PCD_DataOutStageCallback>
 8002da2:	e046      	b.n	8002e32 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4a26      	ldr	r2, [pc, #152]	; (8002e40 <PCD_EP_OutXfrComplete_int+0x214>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d124      	bne.n	8002df6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dc8:	6093      	str	r3, [r2, #8]
 8002dca:	e032      	b.n	8002e32 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de2:	461a      	mov	r2, r3
 8002de4:	2320      	movs	r3, #32
 8002de6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	4619      	mov	r1, r3
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f004 feb4 	bl	8007b5c <HAL_PCD_DataOutStageCallback>
 8002df4:	e01d      	b.n	8002e32 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d114      	bne.n	8002e26 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d108      	bne.n	8002e26 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2100      	movs	r1, #0
 8002e22:	f002 fef3 	bl	8005c0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f004 fe95 	bl	8007b5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	4f54300a 	.word	0x4f54300a
 8002e40:	4f54310a 	.word	0x4f54310a

08002e44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	333c      	adds	r3, #60	; 0x3c
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4a15      	ldr	r2, [pc, #84]	; (8002ecc <PCD_EP_OutSetupPacket_int+0x88>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d90e      	bls.n	8002e98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d009      	beq.n	8002e98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e90:	461a      	mov	r2, r3
 8002e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f004 fe4d 	bl	8007b38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <PCD_EP_OutSetupPacket_int+0x88>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d90c      	bls.n	8002ec0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d108      	bne.n	8002ec0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2101      	movs	r1, #1
 8002ebc:	f002 fea6 	bl	8005c0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	4f54300a 	.word	0x4f54300a

08002ed0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
 8002edc:	4613      	mov	r3, r2
 8002ede:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d107      	bne.n	8002efe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002eee:	883b      	ldrh	r3, [r7, #0]
 8002ef0:	0419      	lsls	r1, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28
 8002efc:	e028      	b.n	8002f50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	4413      	add	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	73fb      	strb	r3, [r7, #15]
 8002f10:	e00d      	b.n	8002f2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	3340      	adds	r3, #64	; 0x40
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	0c1b      	lsrs	r3, r3, #16
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	4413      	add	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	73fb      	strb	r3, [r7, #15]
 8002f2e:	7bfa      	ldrb	r2, [r7, #15]
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d3ec      	bcc.n	8002f12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f38:	883b      	ldrh	r3, [r7, #0]
 8002f3a:	0418      	lsls	r0, r3, #16
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	4302      	orrs	r2, r0
 8002f48:	3340      	adds	r3, #64	; 0x40
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	460b      	mov	r3, r1
 8002f68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	887a      	ldrh	r2, [r7, #2]
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e264      	b.n	8003474 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d075      	beq.n	80030a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fb6:	4ba3      	ldr	r3, [pc, #652]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d00c      	beq.n	8002fdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc2:	4ba0      	ldr	r3, [pc, #640]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d112      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fce:	4b9d      	ldr	r3, [pc, #628]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fda:	d10b      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fdc:	4b99      	ldr	r3, [pc, #612]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d05b      	beq.n	80030a0 <HAL_RCC_OscConfig+0x108>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d157      	bne.n	80030a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e23f      	b.n	8003474 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffc:	d106      	bne.n	800300c <HAL_RCC_OscConfig+0x74>
 8002ffe:	4b91      	ldr	r3, [pc, #580]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a90      	ldr	r2, [pc, #576]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 8003004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	e01d      	b.n	8003048 <HAL_RCC_OscConfig+0xb0>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003014:	d10c      	bne.n	8003030 <HAL_RCC_OscConfig+0x98>
 8003016:	4b8b      	ldr	r3, [pc, #556]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a8a      	ldr	r2, [pc, #552]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b88      	ldr	r3, [pc, #544]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a87      	ldr	r2, [pc, #540]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e00b      	b.n	8003048 <HAL_RCC_OscConfig+0xb0>
 8003030:	4b84      	ldr	r3, [pc, #528]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a83      	ldr	r2, [pc, #524]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 8003036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	4b81      	ldr	r3, [pc, #516]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a80      	ldr	r2, [pc, #512]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 8003042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d013      	beq.n	8003078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fe fb58 	bl	8001704 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003058:	f7fe fb54 	bl	8001704 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b64      	cmp	r3, #100	; 0x64
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e204      	b.n	8003474 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	4b76      	ldr	r3, [pc, #472]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0xc0>
 8003076:	e014      	b.n	80030a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fe fb44 	bl	8001704 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003080:	f7fe fb40 	bl	8001704 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b64      	cmp	r3, #100	; 0x64
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e1f0      	b.n	8003474 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003092:	4b6c      	ldr	r3, [pc, #432]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0xe8>
 800309e:	e000      	b.n	80030a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d063      	beq.n	8003176 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ae:	4b65      	ldr	r3, [pc, #404]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00b      	beq.n	80030d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ba:	4b62      	ldr	r3, [pc, #392]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d11c      	bne.n	8003100 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030c6:	4b5f      	ldr	r3, [pc, #380]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d116      	bne.n	8003100 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030d2:	4b5c      	ldr	r3, [pc, #368]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <HAL_RCC_OscConfig+0x152>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d001      	beq.n	80030ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e1c4      	b.n	8003474 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ea:	4b56      	ldr	r3, [pc, #344]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4952      	ldr	r1, [pc, #328]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fe:	e03a      	b.n	8003176 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d020      	beq.n	800314a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003108:	4b4f      	ldr	r3, [pc, #316]	; (8003248 <HAL_RCC_OscConfig+0x2b0>)
 800310a:	2201      	movs	r2, #1
 800310c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310e:	f7fe faf9 	bl	8001704 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003116:	f7fe faf5 	bl	8001704 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e1a5      	b.n	8003474 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003128:	4b46      	ldr	r3, [pc, #280]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003134:	4b43      	ldr	r3, [pc, #268]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4940      	ldr	r1, [pc, #256]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 8003144:	4313      	orrs	r3, r2
 8003146:	600b      	str	r3, [r1, #0]
 8003148:	e015      	b.n	8003176 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800314a:	4b3f      	ldr	r3, [pc, #252]	; (8003248 <HAL_RCC_OscConfig+0x2b0>)
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fe fad8 	bl	8001704 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003158:	f7fe fad4 	bl	8001704 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e184      	b.n	8003474 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316a:	4b36      	ldr	r3, [pc, #216]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d030      	beq.n	80031e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d016      	beq.n	80031b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800318a:	4b30      	ldr	r3, [pc, #192]	; (800324c <HAL_RCC_OscConfig+0x2b4>)
 800318c:	2201      	movs	r2, #1
 800318e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003190:	f7fe fab8 	bl	8001704 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003198:	f7fe fab4 	bl	8001704 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e164      	b.n	8003474 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031aa:	4b26      	ldr	r3, [pc, #152]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0x200>
 80031b6:	e015      	b.n	80031e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b8:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCC_OscConfig+0x2b4>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031be:	f7fe faa1 	bl	8001704 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c6:	f7fe fa9d 	bl	8001704 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e14d      	b.n	8003474 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d8:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 80031da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f0      	bne.n	80031c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80a0 	beq.w	8003332 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f2:	2300      	movs	r3, #0
 80031f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f6:	4b13      	ldr	r3, [pc, #76]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10f      	bne.n	8003222 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	4a0e      	ldr	r2, [pc, #56]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003210:	6413      	str	r3, [r2, #64]	; 0x40
 8003212:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <HAL_RCC_OscConfig+0x2ac>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321e:	2301      	movs	r3, #1
 8003220:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_OscConfig+0x2b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322a:	2b00      	cmp	r3, #0
 800322c:	d121      	bne.n	8003272 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800322e:	4b08      	ldr	r3, [pc, #32]	; (8003250 <HAL_RCC_OscConfig+0x2b8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a07      	ldr	r2, [pc, #28]	; (8003250 <HAL_RCC_OscConfig+0x2b8>)
 8003234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800323a:	f7fe fa63 	bl	8001704 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003240:	e011      	b.n	8003266 <HAL_RCC_OscConfig+0x2ce>
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800
 8003248:	42470000 	.word	0x42470000
 800324c:	42470e80 	.word	0x42470e80
 8003250:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003254:	f7fe fa56 	bl	8001704 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e106      	b.n	8003474 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003266:	4b85      	ldr	r3, [pc, #532]	; (800347c <HAL_RCC_OscConfig+0x4e4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d106      	bne.n	8003288 <HAL_RCC_OscConfig+0x2f0>
 800327a:	4b81      	ldr	r3, [pc, #516]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 800327c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327e:	4a80      	ldr	r2, [pc, #512]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6713      	str	r3, [r2, #112]	; 0x70
 8003286:	e01c      	b.n	80032c2 <HAL_RCC_OscConfig+0x32a>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b05      	cmp	r3, #5
 800328e:	d10c      	bne.n	80032aa <HAL_RCC_OscConfig+0x312>
 8003290:	4b7b      	ldr	r3, [pc, #492]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	4a7a      	ldr	r2, [pc, #488]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 8003296:	f043 0304 	orr.w	r3, r3, #4
 800329a:	6713      	str	r3, [r2, #112]	; 0x70
 800329c:	4b78      	ldr	r3, [pc, #480]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a77      	ldr	r2, [pc, #476]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	e00b      	b.n	80032c2 <HAL_RCC_OscConfig+0x32a>
 80032aa:	4b75      	ldr	r3, [pc, #468]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	4a74      	ldr	r2, [pc, #464]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	6713      	str	r3, [r2, #112]	; 0x70
 80032b6:	4b72      	ldr	r3, [pc, #456]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	4a71      	ldr	r2, [pc, #452]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 80032bc:	f023 0304 	bic.w	r3, r3, #4
 80032c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d015      	beq.n	80032f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ca:	f7fe fa1b 	bl	8001704 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fe fa17 	bl	8001704 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e0c5      	b.n	8003474 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e8:	4b65      	ldr	r3, [pc, #404]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0ee      	beq.n	80032d2 <HAL_RCC_OscConfig+0x33a>
 80032f4:	e014      	b.n	8003320 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f6:	f7fe fa05 	bl	8001704 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fc:	e00a      	b.n	8003314 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032fe:	f7fe fa01 	bl	8001704 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	f241 3288 	movw	r2, #5000	; 0x1388
 800330c:	4293      	cmp	r3, r2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e0af      	b.n	8003474 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003314:	4b5a      	ldr	r3, [pc, #360]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1ee      	bne.n	80032fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d105      	bne.n	8003332 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003326:	4b56      	ldr	r3, [pc, #344]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	4a55      	ldr	r2, [pc, #340]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 800332c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003330:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 809b 	beq.w	8003472 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800333c:	4b50      	ldr	r3, [pc, #320]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	2b08      	cmp	r3, #8
 8003346:	d05c      	beq.n	8003402 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d141      	bne.n	80033d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003350:	4b4c      	ldr	r3, [pc, #304]	; (8003484 <HAL_RCC_OscConfig+0x4ec>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003356:	f7fe f9d5 	bl	8001704 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335e:	f7fe f9d1 	bl	8001704 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e081      	b.n	8003474 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003370:	4b43      	ldr	r3, [pc, #268]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f0      	bne.n	800335e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	019b      	lsls	r3, r3, #6
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	3b01      	subs	r3, #1
 8003396:	041b      	lsls	r3, r3, #16
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339e:	061b      	lsls	r3, r3, #24
 80033a0:	4937      	ldr	r1, [pc, #220]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033a6:	4b37      	ldr	r3, [pc, #220]	; (8003484 <HAL_RCC_OscConfig+0x4ec>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7fe f9aa 	bl	8001704 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b4:	f7fe f9a6 	bl	8001704 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e056      	b.n	8003474 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c6:	4b2e      	ldr	r3, [pc, #184]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x41c>
 80033d2:	e04e      	b.n	8003472 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d4:	4b2b      	ldr	r3, [pc, #172]	; (8003484 <HAL_RCC_OscConfig+0x4ec>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033da:	f7fe f993 	bl	8001704 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e2:	f7fe f98f 	bl	8001704 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e03f      	b.n	8003474 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f4:	4b22      	ldr	r3, [pc, #136]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f0      	bne.n	80033e2 <HAL_RCC_OscConfig+0x44a>
 8003400:	e037      	b.n	8003472 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e032      	b.n	8003474 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800340e:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <HAL_RCC_OscConfig+0x4e8>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d028      	beq.n	800346e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003426:	429a      	cmp	r2, r3
 8003428:	d121      	bne.n	800346e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003434:	429a      	cmp	r2, r3
 8003436:	d11a      	bne.n	800346e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800343e:	4013      	ands	r3, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003444:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003446:	4293      	cmp	r3, r2
 8003448:	d111      	bne.n	800346e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	085b      	lsrs	r3, r3, #1
 8003456:	3b01      	subs	r3, #1
 8003458:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800345a:	429a      	cmp	r2, r3
 800345c:	d107      	bne.n	800346e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d001      	beq.n	8003472 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40007000 	.word	0x40007000
 8003480:	40023800 	.word	0x40023800
 8003484:	42470060 	.word	0x42470060

08003488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0cc      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800349c:	4b68      	ldr	r3, [pc, #416]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d90c      	bls.n	80034c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034aa:	4b65      	ldr	r3, [pc, #404]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b2:	4b63      	ldr	r3, [pc, #396]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d001      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0b8      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d020      	beq.n	8003512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034dc:	4b59      	ldr	r3, [pc, #356]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	4a58      	ldr	r2, [pc, #352]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034f4:	4b53      	ldr	r3, [pc, #332]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4a52      	ldr	r2, [pc, #328]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003500:	4b50      	ldr	r3, [pc, #320]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	494d      	ldr	r1, [pc, #308]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d044      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d107      	bne.n	8003536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003526:	4b47      	ldr	r3, [pc, #284]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d119      	bne.n	8003566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e07f      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d003      	beq.n	8003546 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003542:	2b03      	cmp	r3, #3
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003546:	4b3f      	ldr	r3, [pc, #252]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e06f      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003556:	4b3b      	ldr	r3, [pc, #236]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e067      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003566:	4b37      	ldr	r3, [pc, #220]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f023 0203 	bic.w	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4934      	ldr	r1, [pc, #208]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	4313      	orrs	r3, r2
 8003576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003578:	f7fe f8c4 	bl	8001704 <HAL_GetTick>
 800357c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357e:	e00a      	b.n	8003596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003580:	f7fe f8c0 	bl	8001704 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e04f      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	4b2b      	ldr	r3, [pc, #172]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 020c 	and.w	r2, r3, #12
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d1eb      	bne.n	8003580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035a8:	4b25      	ldr	r3, [pc, #148]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d20c      	bcs.n	80035d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b22      	ldr	r3, [pc, #136]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035be:	4b20      	ldr	r3, [pc, #128]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e032      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035dc:	4b19      	ldr	r3, [pc, #100]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4916      	ldr	r1, [pc, #88]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d009      	beq.n	800360e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035fa:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	490e      	ldr	r1, [pc, #56]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	4313      	orrs	r3, r2
 800360c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800360e:	f000 f821 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 8003612:	4602      	mov	r2, r0
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	091b      	lsrs	r3, r3, #4
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	490a      	ldr	r1, [pc, #40]	; (8003648 <HAL_RCC_ClockConfig+0x1c0>)
 8003620:	5ccb      	ldrb	r3, [r1, r3]
 8003622:	fa22 f303 	lsr.w	r3, r2, r3
 8003626:	4a09      	ldr	r2, [pc, #36]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 8003628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe f824 	bl	800167c <HAL_InitTick>

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40023c00 	.word	0x40023c00
 8003644:	40023800 	.word	0x40023800
 8003648:	08008b60 	.word	0x08008b60
 800364c:	20000000 	.word	0x20000000
 8003650:	20000004 	.word	0x20000004

08003654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003654:	b5b0      	push	{r4, r5, r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800365a:	2100      	movs	r1, #0
 800365c:	6079      	str	r1, [r7, #4]
 800365e:	2100      	movs	r1, #0
 8003660:	60f9      	str	r1, [r7, #12]
 8003662:	2100      	movs	r1, #0
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003666:	2100      	movs	r1, #0
 8003668:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800366a:	4952      	ldr	r1, [pc, #328]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800366c:	6889      	ldr	r1, [r1, #8]
 800366e:	f001 010c 	and.w	r1, r1, #12
 8003672:	2908      	cmp	r1, #8
 8003674:	d00d      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0x3e>
 8003676:	2908      	cmp	r1, #8
 8003678:	f200 8094 	bhi.w	80037a4 <HAL_RCC_GetSysClockFreq+0x150>
 800367c:	2900      	cmp	r1, #0
 800367e:	d002      	beq.n	8003686 <HAL_RCC_GetSysClockFreq+0x32>
 8003680:	2904      	cmp	r1, #4
 8003682:	d003      	beq.n	800368c <HAL_RCC_GetSysClockFreq+0x38>
 8003684:	e08e      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003686:	4b4c      	ldr	r3, [pc, #304]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003688:	60bb      	str	r3, [r7, #8]
       break;
 800368a:	e08e      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800368c:	4b4b      	ldr	r3, [pc, #300]	; (80037bc <HAL_RCC_GetSysClockFreq+0x168>)
 800368e:	60bb      	str	r3, [r7, #8]
      break;
 8003690:	e08b      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003692:	4948      	ldr	r1, [pc, #288]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003694:	6849      	ldr	r1, [r1, #4]
 8003696:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800369a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800369c:	4945      	ldr	r1, [pc, #276]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800369e:	6849      	ldr	r1, [r1, #4]
 80036a0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80036a4:	2900      	cmp	r1, #0
 80036a6:	d024      	beq.n	80036f2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a8:	4942      	ldr	r1, [pc, #264]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80036aa:	6849      	ldr	r1, [r1, #4]
 80036ac:	0989      	lsrs	r1, r1, #6
 80036ae:	4608      	mov	r0, r1
 80036b0:	f04f 0100 	mov.w	r1, #0
 80036b4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80036b8:	f04f 0500 	mov.w	r5, #0
 80036bc:	ea00 0204 	and.w	r2, r0, r4
 80036c0:	ea01 0305 	and.w	r3, r1, r5
 80036c4:	493d      	ldr	r1, [pc, #244]	; (80037bc <HAL_RCC_GetSysClockFreq+0x168>)
 80036c6:	fb01 f003 	mul.w	r0, r1, r3
 80036ca:	2100      	movs	r1, #0
 80036cc:	fb01 f102 	mul.w	r1, r1, r2
 80036d0:	1844      	adds	r4, r0, r1
 80036d2:	493a      	ldr	r1, [pc, #232]	; (80037bc <HAL_RCC_GetSysClockFreq+0x168>)
 80036d4:	fba2 0101 	umull	r0, r1, r2, r1
 80036d8:	1863      	adds	r3, r4, r1
 80036da:	4619      	mov	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	461a      	mov	r2, r3
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	f7fc ff90 	bl	8000608 <__aeabi_uldivmod>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4613      	mov	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	e04a      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f2:	4b30      	ldr	r3, [pc, #192]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	099b      	lsrs	r3, r3, #6
 80036f8:	461a      	mov	r2, r3
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003702:	f04f 0100 	mov.w	r1, #0
 8003706:	ea02 0400 	and.w	r4, r2, r0
 800370a:	ea03 0501 	and.w	r5, r3, r1
 800370e:	4620      	mov	r0, r4
 8003710:	4629      	mov	r1, r5
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	014b      	lsls	r3, r1, #5
 800371c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003720:	0142      	lsls	r2, r0, #5
 8003722:	4610      	mov	r0, r2
 8003724:	4619      	mov	r1, r3
 8003726:	1b00      	subs	r0, r0, r4
 8003728:	eb61 0105 	sbc.w	r1, r1, r5
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	018b      	lsls	r3, r1, #6
 8003736:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800373a:	0182      	lsls	r2, r0, #6
 800373c:	1a12      	subs	r2, r2, r0
 800373e:	eb63 0301 	sbc.w	r3, r3, r1
 8003742:	f04f 0000 	mov.w	r0, #0
 8003746:	f04f 0100 	mov.w	r1, #0
 800374a:	00d9      	lsls	r1, r3, #3
 800374c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003750:	00d0      	lsls	r0, r2, #3
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	1912      	adds	r2, r2, r4
 8003758:	eb45 0303 	adc.w	r3, r5, r3
 800375c:	f04f 0000 	mov.w	r0, #0
 8003760:	f04f 0100 	mov.w	r1, #0
 8003764:	0299      	lsls	r1, r3, #10
 8003766:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800376a:	0290      	lsls	r0, r2, #10
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	461a      	mov	r2, r3
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	f7fc ff44 	bl	8000608 <__aeabi_uldivmod>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4613      	mov	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	0c1b      	lsrs	r3, r3, #16
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	3301      	adds	r3, #1
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a0:	60bb      	str	r3, [r7, #8]
      break;
 80037a2:	e002      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x164>)
 80037a6:	60bb      	str	r3, [r7, #8]
      break;
 80037a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037aa:	68bb      	ldr	r3, [r7, #8]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bdb0      	pop	{r4, r5, r7, pc}
 80037b4:	40023800 	.word	0x40023800
 80037b8:	00f42400 	.word	0x00f42400
 80037bc:	017d7840 	.word	0x017d7840

080037c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c4:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037c6:	681b      	ldr	r3, [r3, #0]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000000 	.word	0x20000000

080037d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e041      	b.n	800386e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fd fdfe 	bl	8001400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3304      	adds	r3, #4
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f000 fbe6 	bl	8003fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e041      	b.n	800390c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d106      	bne.n	80038a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7fd fd4d 	bl	800133c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3304      	adds	r3, #4
 80038b2:	4619      	mov	r1, r3
 80038b4:	4610      	mov	r0, r2
 80038b6:	f000 fb97 	bl	8003fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e097      	b.n	8003a58 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d106      	bne.n	8003942 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7fd fc61 	bl	8001204 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003958:	f023 0307 	bic.w	r3, r3, #7
 800395c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3304      	adds	r3, #4
 8003966:	4619      	mov	r1, r3
 8003968:	4610      	mov	r0, r2
 800396a:	f000 fb3d 	bl	8003fe8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003996:	f023 0303 	bic.w	r3, r3, #3
 800399a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	021b      	lsls	r3, r3, #8
 80039a6:	4313      	orrs	r3, r2
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80039b4:	f023 030c 	bic.w	r3, r3, #12
 80039b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	4313      	orrs	r3, r2
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	011a      	lsls	r2, r3, #4
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	031b      	lsls	r3, r3, #12
 80039e4:	4313      	orrs	r3, r2
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80039f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80039fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	4313      	orrs	r3, r2
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d122      	bne.n	8003abc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d11b      	bne.n	8003abc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0202 	mvn.w	r2, #2
 8003a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fa81 	bl	8003faa <HAL_TIM_IC_CaptureCallback>
 8003aa8:	e005      	b.n	8003ab6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fa73 	bl	8003f96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fa84 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d122      	bne.n	8003b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d11b      	bne.n	8003b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0204 	mvn.w	r2, #4
 8003ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fa57 	bl	8003faa <HAL_TIM_IC_CaptureCallback>
 8003afc:	e005      	b.n	8003b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fa49 	bl	8003f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fa5a 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d122      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d11b      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0208 	mvn.w	r2, #8
 8003b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2204      	movs	r2, #4
 8003b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fa2d 	bl	8003faa <HAL_TIM_IC_CaptureCallback>
 8003b50:	e005      	b.n	8003b5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fa1f 	bl	8003f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fa30 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	d122      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b10      	cmp	r3, #16
 8003b7e:	d11b      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f06f 0210 	mvn.w	r2, #16
 8003b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fa03 	bl	8003faa <HAL_TIM_IC_CaptureCallback>
 8003ba4:	e005      	b.n	8003bb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f9f5 	bl	8003f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fa06 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d10e      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d107      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f06f 0201 	mvn.w	r2, #1
 8003bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f9cf 	bl	8003f82 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bee:	2b80      	cmp	r3, #128	; 0x80
 8003bf0:	d10e      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfc:	2b80      	cmp	r3, #128	; 0x80
 8003bfe:	d107      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fd0a 	bl	8004624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1a:	2b40      	cmp	r3, #64	; 0x40
 8003c1c:	d10e      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c28:	2b40      	cmp	r3, #64	; 0x40
 8003c2a:	d107      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f9cb 	bl	8003fd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b20      	cmp	r3, #32
 8003c48:	d10e      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d107      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0220 	mvn.w	r2, #32
 8003c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fcd4 	bl	8004610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c68:	bf00      	nop
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e0ae      	b.n	8003dec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b0c      	cmp	r3, #12
 8003c9a:	f200 809f 	bhi.w	8003ddc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	08003cd9 	.word	0x08003cd9
 8003ca8:	08003ddd 	.word	0x08003ddd
 8003cac:	08003ddd 	.word	0x08003ddd
 8003cb0:	08003ddd 	.word	0x08003ddd
 8003cb4:	08003d19 	.word	0x08003d19
 8003cb8:	08003ddd 	.word	0x08003ddd
 8003cbc:	08003ddd 	.word	0x08003ddd
 8003cc0:	08003ddd 	.word	0x08003ddd
 8003cc4:	08003d5b 	.word	0x08003d5b
 8003cc8:	08003ddd 	.word	0x08003ddd
 8003ccc:	08003ddd 	.word	0x08003ddd
 8003cd0:	08003ddd 	.word	0x08003ddd
 8003cd4:	08003d9b 	.word	0x08003d9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fa02 	bl	80040e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0208 	orr.w	r2, r2, #8
 8003cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0204 	bic.w	r2, r2, #4
 8003d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6999      	ldr	r1, [r3, #24]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	619a      	str	r2, [r3, #24]
      break;
 8003d16:	e064      	b.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fa48 	bl	80041b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6999      	ldr	r1, [r3, #24]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	021a      	lsls	r2, r3, #8
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	619a      	str	r2, [r3, #24]
      break;
 8003d58:	e043      	b.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fa93 	bl	800428c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69da      	ldr	r2, [r3, #28]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0208 	orr.w	r2, r2, #8
 8003d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69da      	ldr	r2, [r3, #28]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0204 	bic.w	r2, r2, #4
 8003d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69d9      	ldr	r1, [r3, #28]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	61da      	str	r2, [r3, #28]
      break;
 8003d98:	e023      	b.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fadd 	bl	8004360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69d9      	ldr	r1, [r3, #28]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	021a      	lsls	r2, r3, #8
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	61da      	str	r2, [r3, #28]
      break;
 8003dda:	e002      	b.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	75fb      	strb	r3, [r7, #23]
      break;
 8003de0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_TIM_ConfigClockSource+0x1c>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e0b4      	b.n	8003f7a <HAL_TIM_ConfigClockSource+0x186>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e48:	d03e      	beq.n	8003ec8 <HAL_TIM_ConfigClockSource+0xd4>
 8003e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4e:	f200 8087 	bhi.w	8003f60 <HAL_TIM_ConfigClockSource+0x16c>
 8003e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e56:	f000 8086 	beq.w	8003f66 <HAL_TIM_ConfigClockSource+0x172>
 8003e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5e:	d87f      	bhi.n	8003f60 <HAL_TIM_ConfigClockSource+0x16c>
 8003e60:	2b70      	cmp	r3, #112	; 0x70
 8003e62:	d01a      	beq.n	8003e9a <HAL_TIM_ConfigClockSource+0xa6>
 8003e64:	2b70      	cmp	r3, #112	; 0x70
 8003e66:	d87b      	bhi.n	8003f60 <HAL_TIM_ConfigClockSource+0x16c>
 8003e68:	2b60      	cmp	r3, #96	; 0x60
 8003e6a:	d050      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0x11a>
 8003e6c:	2b60      	cmp	r3, #96	; 0x60
 8003e6e:	d877      	bhi.n	8003f60 <HAL_TIM_ConfigClockSource+0x16c>
 8003e70:	2b50      	cmp	r3, #80	; 0x50
 8003e72:	d03c      	beq.n	8003eee <HAL_TIM_ConfigClockSource+0xfa>
 8003e74:	2b50      	cmp	r3, #80	; 0x50
 8003e76:	d873      	bhi.n	8003f60 <HAL_TIM_ConfigClockSource+0x16c>
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	d058      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0x13a>
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d86f      	bhi.n	8003f60 <HAL_TIM_ConfigClockSource+0x16c>
 8003e80:	2b30      	cmp	r3, #48	; 0x30
 8003e82:	d064      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0x15a>
 8003e84:	2b30      	cmp	r3, #48	; 0x30
 8003e86:	d86b      	bhi.n	8003f60 <HAL_TIM_ConfigClockSource+0x16c>
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	d060      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0x15a>
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d867      	bhi.n	8003f60 <HAL_TIM_ConfigClockSource+0x16c>
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d05c      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0x15a>
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	d05a      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0x15a>
 8003e98:	e062      	b.n	8003f60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6899      	ldr	r1, [r3, #8]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f000 fb23 	bl	80044f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ebc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	609a      	str	r2, [r3, #8]
      break;
 8003ec6:	e04f      	b.n	8003f68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	6899      	ldr	r1, [r3, #8]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f000 fb0c 	bl	80044f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eea:	609a      	str	r2, [r3, #8]
      break;
 8003eec:	e03c      	b.n	8003f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6859      	ldr	r1, [r3, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f000 fa80 	bl	8004400 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2150      	movs	r1, #80	; 0x50
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fad9 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003f0c:	e02c      	b.n	8003f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6859      	ldr	r1, [r3, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f000 fa9f 	bl	800445e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2160      	movs	r1, #96	; 0x60
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fac9 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003f2c:	e01c      	b.n	8003f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6859      	ldr	r1, [r3, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f000 fa60 	bl	8004400 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2140      	movs	r1, #64	; 0x40
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fab9 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003f4c:	e00c      	b.n	8003f68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4619      	mov	r1, r3
 8003f58:	4610      	mov	r0, r2
 8003f5a:	f000 fab0 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003f5e:	e003      	b.n	8003f68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]
      break;
 8003f64:	e000      	b.n	8003f68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a34      	ldr	r2, [pc, #208]	; (80040cc <TIM_Base_SetConfig+0xe4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00f      	beq.n	8004020 <TIM_Base_SetConfig+0x38>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004006:	d00b      	beq.n	8004020 <TIM_Base_SetConfig+0x38>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a31      	ldr	r2, [pc, #196]	; (80040d0 <TIM_Base_SetConfig+0xe8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d007      	beq.n	8004020 <TIM_Base_SetConfig+0x38>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a30      	ldr	r2, [pc, #192]	; (80040d4 <TIM_Base_SetConfig+0xec>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d003      	beq.n	8004020 <TIM_Base_SetConfig+0x38>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a2f      	ldr	r2, [pc, #188]	; (80040d8 <TIM_Base_SetConfig+0xf0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d108      	bne.n	8004032 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a25      	ldr	r2, [pc, #148]	; (80040cc <TIM_Base_SetConfig+0xe4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d01b      	beq.n	8004072 <TIM_Base_SetConfig+0x8a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004040:	d017      	beq.n	8004072 <TIM_Base_SetConfig+0x8a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a22      	ldr	r2, [pc, #136]	; (80040d0 <TIM_Base_SetConfig+0xe8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d013      	beq.n	8004072 <TIM_Base_SetConfig+0x8a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a21      	ldr	r2, [pc, #132]	; (80040d4 <TIM_Base_SetConfig+0xec>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00f      	beq.n	8004072 <TIM_Base_SetConfig+0x8a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a20      	ldr	r2, [pc, #128]	; (80040d8 <TIM_Base_SetConfig+0xf0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00b      	beq.n	8004072 <TIM_Base_SetConfig+0x8a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a1f      	ldr	r2, [pc, #124]	; (80040dc <TIM_Base_SetConfig+0xf4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d007      	beq.n	8004072 <TIM_Base_SetConfig+0x8a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <TIM_Base_SetConfig+0xf8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d003      	beq.n	8004072 <TIM_Base_SetConfig+0x8a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a1d      	ldr	r2, [pc, #116]	; (80040e4 <TIM_Base_SetConfig+0xfc>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d108      	bne.n	8004084 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a08      	ldr	r2, [pc, #32]	; (80040cc <TIM_Base_SetConfig+0xe4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d103      	bne.n	80040b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	615a      	str	r2, [r3, #20]
}
 80040be:	bf00      	nop
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800
 80040d8:	40000c00 	.word	0x40000c00
 80040dc:	40014000 	.word	0x40014000
 80040e0:	40014400 	.word	0x40014400
 80040e4:	40014800 	.word	0x40014800

080040e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f023 0201 	bic.w	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0303 	bic.w	r3, r3, #3
 800411e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f023 0302 	bic.w	r3, r3, #2
 8004130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a1c      	ldr	r2, [pc, #112]	; (80041b0 <TIM_OC1_SetConfig+0xc8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d10c      	bne.n	800415e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f023 0308 	bic.w	r3, r3, #8
 800414a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f023 0304 	bic.w	r3, r3, #4
 800415c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a13      	ldr	r2, [pc, #76]	; (80041b0 <TIM_OC1_SetConfig+0xc8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d111      	bne.n	800418a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800416c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	621a      	str	r2, [r3, #32]
}
 80041a4:	bf00      	nop
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	40010000 	.word	0x40010000

080041b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f023 0210 	bic.w	r2, r3, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	021b      	lsls	r3, r3, #8
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f023 0320 	bic.w	r3, r3, #32
 80041fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a1e      	ldr	r2, [pc, #120]	; (8004288 <TIM_OC2_SetConfig+0xd4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d10d      	bne.n	8004230 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800422e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a15      	ldr	r2, [pc, #84]	; (8004288 <TIM_OC2_SetConfig+0xd4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d113      	bne.n	8004260 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800423e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004246:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40010000 	.word	0x40010000

0800428c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0303 	bic.w	r3, r3, #3
 80042c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a1d      	ldr	r2, [pc, #116]	; (800435c <TIM_OC3_SetConfig+0xd0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d10d      	bne.n	8004306 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a14      	ldr	r2, [pc, #80]	; (800435c <TIM_OC3_SetConfig+0xd0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d113      	bne.n	8004336 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800431c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	621a      	str	r2, [r3, #32]
}
 8004350:	bf00      	nop
 8004352:	371c      	adds	r7, #28
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	40010000 	.word	0x40010000

08004360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800438e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	031b      	lsls	r3, r3, #12
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a10      	ldr	r2, [pc, #64]	; (80043fc <TIM_OC4_SetConfig+0x9c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d109      	bne.n	80043d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	019b      	lsls	r3, r3, #6
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40010000 	.word	0x40010000

08004400 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f023 0201 	bic.w	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800442a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f023 030a 	bic.w	r3, r3, #10
 800443c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800445e:	b480      	push	{r7}
 8004460:	b087      	sub	sp, #28
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f023 0210 	bic.w	r2, r3, #16
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004488:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	031b      	lsls	r3, r3, #12
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800449a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044be:	b480      	push	{r7}
 80044c0:	b085      	sub	sp, #20
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	f043 0307 	orr.w	r3, r3, #7
 80044e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	609a      	str	r2, [r3, #8]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800450e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	021a      	lsls	r2, r3, #8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	431a      	orrs	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	609a      	str	r2, [r3, #8]
}
 8004528:	bf00      	nop
 800452a:	371c      	adds	r7, #28
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004548:	2302      	movs	r3, #2
 800454a:	e050      	b.n	80045ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1c      	ldr	r2, [pc, #112]	; (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d018      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004598:	d013      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a18      	ldr	r2, [pc, #96]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00e      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a16      	ldr	r2, [pc, #88]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d009      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a15      	ldr	r2, [pc, #84]	; (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d004      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a13      	ldr	r2, [pc, #76]	; (800460c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d10c      	bne.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40010000 	.word	0x40010000
 8004600:	40000400 	.word	0x40000400
 8004604:	40000800 	.word	0x40000800
 8004608:	40000c00 	.word	0x40000c00
 800460c:	40014000 	.word	0x40014000

08004610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004638:	b084      	sub	sp, #16
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	f107 001c 	add.w	r0, r7, #28
 8004646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	2b01      	cmp	r3, #1
 800464e:	d122      	bne.n	8004696 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467a:	2b01      	cmp	r3, #1
 800467c:	d105      	bne.n	800468a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f001 fb1c 	bl	8005cc8 <USB_CoreReset>
 8004690:	4603      	mov	r3, r0
 8004692:	73fb      	strb	r3, [r7, #15]
 8004694:	e01a      	b.n	80046cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f001 fb10 	bl	8005cc8 <USB_CoreReset>
 80046a8:	4603      	mov	r3, r0
 80046aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80046ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
 80046be:	e005      	b.n	80046cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d10b      	bne.n	80046ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f043 0206 	orr.w	r2, r3, #6
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f043 0220 	orr.w	r2, r3, #32
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046f6:	b004      	add	sp, #16
 80046f8:	4770      	bx	lr
	...

080046fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	4613      	mov	r3, r2
 8004708:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	2b02      	cmp	r3, #2
 800470e:	d165      	bne.n	80047dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4a41      	ldr	r2, [pc, #260]	; (8004818 <USB_SetTurnaroundTime+0x11c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d906      	bls.n	8004726 <USB_SetTurnaroundTime+0x2a>
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4a40      	ldr	r2, [pc, #256]	; (800481c <USB_SetTurnaroundTime+0x120>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d202      	bcs.n	8004726 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004720:	230f      	movs	r3, #15
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e062      	b.n	80047ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4a3c      	ldr	r2, [pc, #240]	; (800481c <USB_SetTurnaroundTime+0x120>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d306      	bcc.n	800473c <USB_SetTurnaroundTime+0x40>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4a3b      	ldr	r2, [pc, #236]	; (8004820 <USB_SetTurnaroundTime+0x124>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d202      	bcs.n	800473c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004736:	230e      	movs	r3, #14
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e057      	b.n	80047ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4a38      	ldr	r2, [pc, #224]	; (8004820 <USB_SetTurnaroundTime+0x124>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d306      	bcc.n	8004752 <USB_SetTurnaroundTime+0x56>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4a37      	ldr	r2, [pc, #220]	; (8004824 <USB_SetTurnaroundTime+0x128>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d202      	bcs.n	8004752 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800474c:	230d      	movs	r3, #13
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e04c      	b.n	80047ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4a33      	ldr	r2, [pc, #204]	; (8004824 <USB_SetTurnaroundTime+0x128>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d306      	bcc.n	8004768 <USB_SetTurnaroundTime+0x6c>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	4a32      	ldr	r2, [pc, #200]	; (8004828 <USB_SetTurnaroundTime+0x12c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d802      	bhi.n	8004768 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004762:	230c      	movs	r3, #12
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	e041      	b.n	80047ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4a2f      	ldr	r2, [pc, #188]	; (8004828 <USB_SetTurnaroundTime+0x12c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d906      	bls.n	800477e <USB_SetTurnaroundTime+0x82>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4a2e      	ldr	r2, [pc, #184]	; (800482c <USB_SetTurnaroundTime+0x130>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d802      	bhi.n	800477e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004778:	230b      	movs	r3, #11
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e036      	b.n	80047ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4a2a      	ldr	r2, [pc, #168]	; (800482c <USB_SetTurnaroundTime+0x130>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d906      	bls.n	8004794 <USB_SetTurnaroundTime+0x98>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4a29      	ldr	r2, [pc, #164]	; (8004830 <USB_SetTurnaroundTime+0x134>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d802      	bhi.n	8004794 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800478e:	230a      	movs	r3, #10
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	e02b      	b.n	80047ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4a26      	ldr	r2, [pc, #152]	; (8004830 <USB_SetTurnaroundTime+0x134>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d906      	bls.n	80047aa <USB_SetTurnaroundTime+0xae>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4a25      	ldr	r2, [pc, #148]	; (8004834 <USB_SetTurnaroundTime+0x138>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d202      	bcs.n	80047aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80047a4:	2309      	movs	r3, #9
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	e020      	b.n	80047ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	4a21      	ldr	r2, [pc, #132]	; (8004834 <USB_SetTurnaroundTime+0x138>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d306      	bcc.n	80047c0 <USB_SetTurnaroundTime+0xc4>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	4a20      	ldr	r2, [pc, #128]	; (8004838 <USB_SetTurnaroundTime+0x13c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d802      	bhi.n	80047c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80047ba:	2308      	movs	r3, #8
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	e015      	b.n	80047ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4a1d      	ldr	r2, [pc, #116]	; (8004838 <USB_SetTurnaroundTime+0x13c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d906      	bls.n	80047d6 <USB_SetTurnaroundTime+0xda>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4a1c      	ldr	r2, [pc, #112]	; (800483c <USB_SetTurnaroundTime+0x140>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d202      	bcs.n	80047d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80047d0:	2307      	movs	r3, #7
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	e00a      	b.n	80047ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80047d6:	2306      	movs	r3, #6
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	e007      	b.n	80047ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80047dc:	79fb      	ldrb	r3, [r7, #7]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d102      	bne.n	80047e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80047e2:	2309      	movs	r3, #9
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	e001      	b.n	80047ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80047e8:	2309      	movs	r3, #9
 80047ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	029b      	lsls	r3, r3, #10
 8004800:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004804:	431a      	orrs	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	00d8acbf 	.word	0x00d8acbf
 800481c:	00e4e1c0 	.word	0x00e4e1c0
 8004820:	00f42400 	.word	0x00f42400
 8004824:	01067380 	.word	0x01067380
 8004828:	011a499f 	.word	0x011a499f
 800482c:	01312cff 	.word	0x01312cff
 8004830:	014ca43f 	.word	0x014ca43f
 8004834:	016e3600 	.word	0x016e3600
 8004838:	01a6ab1f 	.word	0x01a6ab1f
 800483c:	01e84800 	.word	0x01e84800

08004840 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f043 0201 	orr.w	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f023 0201 	bic.w	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d115      	bne.n	80048d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048b2:	2001      	movs	r0, #1
 80048b4:	f7fc ff32 	bl	800171c <HAL_Delay>
      ms++;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f001 f972 	bl	8005ba8 <USB_GetMode>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d01e      	beq.n	8004908 <USB_SetCurrentMode+0x84>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b31      	cmp	r3, #49	; 0x31
 80048ce:	d9f0      	bls.n	80048b2 <USB_SetCurrentMode+0x2e>
 80048d0:	e01a      	b.n	8004908 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048d2:	78fb      	ldrb	r3, [r7, #3]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d115      	bne.n	8004904 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048e4:	2001      	movs	r0, #1
 80048e6:	f7fc ff19 	bl	800171c <HAL_Delay>
      ms++;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3301      	adds	r3, #1
 80048ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f001 f959 	bl	8005ba8 <USB_GetMode>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <USB_SetCurrentMode+0x84>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b31      	cmp	r3, #49	; 0x31
 8004900:	d9f0      	bls.n	80048e4 <USB_SetCurrentMode+0x60>
 8004902:	e001      	b.n	8004908 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e005      	b.n	8004914 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b32      	cmp	r3, #50	; 0x32
 800490c:	d101      	bne.n	8004912 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800491c:	b084      	sub	sp, #16
 800491e:	b580      	push	{r7, lr}
 8004920:	b086      	sub	sp, #24
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800492a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004936:	2300      	movs	r3, #0
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	e009      	b.n	8004950 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	3340      	adds	r3, #64	; 0x40
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	2200      	movs	r2, #0
 8004948:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	3301      	adds	r3, #1
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	2b0e      	cmp	r3, #14
 8004954:	d9f2      	bls.n	800493c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004958:	2b00      	cmp	r3, #0
 800495a:	d11c      	bne.n	8004996 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800496a:	f043 0302 	orr.w	r3, r3, #2
 800496e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	639a      	str	r2, [r3, #56]	; 0x38
 8004994:	e00b      	b.n	80049ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049b4:	461a      	mov	r2, r3
 80049b6:	2300      	movs	r3, #0
 80049b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c0:	4619      	mov	r1, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c8:	461a      	mov	r2, r3
 80049ca:	680b      	ldr	r3, [r1, #0]
 80049cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d10c      	bne.n	80049ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d104      	bne.n	80049e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049da:	2100      	movs	r1, #0
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f945 	bl	8004c6c <USB_SetDevSpeed>
 80049e2:	e008      	b.n	80049f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049e4:	2101      	movs	r1, #1
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f940 	bl	8004c6c <USB_SetDevSpeed>
 80049ec:	e003      	b.n	80049f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049ee:	2103      	movs	r1, #3
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f93b 	bl	8004c6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049f6:	2110      	movs	r1, #16
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f8f3 	bl	8004be4 <USB_FlushTxFifo>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f90f 	bl	8004c2c <USB_FlushRxFifo>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1e:	461a      	mov	r2, r3
 8004a20:	2300      	movs	r3, #0
 8004a22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a36:	461a      	mov	r2, r3
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	e043      	b.n	8004aca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a58:	d118      	bne.n	8004a8c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	e013      	b.n	8004a9e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a82:	461a      	mov	r2, r3
 8004a84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	e008      	b.n	8004a9e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a98:	461a      	mov	r2, r3
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aaa:	461a      	mov	r2, r3
 8004aac:	2300      	movs	r3, #0
 8004aae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abc:	461a      	mov	r2, r3
 8004abe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ac2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d3b7      	bcc.n	8004a42 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	e043      	b.n	8004b60 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aee:	d118      	bne.n	8004b22 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b02:	461a      	mov	r2, r3
 8004b04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e013      	b.n	8004b34 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	e008      	b.n	8004b34 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2e:	461a      	mov	r2, r3
 8004b30:	2300      	movs	r3, #0
 8004b32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b40:	461a      	mov	r2, r3
 8004b42:	2300      	movs	r3, #0
 8004b44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b52:	461a      	mov	r2, r3
 8004b54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d3b7      	bcc.n	8004ad8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d105      	bne.n	8004b9c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	f043 0210 	orr.w	r2, r3, #16
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699a      	ldr	r2, [r3, #24]
 8004ba0:	4b0f      	ldr	r3, [pc, #60]	; (8004be0 <USB_DevInit+0x2c4>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d005      	beq.n	8004bba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f043 0208 	orr.w	r2, r3, #8
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d107      	bne.n	8004bd0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bc8:	f043 0304 	orr.w	r3, r3, #4
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bdc:	b004      	add	sp, #16
 8004bde:	4770      	bx	lr
 8004be0:	803c3800 	.word	0x803c3800

08004be4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	019b      	lsls	r3, r3, #6
 8004bf6:	f043 0220 	orr.w	r2, r3, #32
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3301      	adds	r3, #1
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <USB_FlushTxFifo+0x44>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e006      	b.n	8004c1c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d0f1      	beq.n	8004bfe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	00030d40 	.word	0x00030d40

08004c2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2210      	movs	r2, #16
 8004c3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3301      	adds	r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	4a08      	ldr	r2, [pc, #32]	; (8004c68 <USB_FlushRxFifo+0x3c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d901      	bls.n	8004c4e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e006      	b.n	8004c5c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b10      	cmp	r3, #16
 8004c58:	d0f1      	beq.n	8004c3e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	00030d40 	.word	0x00030d40

08004c6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	460b      	mov	r3, r1
 8004c76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	68f9      	ldr	r1, [r7, #12]
 8004c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b087      	sub	sp, #28
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 0306 	and.w	r3, r3, #6
 8004cb6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d102      	bne.n	8004cc4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	75fb      	strb	r3, [r7, #23]
 8004cc2:	e00a      	b.n	8004cda <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d002      	beq.n	8004cd0 <USB_GetDevSpeed+0x32>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b06      	cmp	r3, #6
 8004cce:	d102      	bne.n	8004cd6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	75fb      	strb	r3, [r7, #23]
 8004cd4:	e001      	b.n	8004cda <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004cd6:	230f      	movs	r3, #15
 8004cd8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	785b      	ldrb	r3, [r3, #1]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d13a      	bne.n	8004d7a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	2101      	movs	r1, #1
 8004d16:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	68f9      	ldr	r1, [r7, #12]
 8004d1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d22:	4313      	orrs	r3, r2
 8004d24:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d155      	bne.n	8004de8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	78db      	ldrb	r3, [r3, #3]
 8004d56:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d58:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	059b      	lsls	r3, r3, #22
 8004d5e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d60:	4313      	orrs	r3, r2
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	0151      	lsls	r1, r2, #5
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	440a      	add	r2, r1
 8004d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	e036      	b.n	8004de8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d80:	69da      	ldr	r2, [r3, #28]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d90:	041b      	lsls	r3, r3, #16
 8004d92:	68f9      	ldr	r1, [r7, #12]
 8004d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d11a      	bne.n	8004de8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	78db      	ldrb	r3, [r3, #3]
 8004dcc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	0151      	lsls	r1, r2, #5
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	440a      	add	r2, r1
 8004dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
	...

08004df8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	785b      	ldrb	r3, [r3, #1]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d161      	bne.n	8004ed8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e2a:	d11f      	bne.n	8004e6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	0151      	lsls	r1, r2, #5
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	440a      	add	r2, r1
 8004e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	0151      	lsls	r1, r2, #5
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	440a      	add	r2, r1
 8004e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	43db      	mvns	r3, r3
 8004e86:	68f9      	ldr	r1, [r7, #12]
 8004e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e96:	69da      	ldr	r2, [r3, #28]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	68f9      	ldr	r1, [r7, #12]
 8004eac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	0159      	lsls	r1, r3, #5
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	440b      	add	r3, r1
 8004eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4b35      	ldr	r3, [pc, #212]	; (8004fa8 <USB_DeactivateEndpoint+0x1b0>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	600b      	str	r3, [r1, #0]
 8004ed6:	e060      	b.n	8004f9a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eee:	d11f      	bne.n	8004f30 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	0151      	lsls	r1, r2, #5
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	440a      	add	r2, r1
 8004f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f0e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	0151      	lsls	r1, r2, #5
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	440a      	add	r2, r1
 8004f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	f003 030f 	and.w	r3, r3, #15
 8004f40:	2101      	movs	r1, #1
 8004f42:	fa01 f303 	lsl.w	r3, r1, r3
 8004f46:	041b      	lsls	r3, r3, #16
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	68f9      	ldr	r1, [r7, #12]
 8004f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f50:	4013      	ands	r3, r2
 8004f52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5a:	69da      	ldr	r2, [r3, #28]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	2101      	movs	r1, #1
 8004f66:	fa01 f303 	lsl.w	r3, r1, r3
 8004f6a:	041b      	lsls	r3, r3, #16
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	68f9      	ldr	r1, [r7, #12]
 8004f70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f74:	4013      	ands	r3, r2
 8004f76:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	0159      	lsls	r1, r3, #5
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	440b      	add	r3, r1
 8004f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f92:	4619      	mov	r1, r3
 8004f94:	4b05      	ldr	r3, [pc, #20]	; (8004fac <USB_DeactivateEndpoint+0x1b4>)
 8004f96:	4013      	ands	r3, r2
 8004f98:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	ec337800 	.word	0xec337800
 8004fac:	eff37800 	.word	0xeff37800

08004fb0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b08a      	sub	sp, #40	; 0x28
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	785b      	ldrb	r3, [r3, #1]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	f040 815c 	bne.w	800528a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d132      	bne.n	8005040 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	0151      	lsls	r1, r2, #5
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	440a      	add	r2, r1
 8004ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ff8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ffc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	0151      	lsls	r1, r2, #5
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	440a      	add	r2, r1
 8005014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005018:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800501c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	0151      	lsls	r1, r2, #5
 8005030:	69fa      	ldr	r2, [r7, #28]
 8005032:	440a      	add	r2, r1
 8005034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005038:	0cdb      	lsrs	r3, r3, #19
 800503a:	04db      	lsls	r3, r3, #19
 800503c:	6113      	str	r3, [r2, #16]
 800503e:	e074      	b.n	800512a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	0151      	lsls	r1, r2, #5
 8005052:	69fa      	ldr	r2, [r7, #28]
 8005054:	440a      	add	r2, r1
 8005056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505a:	0cdb      	lsrs	r3, r3, #19
 800505c:	04db      	lsls	r3, r3, #19
 800505e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	0151      	lsls	r1, r2, #5
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	440a      	add	r2, r1
 8005076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800507e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005082:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005090:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	6959      	ldr	r1, [r3, #20]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	440b      	add	r3, r1
 800509c:	1e59      	subs	r1, r3, #1
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80050a6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050a8:	4b9d      	ldr	r3, [pc, #628]	; (8005320 <USB_EPStartXfer+0x370>)
 80050aa:	400b      	ands	r3, r1
 80050ac:	69b9      	ldr	r1, [r7, #24]
 80050ae:	0148      	lsls	r0, r1, #5
 80050b0:	69f9      	ldr	r1, [r7, #28]
 80050b2:	4401      	add	r1, r0
 80050b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050b8:	4313      	orrs	r3, r2
 80050ba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	691a      	ldr	r2, [r3, #16]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d2:	69b9      	ldr	r1, [r7, #24]
 80050d4:	0148      	lsls	r0, r1, #5
 80050d6:	69f9      	ldr	r1, [r7, #28]
 80050d8:	4401      	add	r1, r0
 80050da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050de:	4313      	orrs	r3, r2
 80050e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	78db      	ldrb	r3, [r3, #3]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d11f      	bne.n	800512a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	0151      	lsls	r1, r2, #5
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	440a      	add	r2, r1
 8005100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005104:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005108:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005124:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005128:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d14b      	bne.n	80051c8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d009      	beq.n	800514c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005144:	461a      	mov	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	78db      	ldrb	r3, [r3, #3]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d128      	bne.n	80051a6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d110      	bne.n	8005186 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	0151      	lsls	r1, r2, #5
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	440a      	add	r2, r1
 800517a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800517e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	e00f      	b.n	80051a6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	0151      	lsls	r1, r2, #5
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	440a      	add	r2, r1
 800519c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	0151      	lsls	r1, r2, #5
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	440a      	add	r2, r1
 80051bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	e12f      	b.n	8005428 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	0151      	lsls	r1, r2, #5
 80051da:	69fa      	ldr	r2, [r7, #28]
 80051dc:	440a      	add	r2, r1
 80051de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	78db      	ldrb	r3, [r3, #3]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d015      	beq.n	800521c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8117 	beq.w	8005428 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	2101      	movs	r1, #1
 800520c:	fa01 f303 	lsl.w	r3, r1, r3
 8005210:	69f9      	ldr	r1, [r7, #28]
 8005212:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005216:	4313      	orrs	r3, r2
 8005218:	634b      	str	r3, [r1, #52]	; 0x34
 800521a:	e105      	b.n	8005428 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005228:	2b00      	cmp	r3, #0
 800522a:	d110      	bne.n	800524e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	0151      	lsls	r1, r2, #5
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	440a      	add	r2, r1
 8005242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005246:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	e00f      	b.n	800526e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	0151      	lsls	r1, r2, #5
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	440a      	add	r2, r1
 8005264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800526c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	68d9      	ldr	r1, [r3, #12]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	781a      	ldrb	r2, [r3, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	b298      	uxth	r0, r3
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	4603      	mov	r3, r0
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 fa2b 	bl	80056de <USB_WritePacket>
 8005288:	e0ce      	b.n	8005428 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052a4:	0cdb      	lsrs	r3, r3, #19
 80052a6:	04db      	lsls	r3, r3, #19
 80052a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d126      	bne.n	8005324 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ec:	69b9      	ldr	r1, [r7, #24]
 80052ee:	0148      	lsls	r0, r1, #5
 80052f0:	69f9      	ldr	r1, [r7, #28]
 80052f2:	4401      	add	r1, r0
 80052f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052f8:	4313      	orrs	r3, r2
 80052fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	0151      	lsls	r1, r2, #5
 800530e:	69fa      	ldr	r2, [r7, #28]
 8005310:	440a      	add	r2, r1
 8005312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005316:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800531a:	6113      	str	r3, [r2, #16]
 800531c:	e036      	b.n	800538c <USB_EPStartXfer+0x3dc>
 800531e:	bf00      	nop
 8005320:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	695a      	ldr	r2, [r3, #20]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	4413      	add	r3, r2
 800532e:	1e5a      	subs	r2, r3, #1
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	fbb2 f3f3 	udiv	r3, r2, r3
 8005338:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	8afb      	ldrh	r3, [r7, #22]
 800534a:	04d9      	lsls	r1, r3, #19
 800534c:	4b39      	ldr	r3, [pc, #228]	; (8005434 <USB_EPStartXfer+0x484>)
 800534e:	400b      	ands	r3, r1
 8005350:	69b9      	ldr	r1, [r7, #24]
 8005352:	0148      	lsls	r0, r1, #5
 8005354:	69f9      	ldr	r1, [r7, #28]
 8005356:	4401      	add	r1, r0
 8005358:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800535c:	4313      	orrs	r3, r2
 800535e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	8af9      	ldrh	r1, [r7, #22]
 8005374:	fb01 f303 	mul.w	r3, r1, r3
 8005378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800537c:	69b9      	ldr	r1, [r7, #24]
 800537e:	0148      	lsls	r0, r1, #5
 8005380:	69f9      	ldr	r1, [r7, #28]
 8005382:	4401      	add	r1, r0
 8005384:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005388:	4313      	orrs	r3, r2
 800538a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800538c:	79fb      	ldrb	r3, [r7, #7]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d10d      	bne.n	80053ae <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d009      	beq.n	80053ae <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	68d9      	ldr	r1, [r3, #12]
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	460a      	mov	r2, r1
 80053ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	78db      	ldrb	r3, [r3, #3]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d128      	bne.n	8005408 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d110      	bne.n	80053e8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	0151      	lsls	r1, r2, #5
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	440a      	add	r2, r1
 80053dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	e00f      	b.n	8005408 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	0151      	lsls	r1, r2, #5
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	440a      	add	r2, r1
 80053fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005406:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	440a      	add	r2, r1
 800541e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005422:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005426:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3720      	adds	r7, #32
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	1ff80000 	.word	0x1ff80000

08005438 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	4613      	mov	r3, r2
 8005444:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	2b01      	cmp	r3, #1
 8005456:	f040 80cd 	bne.w	80055f4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d132      	bne.n	80054c8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	0151      	lsls	r1, r2, #5
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	440a      	add	r2, r1
 8005478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800547c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005480:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005484:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	0151      	lsls	r1, r2, #5
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	440a      	add	r2, r1
 800549c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c0:	0cdb      	lsrs	r3, r3, #19
 80054c2:	04db      	lsls	r3, r3, #19
 80054c4:	6113      	str	r3, [r2, #16]
 80054c6:	e04e      	b.n	8005566 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	0151      	lsls	r1, r2, #5
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	440a      	add	r2, r1
 80054de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e2:	0cdb      	lsrs	r3, r3, #19
 80054e4:	04db      	lsls	r3, r3, #19
 80054e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	0151      	lsls	r1, r2, #5
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	440a      	add	r2, r1
 80054fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005502:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005506:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800550a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	695a      	ldr	r2, [r3, #20]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	429a      	cmp	r2, r3
 8005516:	d903      	bls.n	8005520 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	0151      	lsls	r1, r2, #5
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	440a      	add	r2, r1
 8005536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800553e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005556:	6939      	ldr	r1, [r7, #16]
 8005558:	0148      	lsls	r0, r1, #5
 800555a:	6979      	ldr	r1, [r7, #20]
 800555c:	4401      	add	r1, r0
 800555e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005562:	4313      	orrs	r3, r2
 8005564:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005566:	79fb      	ldrb	r3, [r7, #7]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d11e      	bne.n	80055aa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d009      	beq.n	8005588 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005580:	461a      	mov	r2, r3
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	440a      	add	r2, r1
 800559e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	e092      	b.n	80056d0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	0151      	lsls	r1, r2, #5
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	440a      	add	r2, r1
 80055c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055c8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d07e      	beq.n	80056d0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	2101      	movs	r1, #1
 80055e4:	fa01 f303 	lsl.w	r3, r1, r3
 80055e8:	6979      	ldr	r1, [r7, #20]
 80055ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ee:	4313      	orrs	r3, r2
 80055f0:	634b      	str	r3, [r1, #52]	; 0x34
 80055f2:	e06d      	b.n	80056d0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	0151      	lsls	r1, r2, #5
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	440a      	add	r2, r1
 800560a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560e:	0cdb      	lsrs	r3, r3, #19
 8005610:	04db      	lsls	r3, r3, #19
 8005612:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	440a      	add	r2, r1
 800562a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800562e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005632:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005636:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	0151      	lsls	r1, r2, #5
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	440a      	add	r2, r1
 800565e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005666:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005674:	691a      	ldr	r2, [r3, #16]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800567e:	6939      	ldr	r1, [r7, #16]
 8005680:	0148      	lsls	r0, r1, #5
 8005682:	6979      	ldr	r1, [r7, #20]
 8005684:	4401      	add	r1, r0
 8005686:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800568a:	4313      	orrs	r3, r2
 800568c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d10d      	bne.n	80056b0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d009      	beq.n	80056b0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	68d9      	ldr	r1, [r3, #12]
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	460a      	mov	r2, r1
 80056ae:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	0151      	lsls	r1, r2, #5
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	440a      	add	r2, r1
 80056c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80056de:	b480      	push	{r7}
 80056e0:	b089      	sub	sp, #36	; 0x24
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	4611      	mov	r1, r2
 80056ea:	461a      	mov	r2, r3
 80056ec:	460b      	mov	r3, r1
 80056ee:	71fb      	strb	r3, [r7, #7]
 80056f0:	4613      	mov	r3, r2
 80056f2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80056fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005700:	2b00      	cmp	r3, #0
 8005702:	d123      	bne.n	800574c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005704:	88bb      	ldrh	r3, [r7, #4]
 8005706:	3303      	adds	r3, #3
 8005708:	089b      	lsrs	r3, r3, #2
 800570a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800570c:	2300      	movs	r3, #0
 800570e:	61bb      	str	r3, [r7, #24]
 8005710:	e018      	b.n	8005744 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	031a      	lsls	r2, r3, #12
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	4413      	add	r3, r2
 800571a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800571e:	461a      	mov	r2, r3
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	3301      	adds	r3, #1
 800572a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	3301      	adds	r3, #1
 8005730:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	3301      	adds	r3, #1
 8005736:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	3301      	adds	r3, #1
 800573c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	3301      	adds	r3, #1
 8005742:	61bb      	str	r3, [r7, #24]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	429a      	cmp	r2, r3
 800574a:	d3e2      	bcc.n	8005712 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3724      	adds	r7, #36	; 0x24
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800575a:	b480      	push	{r7}
 800575c:	b08b      	sub	sp, #44	; 0x2c
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	4613      	mov	r3, r2
 8005766:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005770:	88fb      	ldrh	r3, [r7, #6]
 8005772:	089b      	lsrs	r3, r3, #2
 8005774:	b29b      	uxth	r3, r3
 8005776:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005780:	2300      	movs	r3, #0
 8005782:	623b      	str	r3, [r7, #32]
 8005784:	e014      	b.n	80057b0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	601a      	str	r2, [r3, #0]
    pDest++;
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	3301      	adds	r3, #1
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	3301      	adds	r3, #1
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	3301      	adds	r3, #1
 80057a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	3301      	adds	r3, #1
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	3301      	adds	r3, #1
 80057ae:	623b      	str	r3, [r7, #32]
 80057b0:	6a3a      	ldr	r2, [r7, #32]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d3e6      	bcc.n	8005786 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80057b8:	8bfb      	ldrh	r3, [r7, #30]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d01e      	beq.n	80057fc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c8:	461a      	mov	r2, r3
 80057ca:	f107 0310 	add.w	r3, r7, #16
 80057ce:	6812      	ldr	r2, [r2, #0]
 80057d0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	fa22 f303 	lsr.w	r3, r2, r3
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	701a      	strb	r2, [r3, #0]
      i++;
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	3301      	adds	r3, #1
 80057e8:	623b      	str	r3, [r7, #32]
      pDest++;
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	3301      	adds	r3, #1
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80057f0:	8bfb      	ldrh	r3, [r7, #30]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80057f6:	8bfb      	ldrh	r3, [r7, #30]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1ea      	bne.n	80057d2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057fe:	4618      	mov	r0, r3
 8005800:	372c      	adds	r7, #44	; 0x2c
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	785b      	ldrb	r3, [r3, #1]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d12c      	bne.n	8005880 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	db12      	blt.n	800585e <USB_EPSetStall+0x54>
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00f      	beq.n	800585e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	0151      	lsls	r1, r2, #5
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	440a      	add	r2, r1
 8005854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005858:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800585c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	0151      	lsls	r1, r2, #5
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	440a      	add	r2, r1
 8005874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	e02b      	b.n	80058d8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	db12      	blt.n	80058b8 <USB_EPSetStall+0xae>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00f      	beq.n	80058b8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	0151      	lsls	r1, r2, #5
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	440a      	add	r2, r1
 80058ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058b6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	0151      	lsls	r1, r2, #5
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	440a      	add	r2, r1
 80058ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	785b      	ldrb	r3, [r3, #1]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d128      	bne.n	8005954 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	0151      	lsls	r1, r2, #5
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	440a      	add	r2, r1
 8005918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005920:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	78db      	ldrb	r3, [r3, #3]
 8005926:	2b03      	cmp	r3, #3
 8005928:	d003      	beq.n	8005932 <USB_EPClearStall+0x4c>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	78db      	ldrb	r3, [r3, #3]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d138      	bne.n	80059a4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	440a      	add	r2, r1
 8005948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800594c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	e027      	b.n	80059a4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	0151      	lsls	r1, r2, #5
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	440a      	add	r2, r1
 800596a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005972:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	78db      	ldrb	r3, [r3, #3]
 8005978:	2b03      	cmp	r3, #3
 800597a:	d003      	beq.n	8005984 <USB_EPClearStall+0x9e>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	78db      	ldrb	r3, [r3, #3]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d10f      	bne.n	80059a4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	0151      	lsls	r1, r2, #5
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	440a      	add	r2, r1
 800599a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80059d4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80059e6:	68f9      	ldr	r1, [r7, #12]
 80059e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059ec:	4313      	orrs	r3, r2
 80059ee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b085      	sub	sp, #20
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a18:	f023 0303 	bic.w	r3, r3, #3
 8005a1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a2c:	f023 0302 	bic.w	r3, r3, #2
 8005a30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a5a:	f023 0303 	bic.w	r3, r3, #3
 8005a5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a6e:	f043 0302 	orr.w	r3, r3, #2
 8005a72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b085      	sub	sp, #20
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4013      	ands	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	0c1b      	lsrs	r3, r3, #16
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	4013      	ands	r3, r2
 8005afe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	b29b      	uxth	r3, r3
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	fa22 f303 	lsr.w	r3, r2, r3
 8005b7c:	01db      	lsls	r3, r3, #7
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b86:	78fb      	ldrb	r3, [r7, #3]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4013      	ands	r3, r2
 8005b98:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	371c      	adds	r7, #28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bde:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005be2:	f023 0307 	bic.w	r3, r3, #7
 8005be6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bfa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
	...

08005c0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	460b      	mov	r3, r1
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	333c      	adds	r3, #60	; 0x3c
 8005c22:	3304      	adds	r3, #4
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4a26      	ldr	r2, [pc, #152]	; (8005cc4 <USB_EP0_OutStart+0xb8>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d90a      	bls.n	8005c46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c40:	d101      	bne.n	8005c46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	e037      	b.n	8005cb6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	2300      	movs	r3, #0
 8005c50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c74:	f043 0318 	orr.w	r3, r3, #24
 8005c78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c88:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c8e:	7afb      	ldrb	r3, [r7, #11]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d10f      	bne.n	8005cb4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005cb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	4f54300a 	.word	0x4f54300a

08005cc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	4a13      	ldr	r2, [pc, #76]	; (8005d28 <USB_CoreReset+0x60>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d901      	bls.n	8005ce4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e01a      	b.n	8005d1a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	daf3      	bge.n	8005cd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f043 0201 	orr.w	r2, r3, #1
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	4a09      	ldr	r2, [pc, #36]	; (8005d28 <USB_CoreReset+0x60>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d901      	bls.n	8005d0c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e006      	b.n	8005d1a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d0f1      	beq.n	8005cfc <USB_CoreReset+0x34>

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	00030d40 	.word	0x00030d40

08005d2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d38:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d3c:	f002 f96e 	bl	800801c <USBD_static_malloc>
 8005d40:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d105      	bne.n	8005d54 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005d50:	2302      	movs	r3, #2
 8005d52:	e066      	b.n	8005e22 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	7c1b      	ldrb	r3, [r3, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d119      	bne.n	8005d98 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d68:	2202      	movs	r2, #2
 8005d6a:	2181      	movs	r1, #129	; 0x81
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f002 f832 	bl	8007dd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	2101      	movs	r1, #1
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f002 f828 	bl	8007dd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2210      	movs	r2, #16
 8005d92:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005d96:	e016      	b.n	8005dc6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d98:	2340      	movs	r3, #64	; 0x40
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	2181      	movs	r1, #129	; 0x81
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f002 f819 	bl	8007dd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005daa:	2340      	movs	r3, #64	; 0x40
 8005dac:	2202      	movs	r2, #2
 8005dae:	2101      	movs	r1, #1
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f002 f810 	bl	8007dd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2210      	movs	r2, #16
 8005dc2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	2203      	movs	r2, #3
 8005dca:	2182      	movs	r1, #130	; 0x82
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f002 f802 	bl	8007dd6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	7c1b      	ldrb	r3, [r3, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d109      	bne.n	8005e10 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e06:	2101      	movs	r1, #1
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f002 f8d3 	bl	8007fb4 <USBD_LL_PrepareReceive>
 8005e0e:	e007      	b.n	8005e20 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e16:	2340      	movs	r3, #64	; 0x40
 8005e18:	2101      	movs	r1, #1
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f002 f8ca 	bl	8007fb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	460b      	mov	r3, r1
 8005e34:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005e36:	2181      	movs	r1, #129	; 0x81
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f001 fff2 	bl	8007e22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005e44:	2101      	movs	r1, #1
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f001 ffeb 	bl	8007e22 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005e54:	2182      	movs	r1, #130	; 0x82
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f001 ffe3 	bl	8007e22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00e      	beq.n	8005e94 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e86:	4618      	mov	r0, r3
 8005e88:	f002 f8d6 	bl	8008038 <USBD_static_free>
    pdev->pClassData = NULL;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eb0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e0af      	b.n	8006028 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d03f      	beq.n	8005f54 <USBD_CDC_Setup+0xb4>
 8005ed4:	2b20      	cmp	r3, #32
 8005ed6:	f040 809f 	bne.w	8006018 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	88db      	ldrh	r3, [r3, #6]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d02e      	beq.n	8005f40 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	b25b      	sxtb	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	da16      	bge.n	8005f1a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005ef8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	88d2      	ldrh	r2, [r2, #6]
 8005efe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	88db      	ldrh	r3, [r3, #6]
 8005f04:	2b07      	cmp	r3, #7
 8005f06:	bf28      	it	cs
 8005f08:	2307      	movcs	r3, #7
 8005f0a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	89fa      	ldrh	r2, [r7, #14]
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f001 fb19 	bl	800754a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005f18:	e085      	b.n	8006026 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	785a      	ldrb	r2, [r3, #1]
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	88db      	ldrh	r3, [r3, #6]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005f30:	6939      	ldr	r1, [r7, #16]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	88db      	ldrh	r3, [r3, #6]
 8005f36:	461a      	mov	r2, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 fb32 	bl	80075a2 <USBD_CtlPrepareRx>
      break;
 8005f3e:	e072      	b.n	8006026 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	7850      	ldrb	r0, [r2, #1]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	6839      	ldr	r1, [r7, #0]
 8005f50:	4798      	blx	r3
      break;
 8005f52:	e068      	b.n	8006026 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	785b      	ldrb	r3, [r3, #1]
 8005f58:	2b0b      	cmp	r3, #11
 8005f5a:	d852      	bhi.n	8006002 <USBD_CDC_Setup+0x162>
 8005f5c:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <USBD_CDC_Setup+0xc4>)
 8005f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f62:	bf00      	nop
 8005f64:	08005f95 	.word	0x08005f95
 8005f68:	08006011 	.word	0x08006011
 8005f6c:	08006003 	.word	0x08006003
 8005f70:	08006003 	.word	0x08006003
 8005f74:	08006003 	.word	0x08006003
 8005f78:	08006003 	.word	0x08006003
 8005f7c:	08006003 	.word	0x08006003
 8005f80:	08006003 	.word	0x08006003
 8005f84:	08006003 	.word	0x08006003
 8005f88:	08006003 	.word	0x08006003
 8005f8c:	08005fbf 	.word	0x08005fbf
 8005f90:	08005fe9 	.word	0x08005fe9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d107      	bne.n	8005fb0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005fa0:	f107 030a 	add.w	r3, r7, #10
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f001 face 	bl	800754a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fae:	e032      	b.n	8006016 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f001 fa58 	bl	8007468 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	75fb      	strb	r3, [r7, #23]
          break;
 8005fbc:	e02b      	b.n	8006016 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	d107      	bne.n	8005fda <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005fca:	f107 030d 	add.w	r3, r7, #13
 8005fce:	2201      	movs	r2, #1
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f001 fab9 	bl	800754a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fd8:	e01d      	b.n	8006016 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f001 fa43 	bl	8007468 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	75fb      	strb	r3, [r7, #23]
          break;
 8005fe6:	e016      	b.n	8006016 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b03      	cmp	r3, #3
 8005ff2:	d00f      	beq.n	8006014 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f001 fa36 	bl	8007468 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006000:	e008      	b.n	8006014 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 fa2f 	bl	8007468 <USBD_CtlError>
          ret = USBD_FAIL;
 800600a:	2303      	movs	r3, #3
 800600c:	75fb      	strb	r3, [r7, #23]
          break;
 800600e:	e002      	b.n	8006016 <USBD_CDC_Setup+0x176>
          break;
 8006010:	bf00      	nop
 8006012:	e008      	b.n	8006026 <USBD_CDC_Setup+0x186>
          break;
 8006014:	bf00      	nop
      }
      break;
 8006016:	e006      	b.n	8006026 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006018:	6839      	ldr	r1, [r7, #0]
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f001 fa24 	bl	8007468 <USBD_CtlError>
      ret = USBD_FAIL;
 8006020:	2303      	movs	r3, #3
 8006022:	75fb      	strb	r3, [r7, #23]
      break;
 8006024:	bf00      	nop
  }

  return (uint8_t)ret;
 8006026:	7dfb      	ldrb	r3, [r7, #23]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3718      	adds	r7, #24
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006042:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800604e:	2303      	movs	r3, #3
 8006050:	e04f      	b.n	80060f2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006058:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800605a:	78fa      	ldrb	r2, [r7, #3]
 800605c:	6879      	ldr	r1, [r7, #4]
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	440b      	add	r3, r1
 8006068:	3318      	adds	r3, #24
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d029      	beq.n	80060c4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006070:	78fa      	ldrb	r2, [r7, #3]
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	3318      	adds	r3, #24
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	78f9      	ldrb	r1, [r7, #3]
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	460b      	mov	r3, r1
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	1a5b      	subs	r3, r3, r1
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4403      	add	r3, r0
 8006090:	3344      	adds	r3, #68	; 0x44
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	fbb2 f1f3 	udiv	r1, r2, r3
 8006098:	fb03 f301 	mul.w	r3, r3, r1
 800609c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d110      	bne.n	80060c4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80060a2:	78fa      	ldrb	r2, [r7, #3]
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	440b      	add	r3, r1
 80060b0:	3318      	adds	r3, #24
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80060b6:	78f9      	ldrb	r1, [r7, #3]
 80060b8:	2300      	movs	r3, #0
 80060ba:	2200      	movs	r2, #0
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 ff58 	bl	8007f72 <USBD_LL_Transmit>
 80060c2:	e015      	b.n	80060f0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00b      	beq.n	80060f0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80060ec:	78fa      	ldrb	r2, [r7, #3]
 80060ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	460b      	mov	r3, r1
 8006104:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800610c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006118:	2303      	movs	r3, #3
 800611a:	e015      	b.n	8006148 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800611c:	78fb      	ldrb	r3, [r7, #3]
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f001 ff68 	bl	8007ff6 <USBD_LL_GetRxDataSize>
 8006126:	4602      	mov	r2, r0
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006142:	4611      	mov	r1, r2
 8006144:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800615e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006166:	2303      	movs	r3, #3
 8006168:	e01b      	b.n	80061a2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d015      	beq.n	80061a0 <USBD_CDC_EP0_RxReady+0x50>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800617a:	2bff      	cmp	r3, #255	; 0xff
 800617c:	d010      	beq.n	80061a0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800618c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006194:	b292      	uxth	r2, r2
 8006196:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	22ff      	movs	r2, #255	; 0xff
 800619c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2243      	movs	r2, #67	; 0x43
 80061b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80061ba:	4b03      	ldr	r3, [pc, #12]	; (80061c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80061bc:	4618      	mov	r0, r3
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	20000094 	.word	0x20000094

080061cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2243      	movs	r2, #67	; 0x43
 80061d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80061da:	4b03      	ldr	r3, [pc, #12]	; (80061e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	20000050 	.word	0x20000050

080061ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2243      	movs	r2, #67	; 0x43
 80061f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80061fa:	4b03      	ldr	r3, [pc, #12]	; (8006208 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	200000d8 	.word	0x200000d8

0800620c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	220a      	movs	r2, #10
 8006218:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800621a:	4b03      	ldr	r3, [pc, #12]	; (8006228 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	2000000c 	.word	0x2000000c

0800622c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800623c:	2303      	movs	r3, #3
 800623e:	e004      	b.n	800624a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006256:	b480      	push	{r7}
 8006258:	b087      	sub	sp, #28
 800625a:	af00      	add	r7, sp, #0
 800625c:	60f8      	str	r0, [r7, #12]
 800625e:	60b9      	str	r1, [r7, #8]
 8006260:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006268:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006270:	2303      	movs	r3, #3
 8006272:	e008      	b.n	8006286 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	371c      	adds	r7, #28
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006292:	b480      	push	{r7}
 8006294:	b085      	sub	sp, #20
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e004      	b.n	80062b8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062d2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e01a      	b.n	800631c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d114      	bne.n	800631a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800630e:	2181      	movs	r1, #129	; 0x81
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f001 fe2e 	bl	8007f72 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800631a:	7bfb      	ldrb	r3, [r7, #15]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006332:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800633e:	2303      	movs	r3, #3
 8006340:	e016      	b.n	8006370 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	7c1b      	ldrb	r3, [r3, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d109      	bne.n	800635e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006354:	2101      	movs	r1, #1
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f001 fe2c 	bl	8007fb4 <USBD_LL_PrepareReceive>
 800635c:	e007      	b.n	800636e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006364:	2340      	movs	r3, #64	; 0x40
 8006366:	2101      	movs	r1, #1
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f001 fe23 	bl	8007fb4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	4613      	mov	r3, r2
 8006384:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800638c:	2303      	movs	r3, #3
 800638e:	e01f      	b.n	80063d0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	79fa      	ldrb	r2, [r7, #7]
 80063c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f001 fc9f 	bl	8007d08 <USBD_LL_Init>
 80063ca:	4603      	mov	r3, r0
 80063cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e016      	b.n	800641e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00b      	beq.n	800641c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	f107 020e 	add.w	r2, r7, #14
 8006410:	4610      	mov	r0, r2
 8006412:	4798      	blx	r3
 8006414:	4602      	mov	r2, r0
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b082      	sub	sp, #8
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f001 fcb6 	bl	8007da0 <USBD_LL_Start>
 8006434:	4603      	mov	r3, r0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006460:	2303      	movs	r3, #3
 8006462:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646a:	2b00      	cmp	r3, #0
 800646c:	d009      	beq.n	8006482 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	78fa      	ldrb	r2, [r7, #3]
 8006478:	4611      	mov	r1, r2
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	4798      	blx	r3
 800647e:	4603      	mov	r3, r0
 8006480:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006482:	7bfb      	ldrb	r3, [r7, #15]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	78fa      	ldrb	r2, [r7, #3]
 80064ac:	4611      	mov	r1, r2
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	4798      	blx	r3
  }

  return USBD_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 ff90 	bl	80073f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80064e2:	461a      	mov	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d01a      	beq.n	800652e <USBD_LL_SetupStage+0x72>
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d822      	bhi.n	8006542 <USBD_LL_SetupStage+0x86>
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <USBD_LL_SetupStage+0x4a>
 8006500:	2b01      	cmp	r3, #1
 8006502:	d00a      	beq.n	800651a <USBD_LL_SetupStage+0x5e>
 8006504:	e01d      	b.n	8006542 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa62 	bl	80069d8 <USBD_StdDevReq>
 8006514:	4603      	mov	r3, r0
 8006516:	73fb      	strb	r3, [r7, #15]
      break;
 8006518:	e020      	b.n	800655c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fac6 	bl	8006ab4 <USBD_StdItfReq>
 8006528:	4603      	mov	r3, r0
 800652a:	73fb      	strb	r3, [r7, #15]
      break;
 800652c:	e016      	b.n	800655c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fb05 	bl	8006b46 <USBD_StdEPReq>
 800653c:	4603      	mov	r3, r0
 800653e:	73fb      	strb	r3, [r7, #15]
      break;
 8006540:	e00c      	b.n	800655c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006548:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800654c:	b2db      	uxtb	r3, r3
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 fc85 	bl	8007e60 <USBD_LL_StallEP>
 8006556:	4603      	mov	r3, r0
 8006558:	73fb      	strb	r3, [r7, #15]
      break;
 800655a:	bf00      	nop
  }

  return ret;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b086      	sub	sp, #24
 800656a:	af00      	add	r7, sp, #0
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	460b      	mov	r3, r1
 8006570:	607a      	str	r2, [r7, #4]
 8006572:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006574:	7afb      	ldrb	r3, [r7, #11]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d138      	bne.n	80065ec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006580:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006588:	2b03      	cmp	r3, #3
 800658a:	d14a      	bne.n	8006622 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	429a      	cmp	r2, r3
 8006596:	d913      	bls.n	80065c0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	1ad2      	subs	r2, r2, r3
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	4293      	cmp	r3, r2
 80065b0:	bf28      	it	cs
 80065b2:	4613      	movcs	r3, r2
 80065b4:	461a      	mov	r2, r3
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f001 f80f 	bl	80075dc <USBD_CtlContinueRx>
 80065be:	e030      	b.n	8006622 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d10b      	bne.n	80065e4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d005      	beq.n	80065e4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f001 f80a 	bl	80075fe <USBD_CtlSendStatus>
 80065ea:	e01a      	b.n	8006622 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	d114      	bne.n	8006622 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00e      	beq.n	8006622 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	7afa      	ldrb	r2, [r7, #11]
 800660e:	4611      	mov	r1, r2
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	4798      	blx	r3
 8006614:	4603      	mov	r3, r0
 8006616:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006618:	7dfb      	ldrb	r3, [r7, #23]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800661e:	7dfb      	ldrb	r3, [r7, #23]
 8006620:	e000      	b.n	8006624 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	460b      	mov	r3, r1
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800663a:	7afb      	ldrb	r3, [r7, #11]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d16b      	bne.n	8006718 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3314      	adds	r3, #20
 8006644:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800664c:	2b02      	cmp	r3, #2
 800664e:	d156      	bne.n	80066fe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	429a      	cmp	r2, r3
 800665a:	d914      	bls.n	8006686 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	1ad2      	subs	r2, r2, r3
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	461a      	mov	r2, r3
 8006670:	6879      	ldr	r1, [r7, #4]
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 ff84 	bl	8007580 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006678:	2300      	movs	r3, #0
 800667a:	2200      	movs	r2, #0
 800667c:	2100      	movs	r1, #0
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f001 fc98 	bl	8007fb4 <USBD_LL_PrepareReceive>
 8006684:	e03b      	b.n	80066fe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	68da      	ldr	r2, [r3, #12]
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	429a      	cmp	r2, r3
 8006690:	d11c      	bne.n	80066cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800669a:	429a      	cmp	r2, r3
 800669c:	d316      	bcc.n	80066cc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d20f      	bcs.n	80066cc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066ac:	2200      	movs	r2, #0
 80066ae:	2100      	movs	r1, #0
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 ff65 	bl	8007580 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066be:	2300      	movs	r3, #0
 80066c0:	2200      	movs	r2, #0
 80066c2:	2100      	movs	r1, #0
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f001 fc75 	bl	8007fb4 <USBD_LL_PrepareReceive>
 80066ca:	e018      	b.n	80066fe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d10b      	bne.n	80066f0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066f0:	2180      	movs	r1, #128	; 0x80
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f001 fbb4 	bl	8007e60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 ff93 	bl	8007624 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006704:	2b01      	cmp	r3, #1
 8006706:	d122      	bne.n	800674e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f7ff fe98 	bl	800643e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006716:	e01a      	b.n	800674e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b03      	cmp	r3, #3
 8006722:	d114      	bne.n	800674e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00e      	beq.n	800674e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	7afa      	ldrb	r2, [r7, #11]
 800673a:	4611      	mov	r1, r2
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	4798      	blx	r3
 8006740:	4603      	mov	r3, r0
 8006742:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006744:	7dfb      	ldrb	r3, [r7, #23]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800674a:	7dfb      	ldrb	r3, [r7, #23]
 800674c:	e000      	b.n	8006750 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006788:	2303      	movs	r3, #3
 800678a:	e02f      	b.n	80067ec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00f      	beq.n	80067b6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6852      	ldr	r2, [r2, #4]
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	4611      	mov	r1, r2
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067b6:	2340      	movs	r3, #64	; 0x40
 80067b8:	2200      	movs	r2, #0
 80067ba:	2100      	movs	r1, #0
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f001 fb0a 	bl	8007dd6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2240      	movs	r2, #64	; 0x40
 80067ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067d2:	2340      	movs	r3, #64	; 0x40
 80067d4:	2200      	movs	r2, #0
 80067d6:	2180      	movs	r1, #128	; 0x80
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 fafc 	bl	8007dd6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2240      	movs	r2, #64	; 0x40
 80067e8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	78fa      	ldrb	r2, [r7, #3]
 8006804:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006822:	b2da      	uxtb	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2204      	movs	r2, #4
 800682e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b04      	cmp	r3, #4
 8006852:	d106      	bne.n	8006862 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800685a:	b2da      	uxtb	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006882:	2303      	movs	r3, #3
 8006884:	e012      	b.n	80068ac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b03      	cmp	r3, #3
 8006890:	d10b      	bne.n	80068aa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e014      	b.n	80068f8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d10d      	bne.n	80068f6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d007      	beq.n	80068f6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	78fa      	ldrb	r2, [r7, #3]
 80068f0:	4611      	mov	r1, r2
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006916:	2303      	movs	r3, #3
 8006918:	e014      	b.n	8006944 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b03      	cmp	r3, #3
 8006924:	d10d      	bne.n	8006942 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	2b00      	cmp	r3, #0
 8006930:	d007      	beq.n	8006942 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	78fa      	ldrb	r2, [r7, #3]
 800693c:	4611      	mov	r1, r2
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b082      	sub	sp, #8
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006978:	2b00      	cmp	r3, #0
 800697a:	d009      	beq.n	8006990 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6852      	ldr	r2, [r2, #4]
 8006988:	b2d2      	uxtb	r2, r2
 800698a:	4611      	mov	r1, r2
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	4798      	blx	r3
  }

  return USBD_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800699a:	b480      	push	{r7}
 800699c:	b087      	sub	sp, #28
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	3301      	adds	r3, #1
 80069b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80069b8:	8a3b      	ldrh	r3, [r7, #16]
 80069ba:	021b      	lsls	r3, r3, #8
 80069bc:	b21a      	sxth	r2, r3
 80069be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	b21b      	sxth	r3, r3
 80069c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80069c8:	89fb      	ldrh	r3, [r7, #14]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
	...

080069d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069ee:	2b40      	cmp	r3, #64	; 0x40
 80069f0:	d005      	beq.n	80069fe <USBD_StdDevReq+0x26>
 80069f2:	2b40      	cmp	r3, #64	; 0x40
 80069f4:	d853      	bhi.n	8006a9e <USBD_StdDevReq+0xc6>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00b      	beq.n	8006a12 <USBD_StdDevReq+0x3a>
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d14f      	bne.n	8006a9e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	4798      	blx	r3
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a10:	e04a      	b.n	8006aa8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	785b      	ldrb	r3, [r3, #1]
 8006a16:	2b09      	cmp	r3, #9
 8006a18:	d83b      	bhi.n	8006a92 <USBD_StdDevReq+0xba>
 8006a1a:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <USBD_StdDevReq+0x48>)
 8006a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a20:	08006a75 	.word	0x08006a75
 8006a24:	08006a89 	.word	0x08006a89
 8006a28:	08006a93 	.word	0x08006a93
 8006a2c:	08006a7f 	.word	0x08006a7f
 8006a30:	08006a93 	.word	0x08006a93
 8006a34:	08006a53 	.word	0x08006a53
 8006a38:	08006a49 	.word	0x08006a49
 8006a3c:	08006a93 	.word	0x08006a93
 8006a40:	08006a6b 	.word	0x08006a6b
 8006a44:	08006a5d 	.word	0x08006a5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f9de 	bl	8006e0c <USBD_GetDescriptor>
          break;
 8006a50:	e024      	b.n	8006a9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fb43 	bl	80070e0 <USBD_SetAddress>
          break;
 8006a5a:	e01f      	b.n	8006a9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fb82 	bl	8007168 <USBD_SetConfig>
 8006a64:	4603      	mov	r3, r0
 8006a66:	73fb      	strb	r3, [r7, #15]
          break;
 8006a68:	e018      	b.n	8006a9c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fc21 	bl	80072b4 <USBD_GetConfig>
          break;
 8006a72:	e013      	b.n	8006a9c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fc52 	bl	8007320 <USBD_GetStatus>
          break;
 8006a7c:	e00e      	b.n	8006a9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fc81 	bl	8007388 <USBD_SetFeature>
          break;
 8006a86:	e009      	b.n	8006a9c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fc90 	bl	80073b0 <USBD_ClrFeature>
          break;
 8006a90:	e004      	b.n	8006a9c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fce7 	bl	8007468 <USBD_CtlError>
          break;
 8006a9a:	bf00      	nop
      }
      break;
 8006a9c:	e004      	b.n	8006aa8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fce1 	bl	8007468 <USBD_CtlError>
      break;
 8006aa6:	bf00      	nop
  }

  return ret;
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop

08006ab4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aca:	2b40      	cmp	r3, #64	; 0x40
 8006acc:	d005      	beq.n	8006ada <USBD_StdItfReq+0x26>
 8006ace:	2b40      	cmp	r3, #64	; 0x40
 8006ad0:	d82f      	bhi.n	8006b32 <USBD_StdItfReq+0x7e>
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <USBD_StdItfReq+0x26>
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	d12b      	bne.n	8006b32 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d81d      	bhi.n	8006b24 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	889b      	ldrh	r3, [r3, #4]
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d813      	bhi.n	8006b1a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	4798      	blx	r3
 8006b00:	4603      	mov	r3, r0
 8006b02:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	88db      	ldrh	r3, [r3, #6]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d110      	bne.n	8006b2e <USBD_StdItfReq+0x7a>
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10d      	bne.n	8006b2e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fd73 	bl	80075fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b18:	e009      	b.n	8006b2e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fca3 	bl	8007468 <USBD_CtlError>
          break;
 8006b22:	e004      	b.n	8006b2e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fc9e 	bl	8007468 <USBD_CtlError>
          break;
 8006b2c:	e000      	b.n	8006b30 <USBD_StdItfReq+0x7c>
          break;
 8006b2e:	bf00      	nop
      }
      break;
 8006b30:	e004      	b.n	8006b3c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fc97 	bl	8007468 <USBD_CtlError>
      break;
 8006b3a:	bf00      	nop
  }

  return ret;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	889b      	ldrh	r3, [r3, #4]
 8006b58:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b62:	2b40      	cmp	r3, #64	; 0x40
 8006b64:	d007      	beq.n	8006b76 <USBD_StdEPReq+0x30>
 8006b66:	2b40      	cmp	r3, #64	; 0x40
 8006b68:	f200 8145 	bhi.w	8006df6 <USBD_StdEPReq+0x2b0>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00c      	beq.n	8006b8a <USBD_StdEPReq+0x44>
 8006b70:	2b20      	cmp	r3, #32
 8006b72:	f040 8140 	bne.w	8006df6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	4798      	blx	r3
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]
      break;
 8006b88:	e13a      	b.n	8006e00 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d007      	beq.n	8006ba2 <USBD_StdEPReq+0x5c>
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	f300 8129 	bgt.w	8006dea <USBD_StdEPReq+0x2a4>
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d07f      	beq.n	8006c9c <USBD_StdEPReq+0x156>
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d03c      	beq.n	8006c1a <USBD_StdEPReq+0xd4>
 8006ba0:	e123      	b.n	8006dea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d002      	beq.n	8006bb4 <USBD_StdEPReq+0x6e>
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	d016      	beq.n	8006be0 <USBD_StdEPReq+0x9a>
 8006bb2:	e02c      	b.n	8006c0e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bb4:	7bbb      	ldrb	r3, [r7, #14]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00d      	beq.n	8006bd6 <USBD_StdEPReq+0x90>
 8006bba:	7bbb      	ldrb	r3, [r7, #14]
 8006bbc:	2b80      	cmp	r3, #128	; 0x80
 8006bbe:	d00a      	beq.n	8006bd6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bc0:	7bbb      	ldrb	r3, [r7, #14]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 f94b 	bl	8007e60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bca:	2180      	movs	r1, #128	; 0x80
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 f947 	bl	8007e60 <USBD_LL_StallEP>
 8006bd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bd4:	e020      	b.n	8006c18 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 fc45 	bl	8007468 <USBD_CtlError>
              break;
 8006bde:	e01b      	b.n	8006c18 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	885b      	ldrh	r3, [r3, #2]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10e      	bne.n	8006c06 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00b      	beq.n	8006c06 <USBD_StdEPReq+0xc0>
 8006bee:	7bbb      	ldrb	r3, [r7, #14]
 8006bf0:	2b80      	cmp	r3, #128	; 0x80
 8006bf2:	d008      	beq.n	8006c06 <USBD_StdEPReq+0xc0>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	88db      	ldrh	r3, [r3, #6]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d104      	bne.n	8006c06 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bfc:	7bbb      	ldrb	r3, [r7, #14]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f001 f92d 	bl	8007e60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fcf9 	bl	80075fe <USBD_CtlSendStatus>

              break;
 8006c0c:	e004      	b.n	8006c18 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fc29 	bl	8007468 <USBD_CtlError>
              break;
 8006c16:	bf00      	nop
          }
          break;
 8006c18:	e0ec      	b.n	8006df4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d002      	beq.n	8006c2c <USBD_StdEPReq+0xe6>
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d016      	beq.n	8006c58 <USBD_StdEPReq+0x112>
 8006c2a:	e030      	b.n	8006c8e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c2c:	7bbb      	ldrb	r3, [r7, #14]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00d      	beq.n	8006c4e <USBD_StdEPReq+0x108>
 8006c32:	7bbb      	ldrb	r3, [r7, #14]
 8006c34:	2b80      	cmp	r3, #128	; 0x80
 8006c36:	d00a      	beq.n	8006c4e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 f90f 	bl	8007e60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c42:	2180      	movs	r1, #128	; 0x80
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 f90b 	bl	8007e60 <USBD_LL_StallEP>
 8006c4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c4c:	e025      	b.n	8006c9a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fc09 	bl	8007468 <USBD_CtlError>
              break;
 8006c56:	e020      	b.n	8006c9a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	885b      	ldrh	r3, [r3, #2]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d11b      	bne.n	8006c98 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d004      	beq.n	8006c74 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c6a:	7bbb      	ldrb	r3, [r7, #14]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f001 f915 	bl	8007e9e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fcc2 	bl	80075fe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	4798      	blx	r3
 8006c88:	4603      	mov	r3, r0
 8006c8a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006c8c:	e004      	b.n	8006c98 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fbe9 	bl	8007468 <USBD_CtlError>
              break;
 8006c96:	e000      	b.n	8006c9a <USBD_StdEPReq+0x154>
              break;
 8006c98:	bf00      	nop
          }
          break;
 8006c9a:	e0ab      	b.n	8006df4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d002      	beq.n	8006cae <USBD_StdEPReq+0x168>
 8006ca8:	2b03      	cmp	r3, #3
 8006caa:	d032      	beq.n	8006d12 <USBD_StdEPReq+0x1cc>
 8006cac:	e097      	b.n	8006dde <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cae:	7bbb      	ldrb	r3, [r7, #14]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d007      	beq.n	8006cc4 <USBD_StdEPReq+0x17e>
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	2b80      	cmp	r3, #128	; 0x80
 8006cb8:	d004      	beq.n	8006cc4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fbd3 	bl	8007468 <USBD_CtlError>
                break;
 8006cc2:	e091      	b.n	8006de8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	da0b      	bge.n	8006ce4 <USBD_StdEPReq+0x19e>
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	3310      	adds	r3, #16
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	4413      	add	r3, r2
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	e00b      	b.n	8006cfc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2200      	movs	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2202      	movs	r2, #2
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fc1d 	bl	800754a <USBD_CtlSendData>
              break;
 8006d10:	e06a      	b.n	8006de8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	da11      	bge.n	8006d3e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d1a:	7bbb      	ldrb	r3, [r7, #14]
 8006d1c:	f003 020f 	and.w	r2, r3, #15
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	4613      	mov	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4413      	add	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	440b      	add	r3, r1
 8006d2c:	3324      	adds	r3, #36	; 0x24
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d117      	bne.n	8006d64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fb96 	bl	8007468 <USBD_CtlError>
                  break;
 8006d3c:	e054      	b.n	8006de8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d3e:	7bbb      	ldrb	r3, [r7, #14]
 8006d40:	f003 020f 	and.w	r2, r3, #15
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	4613      	mov	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	440b      	add	r3, r1
 8006d50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d104      	bne.n	8006d64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fb83 	bl	8007468 <USBD_CtlError>
                  break;
 8006d62:	e041      	b.n	8006de8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	da0b      	bge.n	8006d84 <USBD_StdEPReq+0x23e>
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	3310      	adds	r3, #16
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	4413      	add	r3, r2
 8006d80:	3304      	adds	r3, #4
 8006d82:	e00b      	b.n	8006d9c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
 8006d86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	4413      	add	r3, r2
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d9e:	7bbb      	ldrb	r3, [r7, #14]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <USBD_StdEPReq+0x264>
 8006da4:	7bbb      	ldrb	r3, [r7, #14]
 8006da6:	2b80      	cmp	r3, #128	; 0x80
 8006da8:	d103      	bne.n	8006db2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2200      	movs	r2, #0
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	e00e      	b.n	8006dd0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006db2:	7bbb      	ldrb	r3, [r7, #14]
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 f890 	bl	8007edc <USBD_LL_IsStallEP>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	e002      	b.n	8006dd0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fbb7 	bl	800754a <USBD_CtlSendData>
              break;
 8006ddc:	e004      	b.n	8006de8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fb41 	bl	8007468 <USBD_CtlError>
              break;
 8006de6:	bf00      	nop
          }
          break;
 8006de8:	e004      	b.n	8006df4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fb3b 	bl	8007468 <USBD_CtlError>
          break;
 8006df2:	bf00      	nop
      }
      break;
 8006df4:	e004      	b.n	8006e00 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fb35 	bl	8007468 <USBD_CtlError>
      break;
 8006dfe:	bf00      	nop
  }

  return ret;
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
	...

08006e0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e16:	2300      	movs	r3, #0
 8006e18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	885b      	ldrh	r3, [r3, #2]
 8006e26:	0a1b      	lsrs	r3, r3, #8
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	2b06      	cmp	r3, #6
 8006e2e:	f200 8128 	bhi.w	8007082 <USBD_GetDescriptor+0x276>
 8006e32:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <USBD_GetDescriptor+0x2c>)
 8006e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e38:	08006e55 	.word	0x08006e55
 8006e3c:	08006e6d 	.word	0x08006e6d
 8006e40:	08006ead 	.word	0x08006ead
 8006e44:	08007083 	.word	0x08007083
 8006e48:	08007083 	.word	0x08007083
 8006e4c:	08007023 	.word	0x08007023
 8006e50:	0800704f 	.word	0x0800704f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	7c12      	ldrb	r2, [r2, #16]
 8006e60:	f107 0108 	add.w	r1, r7, #8
 8006e64:	4610      	mov	r0, r2
 8006e66:	4798      	blx	r3
 8006e68:	60f8      	str	r0, [r7, #12]
      break;
 8006e6a:	e112      	b.n	8007092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	7c1b      	ldrb	r3, [r3, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10d      	bne.n	8006e90 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7c:	f107 0208 	add.w	r2, r7, #8
 8006e80:	4610      	mov	r0, r2
 8006e82:	4798      	blx	r3
 8006e84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e8e:	e100      	b.n	8007092 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	f107 0208 	add.w	r2, r7, #8
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4798      	blx	r3
 8006ea0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	701a      	strb	r2, [r3, #0]
      break;
 8006eaa:	e0f2      	b.n	8007092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	885b      	ldrh	r3, [r3, #2]
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b05      	cmp	r3, #5
 8006eb4:	f200 80ac 	bhi.w	8007010 <USBD_GetDescriptor+0x204>
 8006eb8:	a201      	add	r2, pc, #4	; (adr r2, 8006ec0 <USBD_GetDescriptor+0xb4>)
 8006eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebe:	bf00      	nop
 8006ec0:	08006ed9 	.word	0x08006ed9
 8006ec4:	08006f0d 	.word	0x08006f0d
 8006ec8:	08006f41 	.word	0x08006f41
 8006ecc:	08006f75 	.word	0x08006f75
 8006ed0:	08006fa9 	.word	0x08006fa9
 8006ed4:	08006fdd 	.word	0x08006fdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00b      	beq.n	8006efc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	7c12      	ldrb	r2, [r2, #16]
 8006ef0:	f107 0108 	add.w	r1, r7, #8
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	4798      	blx	r3
 8006ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006efa:	e091      	b.n	8007020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fab2 	bl	8007468 <USBD_CtlError>
            err++;
 8006f04:	7afb      	ldrb	r3, [r7, #11]
 8006f06:	3301      	adds	r3, #1
 8006f08:	72fb      	strb	r3, [r7, #11]
          break;
 8006f0a:	e089      	b.n	8007020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00b      	beq.n	8006f30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	7c12      	ldrb	r2, [r2, #16]
 8006f24:	f107 0108 	add.w	r1, r7, #8
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4798      	blx	r3
 8006f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f2e:	e077      	b.n	8007020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fa98 	bl	8007468 <USBD_CtlError>
            err++;
 8006f38:	7afb      	ldrb	r3, [r7, #11]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f3e:	e06f      	b.n	8007020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00b      	beq.n	8006f64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	7c12      	ldrb	r2, [r2, #16]
 8006f58:	f107 0108 	add.w	r1, r7, #8
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	4798      	blx	r3
 8006f60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f62:	e05d      	b.n	8007020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fa7e 	bl	8007468 <USBD_CtlError>
            err++;
 8006f6c:	7afb      	ldrb	r3, [r7, #11]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	72fb      	strb	r3, [r7, #11]
          break;
 8006f72:	e055      	b.n	8007020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00b      	beq.n	8006f98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	7c12      	ldrb	r2, [r2, #16]
 8006f8c:	f107 0108 	add.w	r1, r7, #8
 8006f90:	4610      	mov	r0, r2
 8006f92:	4798      	blx	r3
 8006f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f96:	e043      	b.n	8007020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fa64 	bl	8007468 <USBD_CtlError>
            err++;
 8006fa0:	7afb      	ldrb	r3, [r7, #11]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8006fa6:	e03b      	b.n	8007020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00b      	beq.n	8006fcc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	7c12      	ldrb	r2, [r2, #16]
 8006fc0:	f107 0108 	add.w	r1, r7, #8
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	4798      	blx	r3
 8006fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fca:	e029      	b.n	8007020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa4a 	bl	8007468 <USBD_CtlError>
            err++;
 8006fd4:	7afb      	ldrb	r3, [r7, #11]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fda:	e021      	b.n	8007020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	7c12      	ldrb	r2, [r2, #16]
 8006ff4:	f107 0108 	add.w	r1, r7, #8
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	4798      	blx	r3
 8006ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ffe:	e00f      	b.n	8007020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa30 	bl	8007468 <USBD_CtlError>
            err++;
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	3301      	adds	r3, #1
 800700c:	72fb      	strb	r3, [r7, #11]
          break;
 800700e:	e007      	b.n	8007020 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa28 	bl	8007468 <USBD_CtlError>
          err++;
 8007018:	7afb      	ldrb	r3, [r7, #11]
 800701a:	3301      	adds	r3, #1
 800701c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800701e:	bf00      	nop
      }
      break;
 8007020:	e037      	b.n	8007092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	7c1b      	ldrb	r3, [r3, #16]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d109      	bne.n	800703e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007032:	f107 0208 	add.w	r2, r7, #8
 8007036:	4610      	mov	r0, r2
 8007038:	4798      	blx	r3
 800703a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800703c:	e029      	b.n	8007092 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fa11 	bl	8007468 <USBD_CtlError>
        err++;
 8007046:	7afb      	ldrb	r3, [r7, #11]
 8007048:	3301      	adds	r3, #1
 800704a:	72fb      	strb	r3, [r7, #11]
      break;
 800704c:	e021      	b.n	8007092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	7c1b      	ldrb	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10d      	bne.n	8007072 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800705c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705e:	f107 0208 	add.w	r2, r7, #8
 8007062:	4610      	mov	r0, r2
 8007064:	4798      	blx	r3
 8007066:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3301      	adds	r3, #1
 800706c:	2207      	movs	r2, #7
 800706e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007070:	e00f      	b.n	8007092 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f9f7 	bl	8007468 <USBD_CtlError>
        err++;
 800707a:	7afb      	ldrb	r3, [r7, #11]
 800707c:	3301      	adds	r3, #1
 800707e:	72fb      	strb	r3, [r7, #11]
      break;
 8007080:	e007      	b.n	8007092 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f9ef 	bl	8007468 <USBD_CtlError>
      err++;
 800708a:	7afb      	ldrb	r3, [r7, #11]
 800708c:	3301      	adds	r3, #1
 800708e:	72fb      	strb	r3, [r7, #11]
      break;
 8007090:	bf00      	nop
  }

  if (err != 0U)
 8007092:	7afb      	ldrb	r3, [r7, #11]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d11e      	bne.n	80070d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	88db      	ldrh	r3, [r3, #6]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d016      	beq.n	80070ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80070a0:	893b      	ldrh	r3, [r7, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00e      	beq.n	80070c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	88da      	ldrh	r2, [r3, #6]
 80070aa:	893b      	ldrh	r3, [r7, #8]
 80070ac:	4293      	cmp	r3, r2
 80070ae:	bf28      	it	cs
 80070b0:	4613      	movcs	r3, r2
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80070b6:	893b      	ldrh	r3, [r7, #8]
 80070b8:	461a      	mov	r2, r3
 80070ba:	68f9      	ldr	r1, [r7, #12]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fa44 	bl	800754a <USBD_CtlSendData>
 80070c2:	e009      	b.n	80070d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f9ce 	bl	8007468 <USBD_CtlError>
 80070cc:	e004      	b.n	80070d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fa95 	bl	80075fe <USBD_CtlSendStatus>
 80070d4:	e000      	b.n	80070d8 <USBD_GetDescriptor+0x2cc>
    return;
 80070d6:	bf00      	nop
  }
}
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop

080070e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	889b      	ldrh	r3, [r3, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d131      	bne.n	8007156 <USBD_SetAddress+0x76>
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	88db      	ldrh	r3, [r3, #6]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d12d      	bne.n	8007156 <USBD_SetAddress+0x76>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	885b      	ldrh	r3, [r3, #2]
 80070fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007100:	d829      	bhi.n	8007156 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	885b      	ldrh	r3, [r3, #2]
 8007106:	b2db      	uxtb	r3, r3
 8007108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800710c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b03      	cmp	r3, #3
 8007118:	d104      	bne.n	8007124 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f9a3 	bl	8007468 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007122:	e01d      	b.n	8007160 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	7bfa      	ldrb	r2, [r7, #15]
 8007128:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800712c:	7bfb      	ldrb	r3, [r7, #15]
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 feff 	bl	8007f34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fa61 	bl	80075fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d004      	beq.n	800714c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2202      	movs	r2, #2
 8007146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800714a:	e009      	b.n	8007160 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007154:	e004      	b.n	8007160 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007156:	6839      	ldr	r1, [r7, #0]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f985 	bl	8007468 <USBD_CtlError>
  }
}
 800715e:	bf00      	nop
 8007160:	bf00      	nop
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	885b      	ldrh	r3, [r3, #2]
 800717a:	b2da      	uxtb	r2, r3
 800717c:	4b4c      	ldr	r3, [pc, #304]	; (80072b0 <USBD_SetConfig+0x148>)
 800717e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007180:	4b4b      	ldr	r3, [pc, #300]	; (80072b0 <USBD_SetConfig+0x148>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d905      	bls.n	8007194 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f96c 	bl	8007468 <USBD_CtlError>
    return USBD_FAIL;
 8007190:	2303      	movs	r3, #3
 8007192:	e088      	b.n	80072a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b02      	cmp	r3, #2
 800719e:	d002      	beq.n	80071a6 <USBD_SetConfig+0x3e>
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	d025      	beq.n	80071f0 <USBD_SetConfig+0x88>
 80071a4:	e071      	b.n	800728a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80071a6:	4b42      	ldr	r3, [pc, #264]	; (80072b0 <USBD_SetConfig+0x148>)
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d01c      	beq.n	80071e8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80071ae:	4b40      	ldr	r3, [pc, #256]	; (80072b0 <USBD_SetConfig+0x148>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071b8:	4b3d      	ldr	r3, [pc, #244]	; (80072b0 <USBD_SetConfig+0x148>)
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7ff f948 	bl	8006454 <USBD_SetClassConfig>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d004      	beq.n	80071d8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f949 	bl	8007468 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071d6:	e065      	b.n	80072a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fa10 	bl	80075fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2203      	movs	r2, #3
 80071e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80071e6:	e05d      	b.n	80072a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fa08 	bl	80075fe <USBD_CtlSendStatus>
      break;
 80071ee:	e059      	b.n	80072a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80071f0:	4b2f      	ldr	r3, [pc, #188]	; (80072b0 <USBD_SetConfig+0x148>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d112      	bne.n	800721e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007200:	4b2b      	ldr	r3, [pc, #172]	; (80072b0 <USBD_SetConfig+0x148>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800720a:	4b29      	ldr	r3, [pc, #164]	; (80072b0 <USBD_SetConfig+0x148>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff f93b 	bl	800648c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f9f1 	bl	80075fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800721c:	e042      	b.n	80072a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800721e:	4b24      	ldr	r3, [pc, #144]	; (80072b0 <USBD_SetConfig+0x148>)
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	461a      	mov	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	429a      	cmp	r2, r3
 800722a:	d02a      	beq.n	8007282 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	b2db      	uxtb	r3, r3
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff f929 	bl	800648c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800723a:	4b1d      	ldr	r3, [pc, #116]	; (80072b0 <USBD_SetConfig+0x148>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	461a      	mov	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007244:	4b1a      	ldr	r3, [pc, #104]	; (80072b0 <USBD_SetConfig+0x148>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff f902 	bl	8006454 <USBD_SetClassConfig>
 8007250:	4603      	mov	r3, r0
 8007252:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00f      	beq.n	800727a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f903 	bl	8007468 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	b2db      	uxtb	r3, r3
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7ff f90e 	bl	800648c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007278:	e014      	b.n	80072a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f9bf 	bl	80075fe <USBD_CtlSendStatus>
      break;
 8007280:	e010      	b.n	80072a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f9bb 	bl	80075fe <USBD_CtlSendStatus>
      break;
 8007288:	e00c      	b.n	80072a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f8eb 	bl	8007468 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007292:	4b07      	ldr	r3, [pc, #28]	; (80072b0 <USBD_SetConfig+0x148>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff f8f7 	bl	800648c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800729e:	2303      	movs	r3, #3
 80072a0:	73fb      	strb	r3, [r7, #15]
      break;
 80072a2:	bf00      	nop
  }

  return ret;
 80072a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3710      	adds	r7, #16
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	2000020c 	.word	0x2000020c

080072b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	88db      	ldrh	r3, [r3, #6]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d004      	beq.n	80072d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f8cd 	bl	8007468 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80072ce:	e023      	b.n	8007318 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b02      	cmp	r3, #2
 80072da:	dc02      	bgt.n	80072e2 <USBD_GetConfig+0x2e>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	dc03      	bgt.n	80072e8 <USBD_GetConfig+0x34>
 80072e0:	e015      	b.n	800730e <USBD_GetConfig+0x5a>
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d00b      	beq.n	80072fe <USBD_GetConfig+0x4a>
 80072e6:	e012      	b.n	800730e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	3308      	adds	r3, #8
 80072f2:	2201      	movs	r2, #1
 80072f4:	4619      	mov	r1, r3
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f927 	bl	800754a <USBD_CtlSendData>
        break;
 80072fc:	e00c      	b.n	8007318 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	3304      	adds	r3, #4
 8007302:	2201      	movs	r2, #1
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f91f 	bl	800754a <USBD_CtlSendData>
        break;
 800730c:	e004      	b.n	8007318 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f8a9 	bl	8007468 <USBD_CtlError>
        break;
 8007316:	bf00      	nop
}
 8007318:	bf00      	nop
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007330:	b2db      	uxtb	r3, r3
 8007332:	3b01      	subs	r3, #1
 8007334:	2b02      	cmp	r3, #2
 8007336:	d81e      	bhi.n	8007376 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	88db      	ldrh	r3, [r3, #6]
 800733c:	2b02      	cmp	r3, #2
 800733e:	d004      	beq.n	800734a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f890 	bl	8007468 <USBD_CtlError>
        break;
 8007348:	e01a      	b.n	8007380 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007356:	2b00      	cmp	r3, #0
 8007358:	d005      	beq.n	8007366 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f043 0202 	orr.w	r2, r3, #2
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	330c      	adds	r3, #12
 800736a:	2202      	movs	r2, #2
 800736c:	4619      	mov	r1, r3
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f8eb 	bl	800754a <USBD_CtlSendData>
      break;
 8007374:	e004      	b.n	8007380 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f875 	bl	8007468 <USBD_CtlError>
      break;
 800737e:	bf00      	nop
  }
}
 8007380:	bf00      	nop
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	885b      	ldrh	r3, [r3, #2]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d106      	bne.n	80073a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f92b 	bl	80075fe <USBD_CtlSendStatus>
  }
}
 80073a8:	bf00      	nop
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	3b01      	subs	r3, #1
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d80b      	bhi.n	80073e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	885b      	ldrh	r3, [r3, #2]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d10c      	bne.n	80073ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f910 	bl	80075fe <USBD_CtlSendStatus>
      }
      break;
 80073de:	e004      	b.n	80073ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f840 	bl	8007468 <USBD_CtlError>
      break;
 80073e8:	e000      	b.n	80073ec <USBD_ClrFeature+0x3c>
      break;
 80073ea:	bf00      	nop
  }
}
 80073ec:	bf00      	nop
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	781a      	ldrb	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3301      	adds	r3, #1
 800740e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	781a      	ldrb	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3301      	adds	r3, #1
 800741c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f7ff fabb 	bl	800699a <SWAPBYTE>
 8007424:	4603      	mov	r3, r0
 8007426:	461a      	mov	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3301      	adds	r3, #1
 8007430:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3301      	adds	r3, #1
 8007436:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7ff faae 	bl	800699a <SWAPBYTE>
 800743e:	4603      	mov	r3, r0
 8007440:	461a      	mov	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3301      	adds	r3, #1
 800744a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3301      	adds	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f7ff faa1 	bl	800699a <SWAPBYTE>
 8007458:	4603      	mov	r3, r0
 800745a:	461a      	mov	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	80da      	strh	r2, [r3, #6]
}
 8007460:	bf00      	nop
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007472:	2180      	movs	r1, #128	; 0x80
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fcf3 	bl	8007e60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800747a:	2100      	movs	r1, #0
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fcef 	bl	8007e60 <USBD_LL_StallEP>
}
 8007482:	bf00      	nop
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b086      	sub	sp, #24
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d036      	beq.n	800750e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80074a4:	6938      	ldr	r0, [r7, #16]
 80074a6:	f000 f836 	bl	8007516 <USBD_GetLen>
 80074aa:	4603      	mov	r3, r0
 80074ac:	3301      	adds	r3, #1
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	4413      	add	r3, r2
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	7812      	ldrb	r2, [r2, #0]
 80074c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
 80074c6:	3301      	adds	r3, #1
 80074c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80074ca:	7dfb      	ldrb	r3, [r7, #23]
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	4413      	add	r3, r2
 80074d0:	2203      	movs	r2, #3
 80074d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
 80074d6:	3301      	adds	r3, #1
 80074d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80074da:	e013      	b.n	8007504 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80074dc:	7dfb      	ldrb	r3, [r7, #23]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	4413      	add	r3, r2
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	7812      	ldrb	r2, [r2, #0]
 80074e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	3301      	adds	r3, #1
 80074ec:	613b      	str	r3, [r7, #16]
    idx++;
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
 80074f0:	3301      	adds	r3, #1
 80074f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	4413      	add	r3, r2
 80074fa:	2200      	movs	r2, #0
 80074fc:	701a      	strb	r2, [r3, #0]
    idx++;
 80074fe:	7dfb      	ldrb	r3, [r7, #23]
 8007500:	3301      	adds	r3, #1
 8007502:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1e7      	bne.n	80074dc <USBD_GetString+0x52>
 800750c:	e000      	b.n	8007510 <USBD_GetString+0x86>
    return;
 800750e:	bf00      	nop
  }
}
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007516:	b480      	push	{r7}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007526:	e005      	b.n	8007534 <USBD_GetLen+0x1e>
  {
    len++;
 8007528:	7bfb      	ldrb	r3, [r7, #15]
 800752a:	3301      	adds	r3, #1
 800752c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	3301      	adds	r3, #1
 8007532:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1f5      	bne.n	8007528 <USBD_GetLen+0x12>
  }

  return len;
 800753c:	7bfb      	ldrb	r3, [r7, #15]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2202      	movs	r2, #2
 800755a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	2100      	movs	r1, #0
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 fcfe 	bl	8007f72 <USBD_LL_Transmit>

  return USBD_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	2100      	movs	r1, #0
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 fced 	bl	8007f72 <USBD_LL_Transmit>

  return USBD_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2203      	movs	r2, #3
 80075b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	2100      	movs	r1, #0
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fcf1 	bl	8007fb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	2100      	movs	r1, #0
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 fce0 	bl	8007fb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b082      	sub	sp, #8
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2204      	movs	r2, #4
 800760a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800760e:	2300      	movs	r3, #0
 8007610:	2200      	movs	r2, #0
 8007612:	2100      	movs	r1, #0
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fcac 	bl	8007f72 <USBD_LL_Transmit>

  return USBD_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2205      	movs	r2, #5
 8007630:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007634:	2300      	movs	r3, #0
 8007636:	2200      	movs	r2, #0
 8007638:	2100      	movs	r1, #0
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fcba 	bl	8007fb4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
	...

0800764c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007650:	2200      	movs	r2, #0
 8007652:	4912      	ldr	r1, [pc, #72]	; (800769c <MX_USB_DEVICE_Init+0x50>)
 8007654:	4812      	ldr	r0, [pc, #72]	; (80076a0 <MX_USB_DEVICE_Init+0x54>)
 8007656:	f7fe fe8f 	bl	8006378 <USBD_Init>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007660:	f7f9 fa98 	bl	8000b94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007664:	490f      	ldr	r1, [pc, #60]	; (80076a4 <MX_USB_DEVICE_Init+0x58>)
 8007666:	480e      	ldr	r0, [pc, #56]	; (80076a0 <MX_USB_DEVICE_Init+0x54>)
 8007668:	f7fe feb6 	bl	80063d8 <USBD_RegisterClass>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007672:	f7f9 fa8f 	bl	8000b94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007676:	490c      	ldr	r1, [pc, #48]	; (80076a8 <MX_USB_DEVICE_Init+0x5c>)
 8007678:	4809      	ldr	r0, [pc, #36]	; (80076a0 <MX_USB_DEVICE_Init+0x54>)
 800767a:	f7fe fdd7 	bl	800622c <USBD_CDC_RegisterInterface>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007684:	f7f9 fa86 	bl	8000b94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007688:	4805      	ldr	r0, [pc, #20]	; (80076a0 <MX_USB_DEVICE_Init+0x54>)
 800768a:	f7fe fecc 	bl	8006426 <USBD_Start>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007694:	f7f9 fa7e 	bl	8000b94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007698:	bf00      	nop
 800769a:	bd80      	pop	{r7, pc}
 800769c:	20000130 	.word	0x20000130
 80076a0:	200006ac 	.word	0x200006ac
 80076a4:	20000018 	.word	0x20000018
 80076a8:	2000011c 	.word	0x2000011c

080076ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80076b0:	2200      	movs	r2, #0
 80076b2:	4905      	ldr	r1, [pc, #20]	; (80076c8 <CDC_Init_FS+0x1c>)
 80076b4:	4805      	ldr	r0, [pc, #20]	; (80076cc <CDC_Init_FS+0x20>)
 80076b6:	f7fe fdce 	bl	8006256 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80076ba:	4905      	ldr	r1, [pc, #20]	; (80076d0 <CDC_Init_FS+0x24>)
 80076bc:	4803      	ldr	r0, [pc, #12]	; (80076cc <CDC_Init_FS+0x20>)
 80076be:	f7fe fde8 	bl	8006292 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80076c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	2000117c 	.word	0x2000117c
 80076cc:	200006ac 	.word	0x200006ac
 80076d0:	2000097c 	.word	0x2000097c

080076d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80076d4:	b480      	push	{r7}
 80076d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80076d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80076da:	4618      	mov	r0, r3
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	4603      	mov	r3, r0
 80076ec:	6039      	str	r1, [r7, #0]
 80076ee:	71fb      	strb	r3, [r7, #7]
 80076f0:	4613      	mov	r3, r2
 80076f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80076f4:	79fb      	ldrb	r3, [r7, #7]
 80076f6:	2b23      	cmp	r3, #35	; 0x23
 80076f8:	d84a      	bhi.n	8007790 <CDC_Control_FS+0xac>
 80076fa:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <CDC_Control_FS+0x1c>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	08007791 	.word	0x08007791
 8007704:	08007791 	.word	0x08007791
 8007708:	08007791 	.word	0x08007791
 800770c:	08007791 	.word	0x08007791
 8007710:	08007791 	.word	0x08007791
 8007714:	08007791 	.word	0x08007791
 8007718:	08007791 	.word	0x08007791
 800771c:	08007791 	.word	0x08007791
 8007720:	08007791 	.word	0x08007791
 8007724:	08007791 	.word	0x08007791
 8007728:	08007791 	.word	0x08007791
 800772c:	08007791 	.word	0x08007791
 8007730:	08007791 	.word	0x08007791
 8007734:	08007791 	.word	0x08007791
 8007738:	08007791 	.word	0x08007791
 800773c:	08007791 	.word	0x08007791
 8007740:	08007791 	.word	0x08007791
 8007744:	08007791 	.word	0x08007791
 8007748:	08007791 	.word	0x08007791
 800774c:	08007791 	.word	0x08007791
 8007750:	08007791 	.word	0x08007791
 8007754:	08007791 	.word	0x08007791
 8007758:	08007791 	.word	0x08007791
 800775c:	08007791 	.word	0x08007791
 8007760:	08007791 	.word	0x08007791
 8007764:	08007791 	.word	0x08007791
 8007768:	08007791 	.word	0x08007791
 800776c:	08007791 	.word	0x08007791
 8007770:	08007791 	.word	0x08007791
 8007774:	08007791 	.word	0x08007791
 8007778:	08007791 	.word	0x08007791
 800777c:	08007791 	.word	0x08007791
 8007780:	08007791 	.word	0x08007791
 8007784:	08007791 	.word	0x08007791
 8007788:	08007791 	.word	0x08007791
 800778c:	08007791 	.word	0x08007791
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007790:	bf00      	nop
  }

  return (USBD_OK);
 8007792:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007794:	4618      	mov	r0, r3
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	4811      	ldr	r0, [pc, #68]	; (80077f4 <CDC_Receive_FS+0x54>)
 80077ae:	f7fe fd70 	bl	8006292 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80077b2:	4810      	ldr	r0, [pc, #64]	; (80077f4 <CDC_Receive_FS+0x54>)
 80077b4:	f7fe fdb6 	bl	8006324 <USBD_CDC_ReceivePacket>
   extern uint8_t ReceivedData[40]; // Tablica przechowujaca odebrane dane
   extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych

   // Wyczyszczenie tablicy odebranych danych
   uint8_t iter;
   for(iter = 0; iter<40; ++iter){
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]
 80077bc:	e006      	b.n	80077cc <CDC_Receive_FS+0x2c>
 	  ReceivedData[iter] = 0;
 80077be:	7bfb      	ldrb	r3, [r7, #15]
 80077c0:	4a0d      	ldr	r2, [pc, #52]	; (80077f8 <CDC_Receive_FS+0x58>)
 80077c2:	2100      	movs	r1, #0
 80077c4:	54d1      	strb	r1, [r2, r3]
   for(iter = 0; iter<40; ++iter){
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
 80077c8:	3301      	adds	r3, #1
 80077ca:	73fb      	strb	r3, [r7, #15]
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	2b27      	cmp	r3, #39	; 0x27
 80077d0:	d9f5      	bls.n	80077be <CDC_Receive_FS+0x1e>
   }

   strlcpy(ReceivedData, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3301      	adds	r3, #1
 80077d8:	461a      	mov	r2, r3
 80077da:	6879      	ldr	r1, [r7, #4]
 80077dc:	4806      	ldr	r0, [pc, #24]	; (80077f8 <CDC_Receive_FS+0x58>)
 80077de:	f000 fcc0 	bl	8008162 <strlcpy>
   ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 80077e2:	4b06      	ldr	r3, [pc, #24]	; (80077fc <CDC_Receive_FS+0x5c>)
 80077e4:	2201      	movs	r2, #1
 80077e6:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 80077e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	200006ac 	.word	0x200006ac
 80077f8:	20000510 	.word	0x20000510
 80077fc:	20000204 	.word	0x20000204

08007800 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007810:	4b0d      	ldr	r3, [pc, #52]	; (8007848 <CDC_Transmit_FS+0x48>)
 8007812:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007816:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007822:	2301      	movs	r3, #1
 8007824:	e00b      	b.n	800783e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007826:	887b      	ldrh	r3, [r7, #2]
 8007828:	461a      	mov	r2, r3
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	4806      	ldr	r0, [pc, #24]	; (8007848 <CDC_Transmit_FS+0x48>)
 800782e:	f7fe fd12 	bl	8006256 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007832:	4805      	ldr	r0, [pc, #20]	; (8007848 <CDC_Transmit_FS+0x48>)
 8007834:	f7fe fd46 	bl	80062c4 <USBD_CDC_TransmitPacket>
 8007838:	4603      	mov	r3, r0
 800783a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800783c:	7bfb      	ldrb	r3, [r7, #15]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	200006ac 	.word	0x200006ac

0800784c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800784c:	b480      	push	{r7}
 800784e:	b087      	sub	sp, #28
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	4613      	mov	r3, r2
 8007858:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800785e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007862:	4618      	mov	r0, r3
 8007864:	371c      	adds	r7, #28
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
	...

08007870 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	6039      	str	r1, [r7, #0]
 800787a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2212      	movs	r2, #18
 8007880:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007882:	4b03      	ldr	r3, [pc, #12]	; (8007890 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007884:	4618      	mov	r0, r3
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	2000014c 	.word	0x2000014c

08007894 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	6039      	str	r1, [r7, #0]
 800789e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	2204      	movs	r2, #4
 80078a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078a6:	4b03      	ldr	r3, [pc, #12]	; (80078b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	20000160 	.word	0x20000160

080078b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	4603      	mov	r3, r0
 80078c0:	6039      	str	r1, [r7, #0]
 80078c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d105      	bne.n	80078d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	4907      	ldr	r1, [pc, #28]	; (80078ec <USBD_FS_ProductStrDescriptor+0x34>)
 80078ce:	4808      	ldr	r0, [pc, #32]	; (80078f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80078d0:	f7ff fddb 	bl	800748a <USBD_GetString>
 80078d4:	e004      	b.n	80078e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	4904      	ldr	r1, [pc, #16]	; (80078ec <USBD_FS_ProductStrDescriptor+0x34>)
 80078da:	4805      	ldr	r0, [pc, #20]	; (80078f0 <USBD_FS_ProductStrDescriptor+0x38>)
 80078dc:	f7ff fdd5 	bl	800748a <USBD_GetString>
  }
  return USBD_StrDesc;
 80078e0:	4b02      	ldr	r3, [pc, #8]	; (80078ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	2000197c 	.word	0x2000197c
 80078f0:	08008b18 	.word	0x08008b18

080078f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	4603      	mov	r3, r0
 80078fc:	6039      	str	r1, [r7, #0]
 80078fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	4904      	ldr	r1, [pc, #16]	; (8007914 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007904:	4804      	ldr	r0, [pc, #16]	; (8007918 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007906:	f7ff fdc0 	bl	800748a <USBD_GetString>
  return USBD_StrDesc;
 800790a:	4b02      	ldr	r3, [pc, #8]	; (8007914 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800790c:	4618      	mov	r0, r3
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	2000197c 	.word	0x2000197c
 8007918:	08008b30 	.word	0x08008b30

0800791c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	4603      	mov	r3, r0
 8007924:	6039      	str	r1, [r7, #0]
 8007926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	221a      	movs	r2, #26
 800792c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800792e:	f000 f843 	bl	80079b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007932:	4b02      	ldr	r3, [pc, #8]	; (800793c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007934:	4618      	mov	r0, r3
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	20000164 	.word	0x20000164

08007940 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	6039      	str	r1, [r7, #0]
 800794a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d105      	bne.n	800795e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	4907      	ldr	r1, [pc, #28]	; (8007974 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007956:	4808      	ldr	r0, [pc, #32]	; (8007978 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007958:	f7ff fd97 	bl	800748a <USBD_GetString>
 800795c:	e004      	b.n	8007968 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	4904      	ldr	r1, [pc, #16]	; (8007974 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007962:	4805      	ldr	r0, [pc, #20]	; (8007978 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007964:	f7ff fd91 	bl	800748a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007968:	4b02      	ldr	r3, [pc, #8]	; (8007974 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	2000197c 	.word	0x2000197c
 8007978:	08008b44 	.word	0x08008b44

0800797c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	4603      	mov	r3, r0
 8007984:	6039      	str	r1, [r7, #0]
 8007986:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007988:	79fb      	ldrb	r3, [r7, #7]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d105      	bne.n	800799a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	4907      	ldr	r1, [pc, #28]	; (80079b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007992:	4808      	ldr	r0, [pc, #32]	; (80079b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007994:	f7ff fd79 	bl	800748a <USBD_GetString>
 8007998:	e004      	b.n	80079a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	4904      	ldr	r1, [pc, #16]	; (80079b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800799e:	4805      	ldr	r0, [pc, #20]	; (80079b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079a0:	f7ff fd73 	bl	800748a <USBD_GetString>
  }
  return USBD_StrDesc;
 80079a4:	4b02      	ldr	r3, [pc, #8]	; (80079b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	2000197c 	.word	0x2000197c
 80079b4:	08008b50 	.word	0x08008b50

080079b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079be:	4b0f      	ldr	r3, [pc, #60]	; (80079fc <Get_SerialNum+0x44>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079c4:	4b0e      	ldr	r3, [pc, #56]	; (8007a00 <Get_SerialNum+0x48>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079ca:	4b0e      	ldr	r3, [pc, #56]	; (8007a04 <Get_SerialNum+0x4c>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4413      	add	r3, r2
 80079d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d009      	beq.n	80079f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079de:	2208      	movs	r2, #8
 80079e0:	4909      	ldr	r1, [pc, #36]	; (8007a08 <Get_SerialNum+0x50>)
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 f814 	bl	8007a10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079e8:	2204      	movs	r2, #4
 80079ea:	4908      	ldr	r1, [pc, #32]	; (8007a0c <Get_SerialNum+0x54>)
 80079ec:	68b8      	ldr	r0, [r7, #8]
 80079ee:	f000 f80f 	bl	8007a10 <IntToUnicode>
  }
}
 80079f2:	bf00      	nop
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	1fff7a10 	.word	0x1fff7a10
 8007a00:	1fff7a14 	.word	0x1fff7a14
 8007a04:	1fff7a18 	.word	0x1fff7a18
 8007a08:	20000166 	.word	0x20000166
 8007a0c:	20000176 	.word	0x20000176

08007a10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b087      	sub	sp, #28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a22:	2300      	movs	r3, #0
 8007a24:	75fb      	strb	r3, [r7, #23]
 8007a26:	e027      	b.n	8007a78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	0f1b      	lsrs	r3, r3, #28
 8007a2c:	2b09      	cmp	r3, #9
 8007a2e:	d80b      	bhi.n	8007a48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	0f1b      	lsrs	r3, r3, #28
 8007a34:	b2da      	uxtb	r2, r3
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
 8007a38:	005b      	lsls	r3, r3, #1
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	440b      	add	r3, r1
 8007a40:	3230      	adds	r2, #48	; 0x30
 8007a42:	b2d2      	uxtb	r2, r2
 8007a44:	701a      	strb	r2, [r3, #0]
 8007a46:	e00a      	b.n	8007a5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	0f1b      	lsrs	r3, r3, #28
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	4619      	mov	r1, r3
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	440b      	add	r3, r1
 8007a58:	3237      	adds	r2, #55	; 0x37
 8007a5a:	b2d2      	uxtb	r2, r2
 8007a5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	011b      	lsls	r3, r3, #4
 8007a62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a64:	7dfb      	ldrb	r3, [r7, #23]
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	3301      	adds	r3, #1
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	2200      	movs	r2, #0
 8007a70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a72:	7dfb      	ldrb	r3, [r7, #23]
 8007a74:	3301      	adds	r3, #1
 8007a76:	75fb      	strb	r3, [r7, #23]
 8007a78:	7dfa      	ldrb	r2, [r7, #23]
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d3d3      	bcc.n	8007a28 <IntToUnicode+0x18>
  }
}
 8007a80:	bf00      	nop
 8007a82:	bf00      	nop
 8007a84:	371c      	adds	r7, #28
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
	...

08007a90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b08a      	sub	sp, #40	; 0x28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a98:	f107 0314 	add.w	r3, r7, #20
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	605a      	str	r2, [r3, #4]
 8007aa2:	609a      	str	r2, [r3, #8]
 8007aa4:	60da      	str	r2, [r3, #12]
 8007aa6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ab0:	d13a      	bne.n	8007b28 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	613b      	str	r3, [r7, #16]
 8007ab6:	4b1e      	ldr	r3, [pc, #120]	; (8007b30 <HAL_PCD_MspInit+0xa0>)
 8007ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aba:	4a1d      	ldr	r2, [pc, #116]	; (8007b30 <HAL_PCD_MspInit+0xa0>)
 8007abc:	f043 0301 	orr.w	r3, r3, #1
 8007ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8007ac2:	4b1b      	ldr	r3, [pc, #108]	; (8007b30 <HAL_PCD_MspInit+0xa0>)
 8007ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	613b      	str	r3, [r7, #16]
 8007acc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ace:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007adc:	2303      	movs	r3, #3
 8007ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ae0:	230a      	movs	r3, #10
 8007ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ae4:	f107 0314 	add.w	r3, r7, #20
 8007ae8:	4619      	mov	r1, r3
 8007aea:	4812      	ldr	r0, [pc, #72]	; (8007b34 <HAL_PCD_MspInit+0xa4>)
 8007aec:	f7f9 ff4c 	bl	8001988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007af0:	4b0f      	ldr	r3, [pc, #60]	; (8007b30 <HAL_PCD_MspInit+0xa0>)
 8007af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af4:	4a0e      	ldr	r2, [pc, #56]	; (8007b30 <HAL_PCD_MspInit+0xa0>)
 8007af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007afa:	6353      	str	r3, [r2, #52]	; 0x34
 8007afc:	2300      	movs	r3, #0
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <HAL_PCD_MspInit+0xa0>)
 8007b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b04:	4a0a      	ldr	r2, [pc, #40]	; (8007b30 <HAL_PCD_MspInit+0xa0>)
 8007b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b0a:	6453      	str	r3, [r2, #68]	; 0x44
 8007b0c:	4b08      	ldr	r3, [pc, #32]	; (8007b30 <HAL_PCD_MspInit+0xa0>)
 8007b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b14:	60fb      	str	r3, [r7, #12]
 8007b16:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	2043      	movs	r0, #67	; 0x43
 8007b1e:	f7f9 fefc 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b22:	2043      	movs	r0, #67	; 0x43
 8007b24:	f7f9 ff15 	bl	8001952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b28:	bf00      	nop
 8007b2a:	3728      	adds	r7, #40	; 0x28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	40023800 	.word	0x40023800
 8007b34:	40020000 	.word	0x40020000

08007b38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	4610      	mov	r0, r2
 8007b50:	f7fe fcb4 	bl	80064bc <USBD_LL_SetupStage>
}
 8007b54:	bf00      	nop
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	460b      	mov	r3, r1
 8007b66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007b6e:	78fa      	ldrb	r2, [r7, #3]
 8007b70:	6879      	ldr	r1, [r7, #4]
 8007b72:	4613      	mov	r3, r2
 8007b74:	00db      	lsls	r3, r3, #3
 8007b76:	1a9b      	subs	r3, r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	440b      	add	r3, r1
 8007b7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	78fb      	ldrb	r3, [r7, #3]
 8007b84:	4619      	mov	r1, r3
 8007b86:	f7fe fcee 	bl	8006566 <USBD_LL_DataOutStage>
}
 8007b8a:	bf00      	nop
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b082      	sub	sp, #8
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007ba4:	78fa      	ldrb	r2, [r7, #3]
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	1a9b      	subs	r3, r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	3348      	adds	r3, #72	; 0x48
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	78fb      	ldrb	r3, [r7, #3]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	f7fe fd37 	bl	800662c <USBD_LL_DataInStage>
}
 8007bbe:	bf00      	nop
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b082      	sub	sp, #8
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fe fe4b 	bl	8006870 <USBD_LL_SOF>
}
 8007bda:	bf00      	nop
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007bea:	2301      	movs	r3, #1
 8007bec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d001      	beq.n	8007bfa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007bf6:	f7f8 ffcd 	bl	8000b94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c00:	7bfa      	ldrb	r2, [r7, #15]
 8007c02:	4611      	mov	r1, r2
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fe fdf5 	bl	80067f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fe fda1 	bl	8006758 <USBD_LL_Reset>
}
 8007c16:	bf00      	nop
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe fdf0 	bl	8006814 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	6812      	ldr	r2, [r2, #0]
 8007c42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c46:	f043 0301 	orr.w	r3, r3, #1
 8007c4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c54:	4b04      	ldr	r3, [pc, #16]	; (8007c68 <HAL_PCD_SuspendCallback+0x48>)
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	4a03      	ldr	r2, [pc, #12]	; (8007c68 <HAL_PCD_SuspendCallback+0x48>)
 8007c5a:	f043 0306 	orr.w	r3, r3, #6
 8007c5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c60:	bf00      	nop
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	e000ed00 	.word	0xe000ed00

08007c6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fe fde0 	bl	8006840 <USBD_LL_Resume>
}
 8007c80:	bf00      	nop
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c9a:	78fa      	ldrb	r2, [r7, #3]
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fe fe2e 	bl	8006900 <USBD_LL_IsoOUTIncomplete>
}
 8007ca4:	bf00      	nop
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cbe:	78fa      	ldrb	r2, [r7, #3]
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fe fdf6 	bl	80068b4 <USBD_LL_IsoINIncomplete>
}
 8007cc8:	bf00      	nop
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fe fe34 	bl	800694c <USBD_LL_DevConnected>
}
 8007ce4:	bf00      	nop
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fe fe31 	bl	8006962 <USBD_LL_DevDisconnected>
}
 8007d00:	bf00      	nop
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d13c      	bne.n	8007d92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d18:	4a20      	ldr	r2, [pc, #128]	; (8007d9c <USBD_LL_Init+0x94>)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a1e      	ldr	r2, [pc, #120]	; (8007d9c <USBD_LL_Init+0x94>)
 8007d24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d28:	4b1c      	ldr	r3, [pc, #112]	; (8007d9c <USBD_LL_Init+0x94>)
 8007d2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d30:	4b1a      	ldr	r3, [pc, #104]	; (8007d9c <USBD_LL_Init+0x94>)
 8007d32:	2204      	movs	r2, #4
 8007d34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d36:	4b19      	ldr	r3, [pc, #100]	; (8007d9c <USBD_LL_Init+0x94>)
 8007d38:	2202      	movs	r2, #2
 8007d3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d3c:	4b17      	ldr	r3, [pc, #92]	; (8007d9c <USBD_LL_Init+0x94>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d42:	4b16      	ldr	r3, [pc, #88]	; (8007d9c <USBD_LL_Init+0x94>)
 8007d44:	2202      	movs	r2, #2
 8007d46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d48:	4b14      	ldr	r3, [pc, #80]	; (8007d9c <USBD_LL_Init+0x94>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d4e:	4b13      	ldr	r3, [pc, #76]	; (8007d9c <USBD_LL_Init+0x94>)
 8007d50:	2200      	movs	r2, #0
 8007d52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d54:	4b11      	ldr	r3, [pc, #68]	; (8007d9c <USBD_LL_Init+0x94>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007d5a:	4b10      	ldr	r3, [pc, #64]	; (8007d9c <USBD_LL_Init+0x94>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d60:	4b0e      	ldr	r3, [pc, #56]	; (8007d9c <USBD_LL_Init+0x94>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d66:	480d      	ldr	r0, [pc, #52]	; (8007d9c <USBD_LL_Init+0x94>)
 8007d68:	f7f9 ff92 	bl	8001c90 <HAL_PCD_Init>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d001      	beq.n	8007d76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d72:	f7f8 ff0f 	bl	8000b94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d76:	2180      	movs	r1, #128	; 0x80
 8007d78:	4808      	ldr	r0, [pc, #32]	; (8007d9c <USBD_LL_Init+0x94>)
 8007d7a:	f7fb f8f0 	bl	8002f5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d7e:	2240      	movs	r2, #64	; 0x40
 8007d80:	2100      	movs	r1, #0
 8007d82:	4806      	ldr	r0, [pc, #24]	; (8007d9c <USBD_LL_Init+0x94>)
 8007d84:	f7fb f8a4 	bl	8002ed0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d88:	2280      	movs	r2, #128	; 0x80
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	4803      	ldr	r0, [pc, #12]	; (8007d9c <USBD_LL_Init+0x94>)
 8007d8e:	f7fb f89f 	bl	8002ed0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	20001b7c 	.word	0x20001b7c

08007da0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fa f887 	bl	8001eca <HAL_PCD_Start>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 f942 	bl	800804c <USBD_Get_USB_Status>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	4608      	mov	r0, r1
 8007de0:	4611      	mov	r1, r2
 8007de2:	461a      	mov	r2, r3
 8007de4:	4603      	mov	r3, r0
 8007de6:	70fb      	strb	r3, [r7, #3]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70bb      	strb	r3, [r7, #2]
 8007dec:	4613      	mov	r3, r2
 8007dee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007dfe:	78bb      	ldrb	r3, [r7, #2]
 8007e00:	883a      	ldrh	r2, [r7, #0]
 8007e02:	78f9      	ldrb	r1, [r7, #3]
 8007e04:	f7fa fc6b 	bl	80026de <HAL_PCD_EP_Open>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f000 f91c 	bl	800804c <USBD_Get_USB_Status>
 8007e14:	4603      	mov	r3, r0
 8007e16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e3c:	78fa      	ldrb	r2, [r7, #3]
 8007e3e:	4611      	mov	r1, r2
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fa fcb4 	bl	80027ae <HAL_PCD_EP_Close>
 8007e46:	4603      	mov	r3, r0
 8007e48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 f8fd 	bl	800804c <USBD_Get_USB_Status>
 8007e52:	4603      	mov	r3, r0
 8007e54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e7a:	78fa      	ldrb	r2, [r7, #3]
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fa fd8c 	bl	800299c <HAL_PCD_EP_SetStall>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 f8de 	bl	800804c <USBD_Get_USB_Status>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b084      	sub	sp, #16
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007eb8:	78fa      	ldrb	r2, [r7, #3]
 8007eba:	4611      	mov	r1, r2
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fa fdd1 	bl	8002a64 <HAL_PCD_EP_ClrStall>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f000 f8bf 	bl	800804c <USBD_Get_USB_Status>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ed2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007eee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ef0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	da0b      	bge.n	8007f10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ef8:	78fb      	ldrb	r3, [r7, #3]
 8007efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007efe:	68f9      	ldr	r1, [r7, #12]
 8007f00:	4613      	mov	r3, r2
 8007f02:	00db      	lsls	r3, r3, #3
 8007f04:	1a9b      	subs	r3, r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	440b      	add	r3, r1
 8007f0a:	333e      	adds	r3, #62	; 0x3e
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	e00b      	b.n	8007f28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f10:	78fb      	ldrb	r3, [r7, #3]
 8007f12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f16:	68f9      	ldr	r1, [r7, #12]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	00db      	lsls	r3, r3, #3
 8007f1c:	1a9b      	subs	r3, r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	440b      	add	r3, r1
 8007f22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007f26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f4e:	78fa      	ldrb	r2, [r7, #3]
 8007f50:	4611      	mov	r1, r2
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fa fb9e 	bl	8002694 <HAL_PCD_SetAddress>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 f874 	bl	800804c <USBD_Get_USB_Status>
 8007f64:	4603      	mov	r3, r0
 8007f66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b086      	sub	sp, #24
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	60f8      	str	r0, [r7, #12]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	603b      	str	r3, [r7, #0]
 8007f7e:	460b      	mov	r3, r1
 8007f80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f90:	7af9      	ldrb	r1, [r7, #11]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	f7fa fcb7 	bl	8002908 <HAL_PCD_EP_Transmit>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 f853 	bl	800804c <USBD_Get_USB_Status>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007faa:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3718      	adds	r7, #24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	607a      	str	r2, [r7, #4]
 8007fbe:	603b      	str	r3, [r7, #0]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007fd2:	7af9      	ldrb	r1, [r7, #11]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	f7fa fc33 	bl	8002842 <HAL_PCD_EP_Receive>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 f832 	bl	800804c <USBD_Get_USB_Status>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fec:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b082      	sub	sp, #8
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	460b      	mov	r3, r1
 8008000:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008008:	78fa      	ldrb	r2, [r7, #3]
 800800a:	4611      	mov	r1, r2
 800800c:	4618      	mov	r0, r3
 800800e:	f7fa fc63 	bl	80028d8 <HAL_PCD_EP_GetRxCount>
 8008012:	4603      	mov	r3, r0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008024:	4b03      	ldr	r3, [pc, #12]	; (8008034 <USBD_static_malloc+0x18>)
}
 8008026:	4618      	mov	r0, r3
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	20000210 	.word	0x20000210

08008038 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]

}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	4603      	mov	r3, r0
 8008054:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800805a:	79fb      	ldrb	r3, [r7, #7]
 800805c:	2b03      	cmp	r3, #3
 800805e:	d817      	bhi.n	8008090 <USBD_Get_USB_Status+0x44>
 8008060:	a201      	add	r2, pc, #4	; (adr r2, 8008068 <USBD_Get_USB_Status+0x1c>)
 8008062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008066:	bf00      	nop
 8008068:	08008079 	.word	0x08008079
 800806c:	0800807f 	.word	0x0800807f
 8008070:	08008085 	.word	0x08008085
 8008074:	0800808b 	.word	0x0800808b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]
    break;
 800807c:	e00b      	b.n	8008096 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800807e:	2303      	movs	r3, #3
 8008080:	73fb      	strb	r3, [r7, #15]
    break;
 8008082:	e008      	b.n	8008096 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008084:	2301      	movs	r3, #1
 8008086:	73fb      	strb	r3, [r7, #15]
    break;
 8008088:	e005      	b.n	8008096 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800808a:	2303      	movs	r3, #3
 800808c:	73fb      	strb	r3, [r7, #15]
    break;
 800808e:	e002      	b.n	8008096 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008090:	2303      	movs	r3, #3
 8008092:	73fb      	strb	r3, [r7, #15]
    break;
 8008094:	bf00      	nop
  }
  return usb_status;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <__errno>:
 80080a4:	4b01      	ldr	r3, [pc, #4]	; (80080ac <__errno+0x8>)
 80080a6:	6818      	ldr	r0, [r3, #0]
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	20000180 	.word	0x20000180

080080b0 <__libc_init_array>:
 80080b0:	b570      	push	{r4, r5, r6, lr}
 80080b2:	4d0d      	ldr	r5, [pc, #52]	; (80080e8 <__libc_init_array+0x38>)
 80080b4:	4c0d      	ldr	r4, [pc, #52]	; (80080ec <__libc_init_array+0x3c>)
 80080b6:	1b64      	subs	r4, r4, r5
 80080b8:	10a4      	asrs	r4, r4, #2
 80080ba:	2600      	movs	r6, #0
 80080bc:	42a6      	cmp	r6, r4
 80080be:	d109      	bne.n	80080d4 <__libc_init_array+0x24>
 80080c0:	4d0b      	ldr	r5, [pc, #44]	; (80080f0 <__libc_init_array+0x40>)
 80080c2:	4c0c      	ldr	r4, [pc, #48]	; (80080f4 <__libc_init_array+0x44>)
 80080c4:	f000 fcfe 	bl	8008ac4 <_init>
 80080c8:	1b64      	subs	r4, r4, r5
 80080ca:	10a4      	asrs	r4, r4, #2
 80080cc:	2600      	movs	r6, #0
 80080ce:	42a6      	cmp	r6, r4
 80080d0:	d105      	bne.n	80080de <__libc_init_array+0x2e>
 80080d2:	bd70      	pop	{r4, r5, r6, pc}
 80080d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080d8:	4798      	blx	r3
 80080da:	3601      	adds	r6, #1
 80080dc:	e7ee      	b.n	80080bc <__libc_init_array+0xc>
 80080de:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e2:	4798      	blx	r3
 80080e4:	3601      	adds	r6, #1
 80080e6:	e7f2      	b.n	80080ce <__libc_init_array+0x1e>
 80080e8:	08008cac 	.word	0x08008cac
 80080ec:	08008cac 	.word	0x08008cac
 80080f0:	08008cac 	.word	0x08008cac
 80080f4:	08008cb0 	.word	0x08008cb0

080080f8 <memset>:
 80080f8:	4402      	add	r2, r0
 80080fa:	4603      	mov	r3, r0
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d100      	bne.n	8008102 <memset+0xa>
 8008100:	4770      	bx	lr
 8008102:	f803 1b01 	strb.w	r1, [r3], #1
 8008106:	e7f9      	b.n	80080fc <memset+0x4>

08008108 <siprintf>:
 8008108:	b40e      	push	{r1, r2, r3}
 800810a:	b500      	push	{lr}
 800810c:	b09c      	sub	sp, #112	; 0x70
 800810e:	ab1d      	add	r3, sp, #116	; 0x74
 8008110:	9002      	str	r0, [sp, #8]
 8008112:	9006      	str	r0, [sp, #24]
 8008114:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008118:	4809      	ldr	r0, [pc, #36]	; (8008140 <siprintf+0x38>)
 800811a:	9107      	str	r1, [sp, #28]
 800811c:	9104      	str	r1, [sp, #16]
 800811e:	4909      	ldr	r1, [pc, #36]	; (8008144 <siprintf+0x3c>)
 8008120:	f853 2b04 	ldr.w	r2, [r3], #4
 8008124:	9105      	str	r1, [sp, #20]
 8008126:	6800      	ldr	r0, [r0, #0]
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	a902      	add	r1, sp, #8
 800812c:	f000 f918 	bl	8008360 <_svfiprintf_r>
 8008130:	9b02      	ldr	r3, [sp, #8]
 8008132:	2200      	movs	r2, #0
 8008134:	701a      	strb	r2, [r3, #0]
 8008136:	b01c      	add	sp, #112	; 0x70
 8008138:	f85d eb04 	ldr.w	lr, [sp], #4
 800813c:	b003      	add	sp, #12
 800813e:	4770      	bx	lr
 8008140:	20000180 	.word	0x20000180
 8008144:	ffff0208 	.word	0xffff0208

08008148 <strchr>:
 8008148:	b2c9      	uxtb	r1, r1
 800814a:	4603      	mov	r3, r0
 800814c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008150:	b11a      	cbz	r2, 800815a <strchr+0x12>
 8008152:	428a      	cmp	r2, r1
 8008154:	d1f9      	bne.n	800814a <strchr+0x2>
 8008156:	4618      	mov	r0, r3
 8008158:	4770      	bx	lr
 800815a:	2900      	cmp	r1, #0
 800815c:	bf18      	it	ne
 800815e:	2300      	movne	r3, #0
 8008160:	e7f9      	b.n	8008156 <strchr+0xe>

08008162 <strlcpy>:
 8008162:	b510      	push	{r4, lr}
 8008164:	460b      	mov	r3, r1
 8008166:	b162      	cbz	r2, 8008182 <strlcpy+0x20>
 8008168:	3a01      	subs	r2, #1
 800816a:	d008      	beq.n	800817e <strlcpy+0x1c>
 800816c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8008170:	f800 4b01 	strb.w	r4, [r0], #1
 8008174:	2c00      	cmp	r4, #0
 8008176:	d1f7      	bne.n	8008168 <strlcpy+0x6>
 8008178:	1a58      	subs	r0, r3, r1
 800817a:	3801      	subs	r0, #1
 800817c:	bd10      	pop	{r4, pc}
 800817e:	2200      	movs	r2, #0
 8008180:	7002      	strb	r2, [r0, #0]
 8008182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008186:	2a00      	cmp	r2, #0
 8008188:	d1fb      	bne.n	8008182 <strlcpy+0x20>
 800818a:	e7f5      	b.n	8008178 <strlcpy+0x16>

0800818c <_strtol_l.isra.0>:
 800818c:	2b01      	cmp	r3, #1
 800818e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008192:	d001      	beq.n	8008198 <_strtol_l.isra.0+0xc>
 8008194:	2b24      	cmp	r3, #36	; 0x24
 8008196:	d906      	bls.n	80081a6 <_strtol_l.isra.0+0x1a>
 8008198:	f7ff ff84 	bl	80080a4 <__errno>
 800819c:	2316      	movs	r3, #22
 800819e:	6003      	str	r3, [r0, #0]
 80081a0:	2000      	movs	r0, #0
 80081a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a6:	4f3a      	ldr	r7, [pc, #232]	; (8008290 <_strtol_l.isra.0+0x104>)
 80081a8:	468e      	mov	lr, r1
 80081aa:	4676      	mov	r6, lr
 80081ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80081b0:	5de5      	ldrb	r5, [r4, r7]
 80081b2:	f015 0508 	ands.w	r5, r5, #8
 80081b6:	d1f8      	bne.n	80081aa <_strtol_l.isra.0+0x1e>
 80081b8:	2c2d      	cmp	r4, #45	; 0x2d
 80081ba:	d134      	bne.n	8008226 <_strtol_l.isra.0+0x9a>
 80081bc:	f89e 4000 	ldrb.w	r4, [lr]
 80081c0:	f04f 0801 	mov.w	r8, #1
 80081c4:	f106 0e02 	add.w	lr, r6, #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d05c      	beq.n	8008286 <_strtol_l.isra.0+0xfa>
 80081cc:	2b10      	cmp	r3, #16
 80081ce:	d10c      	bne.n	80081ea <_strtol_l.isra.0+0x5e>
 80081d0:	2c30      	cmp	r4, #48	; 0x30
 80081d2:	d10a      	bne.n	80081ea <_strtol_l.isra.0+0x5e>
 80081d4:	f89e 4000 	ldrb.w	r4, [lr]
 80081d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80081dc:	2c58      	cmp	r4, #88	; 0x58
 80081de:	d14d      	bne.n	800827c <_strtol_l.isra.0+0xf0>
 80081e0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80081e4:	2310      	movs	r3, #16
 80081e6:	f10e 0e02 	add.w	lr, lr, #2
 80081ea:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80081ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 80081f2:	2600      	movs	r6, #0
 80081f4:	fbbc f9f3 	udiv	r9, ip, r3
 80081f8:	4635      	mov	r5, r6
 80081fa:	fb03 ca19 	mls	sl, r3, r9, ip
 80081fe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008202:	2f09      	cmp	r7, #9
 8008204:	d818      	bhi.n	8008238 <_strtol_l.isra.0+0xac>
 8008206:	463c      	mov	r4, r7
 8008208:	42a3      	cmp	r3, r4
 800820a:	dd24      	ble.n	8008256 <_strtol_l.isra.0+0xca>
 800820c:	2e00      	cmp	r6, #0
 800820e:	db1f      	blt.n	8008250 <_strtol_l.isra.0+0xc4>
 8008210:	45a9      	cmp	r9, r5
 8008212:	d31d      	bcc.n	8008250 <_strtol_l.isra.0+0xc4>
 8008214:	d101      	bne.n	800821a <_strtol_l.isra.0+0x8e>
 8008216:	45a2      	cmp	sl, r4
 8008218:	db1a      	blt.n	8008250 <_strtol_l.isra.0+0xc4>
 800821a:	fb05 4503 	mla	r5, r5, r3, r4
 800821e:	2601      	movs	r6, #1
 8008220:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008224:	e7eb      	b.n	80081fe <_strtol_l.isra.0+0x72>
 8008226:	2c2b      	cmp	r4, #43	; 0x2b
 8008228:	bf08      	it	eq
 800822a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800822e:	46a8      	mov	r8, r5
 8008230:	bf08      	it	eq
 8008232:	f106 0e02 	addeq.w	lr, r6, #2
 8008236:	e7c7      	b.n	80081c8 <_strtol_l.isra.0+0x3c>
 8008238:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800823c:	2f19      	cmp	r7, #25
 800823e:	d801      	bhi.n	8008244 <_strtol_l.isra.0+0xb8>
 8008240:	3c37      	subs	r4, #55	; 0x37
 8008242:	e7e1      	b.n	8008208 <_strtol_l.isra.0+0x7c>
 8008244:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008248:	2f19      	cmp	r7, #25
 800824a:	d804      	bhi.n	8008256 <_strtol_l.isra.0+0xca>
 800824c:	3c57      	subs	r4, #87	; 0x57
 800824e:	e7db      	b.n	8008208 <_strtol_l.isra.0+0x7c>
 8008250:	f04f 36ff 	mov.w	r6, #4294967295
 8008254:	e7e4      	b.n	8008220 <_strtol_l.isra.0+0x94>
 8008256:	2e00      	cmp	r6, #0
 8008258:	da05      	bge.n	8008266 <_strtol_l.isra.0+0xda>
 800825a:	2322      	movs	r3, #34	; 0x22
 800825c:	6003      	str	r3, [r0, #0]
 800825e:	4665      	mov	r5, ip
 8008260:	b942      	cbnz	r2, 8008274 <_strtol_l.isra.0+0xe8>
 8008262:	4628      	mov	r0, r5
 8008264:	e79d      	b.n	80081a2 <_strtol_l.isra.0+0x16>
 8008266:	f1b8 0f00 	cmp.w	r8, #0
 800826a:	d000      	beq.n	800826e <_strtol_l.isra.0+0xe2>
 800826c:	426d      	negs	r5, r5
 800826e:	2a00      	cmp	r2, #0
 8008270:	d0f7      	beq.n	8008262 <_strtol_l.isra.0+0xd6>
 8008272:	b10e      	cbz	r6, 8008278 <_strtol_l.isra.0+0xec>
 8008274:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008278:	6011      	str	r1, [r2, #0]
 800827a:	e7f2      	b.n	8008262 <_strtol_l.isra.0+0xd6>
 800827c:	2430      	movs	r4, #48	; 0x30
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1b3      	bne.n	80081ea <_strtol_l.isra.0+0x5e>
 8008282:	2308      	movs	r3, #8
 8008284:	e7b1      	b.n	80081ea <_strtol_l.isra.0+0x5e>
 8008286:	2c30      	cmp	r4, #48	; 0x30
 8008288:	d0a4      	beq.n	80081d4 <_strtol_l.isra.0+0x48>
 800828a:	230a      	movs	r3, #10
 800828c:	e7ad      	b.n	80081ea <_strtol_l.isra.0+0x5e>
 800828e:	bf00      	nop
 8008290:	08008b71 	.word	0x08008b71

08008294 <strtol>:
 8008294:	4613      	mov	r3, r2
 8008296:	460a      	mov	r2, r1
 8008298:	4601      	mov	r1, r0
 800829a:	4802      	ldr	r0, [pc, #8]	; (80082a4 <strtol+0x10>)
 800829c:	6800      	ldr	r0, [r0, #0]
 800829e:	f7ff bf75 	b.w	800818c <_strtol_l.isra.0>
 80082a2:	bf00      	nop
 80082a4:	20000180 	.word	0x20000180

080082a8 <__ssputs_r>:
 80082a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ac:	688e      	ldr	r6, [r1, #8]
 80082ae:	429e      	cmp	r6, r3
 80082b0:	4682      	mov	sl, r0
 80082b2:	460c      	mov	r4, r1
 80082b4:	4690      	mov	r8, r2
 80082b6:	461f      	mov	r7, r3
 80082b8:	d838      	bhi.n	800832c <__ssputs_r+0x84>
 80082ba:	898a      	ldrh	r2, [r1, #12]
 80082bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082c0:	d032      	beq.n	8008328 <__ssputs_r+0x80>
 80082c2:	6825      	ldr	r5, [r4, #0]
 80082c4:	6909      	ldr	r1, [r1, #16]
 80082c6:	eba5 0901 	sub.w	r9, r5, r1
 80082ca:	6965      	ldr	r5, [r4, #20]
 80082cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082d4:	3301      	adds	r3, #1
 80082d6:	444b      	add	r3, r9
 80082d8:	106d      	asrs	r5, r5, #1
 80082da:	429d      	cmp	r5, r3
 80082dc:	bf38      	it	cc
 80082de:	461d      	movcc	r5, r3
 80082e0:	0553      	lsls	r3, r2, #21
 80082e2:	d531      	bpl.n	8008348 <__ssputs_r+0xa0>
 80082e4:	4629      	mov	r1, r5
 80082e6:	f000 fb47 	bl	8008978 <_malloc_r>
 80082ea:	4606      	mov	r6, r0
 80082ec:	b950      	cbnz	r0, 8008304 <__ssputs_r+0x5c>
 80082ee:	230c      	movs	r3, #12
 80082f0:	f8ca 3000 	str.w	r3, [sl]
 80082f4:	89a3      	ldrh	r3, [r4, #12]
 80082f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082fa:	81a3      	strh	r3, [r4, #12]
 80082fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008304:	6921      	ldr	r1, [r4, #16]
 8008306:	464a      	mov	r2, r9
 8008308:	f000 fabe 	bl	8008888 <memcpy>
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008316:	81a3      	strh	r3, [r4, #12]
 8008318:	6126      	str	r6, [r4, #16]
 800831a:	6165      	str	r5, [r4, #20]
 800831c:	444e      	add	r6, r9
 800831e:	eba5 0509 	sub.w	r5, r5, r9
 8008322:	6026      	str	r6, [r4, #0]
 8008324:	60a5      	str	r5, [r4, #8]
 8008326:	463e      	mov	r6, r7
 8008328:	42be      	cmp	r6, r7
 800832a:	d900      	bls.n	800832e <__ssputs_r+0x86>
 800832c:	463e      	mov	r6, r7
 800832e:	4632      	mov	r2, r6
 8008330:	6820      	ldr	r0, [r4, #0]
 8008332:	4641      	mov	r1, r8
 8008334:	f000 fab6 	bl	80088a4 <memmove>
 8008338:	68a3      	ldr	r3, [r4, #8]
 800833a:	6822      	ldr	r2, [r4, #0]
 800833c:	1b9b      	subs	r3, r3, r6
 800833e:	4432      	add	r2, r6
 8008340:	60a3      	str	r3, [r4, #8]
 8008342:	6022      	str	r2, [r4, #0]
 8008344:	2000      	movs	r0, #0
 8008346:	e7db      	b.n	8008300 <__ssputs_r+0x58>
 8008348:	462a      	mov	r2, r5
 800834a:	f000 fb6f 	bl	8008a2c <_realloc_r>
 800834e:	4606      	mov	r6, r0
 8008350:	2800      	cmp	r0, #0
 8008352:	d1e1      	bne.n	8008318 <__ssputs_r+0x70>
 8008354:	6921      	ldr	r1, [r4, #16]
 8008356:	4650      	mov	r0, sl
 8008358:	f000 fabe 	bl	80088d8 <_free_r>
 800835c:	e7c7      	b.n	80082ee <__ssputs_r+0x46>
	...

08008360 <_svfiprintf_r>:
 8008360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	4698      	mov	r8, r3
 8008366:	898b      	ldrh	r3, [r1, #12]
 8008368:	061b      	lsls	r3, r3, #24
 800836a:	b09d      	sub	sp, #116	; 0x74
 800836c:	4607      	mov	r7, r0
 800836e:	460d      	mov	r5, r1
 8008370:	4614      	mov	r4, r2
 8008372:	d50e      	bpl.n	8008392 <_svfiprintf_r+0x32>
 8008374:	690b      	ldr	r3, [r1, #16]
 8008376:	b963      	cbnz	r3, 8008392 <_svfiprintf_r+0x32>
 8008378:	2140      	movs	r1, #64	; 0x40
 800837a:	f000 fafd 	bl	8008978 <_malloc_r>
 800837e:	6028      	str	r0, [r5, #0]
 8008380:	6128      	str	r0, [r5, #16]
 8008382:	b920      	cbnz	r0, 800838e <_svfiprintf_r+0x2e>
 8008384:	230c      	movs	r3, #12
 8008386:	603b      	str	r3, [r7, #0]
 8008388:	f04f 30ff 	mov.w	r0, #4294967295
 800838c:	e0d1      	b.n	8008532 <_svfiprintf_r+0x1d2>
 800838e:	2340      	movs	r3, #64	; 0x40
 8008390:	616b      	str	r3, [r5, #20]
 8008392:	2300      	movs	r3, #0
 8008394:	9309      	str	r3, [sp, #36]	; 0x24
 8008396:	2320      	movs	r3, #32
 8008398:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800839c:	f8cd 800c 	str.w	r8, [sp, #12]
 80083a0:	2330      	movs	r3, #48	; 0x30
 80083a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800854c <_svfiprintf_r+0x1ec>
 80083a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083aa:	f04f 0901 	mov.w	r9, #1
 80083ae:	4623      	mov	r3, r4
 80083b0:	469a      	mov	sl, r3
 80083b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083b6:	b10a      	cbz	r2, 80083bc <_svfiprintf_r+0x5c>
 80083b8:	2a25      	cmp	r2, #37	; 0x25
 80083ba:	d1f9      	bne.n	80083b0 <_svfiprintf_r+0x50>
 80083bc:	ebba 0b04 	subs.w	fp, sl, r4
 80083c0:	d00b      	beq.n	80083da <_svfiprintf_r+0x7a>
 80083c2:	465b      	mov	r3, fp
 80083c4:	4622      	mov	r2, r4
 80083c6:	4629      	mov	r1, r5
 80083c8:	4638      	mov	r0, r7
 80083ca:	f7ff ff6d 	bl	80082a8 <__ssputs_r>
 80083ce:	3001      	adds	r0, #1
 80083d0:	f000 80aa 	beq.w	8008528 <_svfiprintf_r+0x1c8>
 80083d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083d6:	445a      	add	r2, fp
 80083d8:	9209      	str	r2, [sp, #36]	; 0x24
 80083da:	f89a 3000 	ldrb.w	r3, [sl]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 80a2 	beq.w	8008528 <_svfiprintf_r+0x1c8>
 80083e4:	2300      	movs	r3, #0
 80083e6:	f04f 32ff 	mov.w	r2, #4294967295
 80083ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083ee:	f10a 0a01 	add.w	sl, sl, #1
 80083f2:	9304      	str	r3, [sp, #16]
 80083f4:	9307      	str	r3, [sp, #28]
 80083f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083fa:	931a      	str	r3, [sp, #104]	; 0x68
 80083fc:	4654      	mov	r4, sl
 80083fe:	2205      	movs	r2, #5
 8008400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008404:	4851      	ldr	r0, [pc, #324]	; (800854c <_svfiprintf_r+0x1ec>)
 8008406:	f7f7 fef3 	bl	80001f0 <memchr>
 800840a:	9a04      	ldr	r2, [sp, #16]
 800840c:	b9d8      	cbnz	r0, 8008446 <_svfiprintf_r+0xe6>
 800840e:	06d0      	lsls	r0, r2, #27
 8008410:	bf44      	itt	mi
 8008412:	2320      	movmi	r3, #32
 8008414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008418:	0711      	lsls	r1, r2, #28
 800841a:	bf44      	itt	mi
 800841c:	232b      	movmi	r3, #43	; 0x2b
 800841e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008422:	f89a 3000 	ldrb.w	r3, [sl]
 8008426:	2b2a      	cmp	r3, #42	; 0x2a
 8008428:	d015      	beq.n	8008456 <_svfiprintf_r+0xf6>
 800842a:	9a07      	ldr	r2, [sp, #28]
 800842c:	4654      	mov	r4, sl
 800842e:	2000      	movs	r0, #0
 8008430:	f04f 0c0a 	mov.w	ip, #10
 8008434:	4621      	mov	r1, r4
 8008436:	f811 3b01 	ldrb.w	r3, [r1], #1
 800843a:	3b30      	subs	r3, #48	; 0x30
 800843c:	2b09      	cmp	r3, #9
 800843e:	d94e      	bls.n	80084de <_svfiprintf_r+0x17e>
 8008440:	b1b0      	cbz	r0, 8008470 <_svfiprintf_r+0x110>
 8008442:	9207      	str	r2, [sp, #28]
 8008444:	e014      	b.n	8008470 <_svfiprintf_r+0x110>
 8008446:	eba0 0308 	sub.w	r3, r0, r8
 800844a:	fa09 f303 	lsl.w	r3, r9, r3
 800844e:	4313      	orrs	r3, r2
 8008450:	9304      	str	r3, [sp, #16]
 8008452:	46a2      	mov	sl, r4
 8008454:	e7d2      	b.n	80083fc <_svfiprintf_r+0x9c>
 8008456:	9b03      	ldr	r3, [sp, #12]
 8008458:	1d19      	adds	r1, r3, #4
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	9103      	str	r1, [sp, #12]
 800845e:	2b00      	cmp	r3, #0
 8008460:	bfbb      	ittet	lt
 8008462:	425b      	neglt	r3, r3
 8008464:	f042 0202 	orrlt.w	r2, r2, #2
 8008468:	9307      	strge	r3, [sp, #28]
 800846a:	9307      	strlt	r3, [sp, #28]
 800846c:	bfb8      	it	lt
 800846e:	9204      	strlt	r2, [sp, #16]
 8008470:	7823      	ldrb	r3, [r4, #0]
 8008472:	2b2e      	cmp	r3, #46	; 0x2e
 8008474:	d10c      	bne.n	8008490 <_svfiprintf_r+0x130>
 8008476:	7863      	ldrb	r3, [r4, #1]
 8008478:	2b2a      	cmp	r3, #42	; 0x2a
 800847a:	d135      	bne.n	80084e8 <_svfiprintf_r+0x188>
 800847c:	9b03      	ldr	r3, [sp, #12]
 800847e:	1d1a      	adds	r2, r3, #4
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	9203      	str	r2, [sp, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	bfb8      	it	lt
 8008488:	f04f 33ff 	movlt.w	r3, #4294967295
 800848c:	3402      	adds	r4, #2
 800848e:	9305      	str	r3, [sp, #20]
 8008490:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800855c <_svfiprintf_r+0x1fc>
 8008494:	7821      	ldrb	r1, [r4, #0]
 8008496:	2203      	movs	r2, #3
 8008498:	4650      	mov	r0, sl
 800849a:	f7f7 fea9 	bl	80001f0 <memchr>
 800849e:	b140      	cbz	r0, 80084b2 <_svfiprintf_r+0x152>
 80084a0:	2340      	movs	r3, #64	; 0x40
 80084a2:	eba0 000a 	sub.w	r0, r0, sl
 80084a6:	fa03 f000 	lsl.w	r0, r3, r0
 80084aa:	9b04      	ldr	r3, [sp, #16]
 80084ac:	4303      	orrs	r3, r0
 80084ae:	3401      	adds	r4, #1
 80084b0:	9304      	str	r3, [sp, #16]
 80084b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b6:	4826      	ldr	r0, [pc, #152]	; (8008550 <_svfiprintf_r+0x1f0>)
 80084b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084bc:	2206      	movs	r2, #6
 80084be:	f7f7 fe97 	bl	80001f0 <memchr>
 80084c2:	2800      	cmp	r0, #0
 80084c4:	d038      	beq.n	8008538 <_svfiprintf_r+0x1d8>
 80084c6:	4b23      	ldr	r3, [pc, #140]	; (8008554 <_svfiprintf_r+0x1f4>)
 80084c8:	bb1b      	cbnz	r3, 8008512 <_svfiprintf_r+0x1b2>
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	3307      	adds	r3, #7
 80084ce:	f023 0307 	bic.w	r3, r3, #7
 80084d2:	3308      	adds	r3, #8
 80084d4:	9303      	str	r3, [sp, #12]
 80084d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d8:	4433      	add	r3, r6
 80084da:	9309      	str	r3, [sp, #36]	; 0x24
 80084dc:	e767      	b.n	80083ae <_svfiprintf_r+0x4e>
 80084de:	fb0c 3202 	mla	r2, ip, r2, r3
 80084e2:	460c      	mov	r4, r1
 80084e4:	2001      	movs	r0, #1
 80084e6:	e7a5      	b.n	8008434 <_svfiprintf_r+0xd4>
 80084e8:	2300      	movs	r3, #0
 80084ea:	3401      	adds	r4, #1
 80084ec:	9305      	str	r3, [sp, #20]
 80084ee:	4619      	mov	r1, r3
 80084f0:	f04f 0c0a 	mov.w	ip, #10
 80084f4:	4620      	mov	r0, r4
 80084f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084fa:	3a30      	subs	r2, #48	; 0x30
 80084fc:	2a09      	cmp	r2, #9
 80084fe:	d903      	bls.n	8008508 <_svfiprintf_r+0x1a8>
 8008500:	2b00      	cmp	r3, #0
 8008502:	d0c5      	beq.n	8008490 <_svfiprintf_r+0x130>
 8008504:	9105      	str	r1, [sp, #20]
 8008506:	e7c3      	b.n	8008490 <_svfiprintf_r+0x130>
 8008508:	fb0c 2101 	mla	r1, ip, r1, r2
 800850c:	4604      	mov	r4, r0
 800850e:	2301      	movs	r3, #1
 8008510:	e7f0      	b.n	80084f4 <_svfiprintf_r+0x194>
 8008512:	ab03      	add	r3, sp, #12
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	462a      	mov	r2, r5
 8008518:	4b0f      	ldr	r3, [pc, #60]	; (8008558 <_svfiprintf_r+0x1f8>)
 800851a:	a904      	add	r1, sp, #16
 800851c:	4638      	mov	r0, r7
 800851e:	f3af 8000 	nop.w
 8008522:	1c42      	adds	r2, r0, #1
 8008524:	4606      	mov	r6, r0
 8008526:	d1d6      	bne.n	80084d6 <_svfiprintf_r+0x176>
 8008528:	89ab      	ldrh	r3, [r5, #12]
 800852a:	065b      	lsls	r3, r3, #25
 800852c:	f53f af2c 	bmi.w	8008388 <_svfiprintf_r+0x28>
 8008530:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008532:	b01d      	add	sp, #116	; 0x74
 8008534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008538:	ab03      	add	r3, sp, #12
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	462a      	mov	r2, r5
 800853e:	4b06      	ldr	r3, [pc, #24]	; (8008558 <_svfiprintf_r+0x1f8>)
 8008540:	a904      	add	r1, sp, #16
 8008542:	4638      	mov	r0, r7
 8008544:	f000 f87a 	bl	800863c <_printf_i>
 8008548:	e7eb      	b.n	8008522 <_svfiprintf_r+0x1c2>
 800854a:	bf00      	nop
 800854c:	08008c71 	.word	0x08008c71
 8008550:	08008c7b 	.word	0x08008c7b
 8008554:	00000000 	.word	0x00000000
 8008558:	080082a9 	.word	0x080082a9
 800855c:	08008c77 	.word	0x08008c77

08008560 <_printf_common>:
 8008560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008564:	4616      	mov	r6, r2
 8008566:	4699      	mov	r9, r3
 8008568:	688a      	ldr	r2, [r1, #8]
 800856a:	690b      	ldr	r3, [r1, #16]
 800856c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008570:	4293      	cmp	r3, r2
 8008572:	bfb8      	it	lt
 8008574:	4613      	movlt	r3, r2
 8008576:	6033      	str	r3, [r6, #0]
 8008578:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800857c:	4607      	mov	r7, r0
 800857e:	460c      	mov	r4, r1
 8008580:	b10a      	cbz	r2, 8008586 <_printf_common+0x26>
 8008582:	3301      	adds	r3, #1
 8008584:	6033      	str	r3, [r6, #0]
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	0699      	lsls	r1, r3, #26
 800858a:	bf42      	ittt	mi
 800858c:	6833      	ldrmi	r3, [r6, #0]
 800858e:	3302      	addmi	r3, #2
 8008590:	6033      	strmi	r3, [r6, #0]
 8008592:	6825      	ldr	r5, [r4, #0]
 8008594:	f015 0506 	ands.w	r5, r5, #6
 8008598:	d106      	bne.n	80085a8 <_printf_common+0x48>
 800859a:	f104 0a19 	add.w	sl, r4, #25
 800859e:	68e3      	ldr	r3, [r4, #12]
 80085a0:	6832      	ldr	r2, [r6, #0]
 80085a2:	1a9b      	subs	r3, r3, r2
 80085a4:	42ab      	cmp	r3, r5
 80085a6:	dc26      	bgt.n	80085f6 <_printf_common+0x96>
 80085a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085ac:	1e13      	subs	r3, r2, #0
 80085ae:	6822      	ldr	r2, [r4, #0]
 80085b0:	bf18      	it	ne
 80085b2:	2301      	movne	r3, #1
 80085b4:	0692      	lsls	r2, r2, #26
 80085b6:	d42b      	bmi.n	8008610 <_printf_common+0xb0>
 80085b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085bc:	4649      	mov	r1, r9
 80085be:	4638      	mov	r0, r7
 80085c0:	47c0      	blx	r8
 80085c2:	3001      	adds	r0, #1
 80085c4:	d01e      	beq.n	8008604 <_printf_common+0xa4>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	68e5      	ldr	r5, [r4, #12]
 80085ca:	6832      	ldr	r2, [r6, #0]
 80085cc:	f003 0306 	and.w	r3, r3, #6
 80085d0:	2b04      	cmp	r3, #4
 80085d2:	bf08      	it	eq
 80085d4:	1aad      	subeq	r5, r5, r2
 80085d6:	68a3      	ldr	r3, [r4, #8]
 80085d8:	6922      	ldr	r2, [r4, #16]
 80085da:	bf0c      	ite	eq
 80085dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085e0:	2500      	movne	r5, #0
 80085e2:	4293      	cmp	r3, r2
 80085e4:	bfc4      	itt	gt
 80085e6:	1a9b      	subgt	r3, r3, r2
 80085e8:	18ed      	addgt	r5, r5, r3
 80085ea:	2600      	movs	r6, #0
 80085ec:	341a      	adds	r4, #26
 80085ee:	42b5      	cmp	r5, r6
 80085f0:	d11a      	bne.n	8008628 <_printf_common+0xc8>
 80085f2:	2000      	movs	r0, #0
 80085f4:	e008      	b.n	8008608 <_printf_common+0xa8>
 80085f6:	2301      	movs	r3, #1
 80085f8:	4652      	mov	r2, sl
 80085fa:	4649      	mov	r1, r9
 80085fc:	4638      	mov	r0, r7
 80085fe:	47c0      	blx	r8
 8008600:	3001      	adds	r0, #1
 8008602:	d103      	bne.n	800860c <_printf_common+0xac>
 8008604:	f04f 30ff 	mov.w	r0, #4294967295
 8008608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860c:	3501      	adds	r5, #1
 800860e:	e7c6      	b.n	800859e <_printf_common+0x3e>
 8008610:	18e1      	adds	r1, r4, r3
 8008612:	1c5a      	adds	r2, r3, #1
 8008614:	2030      	movs	r0, #48	; 0x30
 8008616:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800861a:	4422      	add	r2, r4
 800861c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008624:	3302      	adds	r3, #2
 8008626:	e7c7      	b.n	80085b8 <_printf_common+0x58>
 8008628:	2301      	movs	r3, #1
 800862a:	4622      	mov	r2, r4
 800862c:	4649      	mov	r1, r9
 800862e:	4638      	mov	r0, r7
 8008630:	47c0      	blx	r8
 8008632:	3001      	adds	r0, #1
 8008634:	d0e6      	beq.n	8008604 <_printf_common+0xa4>
 8008636:	3601      	adds	r6, #1
 8008638:	e7d9      	b.n	80085ee <_printf_common+0x8e>
	...

0800863c <_printf_i>:
 800863c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008640:	460c      	mov	r4, r1
 8008642:	4691      	mov	r9, r2
 8008644:	7e27      	ldrb	r7, [r4, #24]
 8008646:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008648:	2f78      	cmp	r7, #120	; 0x78
 800864a:	4680      	mov	r8, r0
 800864c:	469a      	mov	sl, r3
 800864e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008652:	d807      	bhi.n	8008664 <_printf_i+0x28>
 8008654:	2f62      	cmp	r7, #98	; 0x62
 8008656:	d80a      	bhi.n	800866e <_printf_i+0x32>
 8008658:	2f00      	cmp	r7, #0
 800865a:	f000 80d8 	beq.w	800880e <_printf_i+0x1d2>
 800865e:	2f58      	cmp	r7, #88	; 0x58
 8008660:	f000 80a3 	beq.w	80087aa <_printf_i+0x16e>
 8008664:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800866c:	e03a      	b.n	80086e4 <_printf_i+0xa8>
 800866e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008672:	2b15      	cmp	r3, #21
 8008674:	d8f6      	bhi.n	8008664 <_printf_i+0x28>
 8008676:	a001      	add	r0, pc, #4	; (adr r0, 800867c <_printf_i+0x40>)
 8008678:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800867c:	080086d5 	.word	0x080086d5
 8008680:	080086e9 	.word	0x080086e9
 8008684:	08008665 	.word	0x08008665
 8008688:	08008665 	.word	0x08008665
 800868c:	08008665 	.word	0x08008665
 8008690:	08008665 	.word	0x08008665
 8008694:	080086e9 	.word	0x080086e9
 8008698:	08008665 	.word	0x08008665
 800869c:	08008665 	.word	0x08008665
 80086a0:	08008665 	.word	0x08008665
 80086a4:	08008665 	.word	0x08008665
 80086a8:	080087f5 	.word	0x080087f5
 80086ac:	08008719 	.word	0x08008719
 80086b0:	080087d7 	.word	0x080087d7
 80086b4:	08008665 	.word	0x08008665
 80086b8:	08008665 	.word	0x08008665
 80086bc:	08008817 	.word	0x08008817
 80086c0:	08008665 	.word	0x08008665
 80086c4:	08008719 	.word	0x08008719
 80086c8:	08008665 	.word	0x08008665
 80086cc:	08008665 	.word	0x08008665
 80086d0:	080087df 	.word	0x080087df
 80086d4:	680b      	ldr	r3, [r1, #0]
 80086d6:	1d1a      	adds	r2, r3, #4
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	600a      	str	r2, [r1, #0]
 80086dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086e4:	2301      	movs	r3, #1
 80086e6:	e0a3      	b.n	8008830 <_printf_i+0x1f4>
 80086e8:	6825      	ldr	r5, [r4, #0]
 80086ea:	6808      	ldr	r0, [r1, #0]
 80086ec:	062e      	lsls	r6, r5, #24
 80086ee:	f100 0304 	add.w	r3, r0, #4
 80086f2:	d50a      	bpl.n	800870a <_printf_i+0xce>
 80086f4:	6805      	ldr	r5, [r0, #0]
 80086f6:	600b      	str	r3, [r1, #0]
 80086f8:	2d00      	cmp	r5, #0
 80086fa:	da03      	bge.n	8008704 <_printf_i+0xc8>
 80086fc:	232d      	movs	r3, #45	; 0x2d
 80086fe:	426d      	negs	r5, r5
 8008700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008704:	485e      	ldr	r0, [pc, #376]	; (8008880 <_printf_i+0x244>)
 8008706:	230a      	movs	r3, #10
 8008708:	e019      	b.n	800873e <_printf_i+0x102>
 800870a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800870e:	6805      	ldr	r5, [r0, #0]
 8008710:	600b      	str	r3, [r1, #0]
 8008712:	bf18      	it	ne
 8008714:	b22d      	sxthne	r5, r5
 8008716:	e7ef      	b.n	80086f8 <_printf_i+0xbc>
 8008718:	680b      	ldr	r3, [r1, #0]
 800871a:	6825      	ldr	r5, [r4, #0]
 800871c:	1d18      	adds	r0, r3, #4
 800871e:	6008      	str	r0, [r1, #0]
 8008720:	0628      	lsls	r0, r5, #24
 8008722:	d501      	bpl.n	8008728 <_printf_i+0xec>
 8008724:	681d      	ldr	r5, [r3, #0]
 8008726:	e002      	b.n	800872e <_printf_i+0xf2>
 8008728:	0669      	lsls	r1, r5, #25
 800872a:	d5fb      	bpl.n	8008724 <_printf_i+0xe8>
 800872c:	881d      	ldrh	r5, [r3, #0]
 800872e:	4854      	ldr	r0, [pc, #336]	; (8008880 <_printf_i+0x244>)
 8008730:	2f6f      	cmp	r7, #111	; 0x6f
 8008732:	bf0c      	ite	eq
 8008734:	2308      	moveq	r3, #8
 8008736:	230a      	movne	r3, #10
 8008738:	2100      	movs	r1, #0
 800873a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800873e:	6866      	ldr	r6, [r4, #4]
 8008740:	60a6      	str	r6, [r4, #8]
 8008742:	2e00      	cmp	r6, #0
 8008744:	bfa2      	ittt	ge
 8008746:	6821      	ldrge	r1, [r4, #0]
 8008748:	f021 0104 	bicge.w	r1, r1, #4
 800874c:	6021      	strge	r1, [r4, #0]
 800874e:	b90d      	cbnz	r5, 8008754 <_printf_i+0x118>
 8008750:	2e00      	cmp	r6, #0
 8008752:	d04d      	beq.n	80087f0 <_printf_i+0x1b4>
 8008754:	4616      	mov	r6, r2
 8008756:	fbb5 f1f3 	udiv	r1, r5, r3
 800875a:	fb03 5711 	mls	r7, r3, r1, r5
 800875e:	5dc7      	ldrb	r7, [r0, r7]
 8008760:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008764:	462f      	mov	r7, r5
 8008766:	42bb      	cmp	r3, r7
 8008768:	460d      	mov	r5, r1
 800876a:	d9f4      	bls.n	8008756 <_printf_i+0x11a>
 800876c:	2b08      	cmp	r3, #8
 800876e:	d10b      	bne.n	8008788 <_printf_i+0x14c>
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	07df      	lsls	r7, r3, #31
 8008774:	d508      	bpl.n	8008788 <_printf_i+0x14c>
 8008776:	6923      	ldr	r3, [r4, #16]
 8008778:	6861      	ldr	r1, [r4, #4]
 800877a:	4299      	cmp	r1, r3
 800877c:	bfde      	ittt	le
 800877e:	2330      	movle	r3, #48	; 0x30
 8008780:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008784:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008788:	1b92      	subs	r2, r2, r6
 800878a:	6122      	str	r2, [r4, #16]
 800878c:	f8cd a000 	str.w	sl, [sp]
 8008790:	464b      	mov	r3, r9
 8008792:	aa03      	add	r2, sp, #12
 8008794:	4621      	mov	r1, r4
 8008796:	4640      	mov	r0, r8
 8008798:	f7ff fee2 	bl	8008560 <_printf_common>
 800879c:	3001      	adds	r0, #1
 800879e:	d14c      	bne.n	800883a <_printf_i+0x1fe>
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295
 80087a4:	b004      	add	sp, #16
 80087a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087aa:	4835      	ldr	r0, [pc, #212]	; (8008880 <_printf_i+0x244>)
 80087ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	680e      	ldr	r6, [r1, #0]
 80087b4:	061f      	lsls	r7, r3, #24
 80087b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80087ba:	600e      	str	r6, [r1, #0]
 80087bc:	d514      	bpl.n	80087e8 <_printf_i+0x1ac>
 80087be:	07d9      	lsls	r1, r3, #31
 80087c0:	bf44      	itt	mi
 80087c2:	f043 0320 	orrmi.w	r3, r3, #32
 80087c6:	6023      	strmi	r3, [r4, #0]
 80087c8:	b91d      	cbnz	r5, 80087d2 <_printf_i+0x196>
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	f023 0320 	bic.w	r3, r3, #32
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	2310      	movs	r3, #16
 80087d4:	e7b0      	b.n	8008738 <_printf_i+0xfc>
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	f043 0320 	orr.w	r3, r3, #32
 80087dc:	6023      	str	r3, [r4, #0]
 80087de:	2378      	movs	r3, #120	; 0x78
 80087e0:	4828      	ldr	r0, [pc, #160]	; (8008884 <_printf_i+0x248>)
 80087e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087e6:	e7e3      	b.n	80087b0 <_printf_i+0x174>
 80087e8:	065e      	lsls	r6, r3, #25
 80087ea:	bf48      	it	mi
 80087ec:	b2ad      	uxthmi	r5, r5
 80087ee:	e7e6      	b.n	80087be <_printf_i+0x182>
 80087f0:	4616      	mov	r6, r2
 80087f2:	e7bb      	b.n	800876c <_printf_i+0x130>
 80087f4:	680b      	ldr	r3, [r1, #0]
 80087f6:	6826      	ldr	r6, [r4, #0]
 80087f8:	6960      	ldr	r0, [r4, #20]
 80087fa:	1d1d      	adds	r5, r3, #4
 80087fc:	600d      	str	r5, [r1, #0]
 80087fe:	0635      	lsls	r5, r6, #24
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	d501      	bpl.n	8008808 <_printf_i+0x1cc>
 8008804:	6018      	str	r0, [r3, #0]
 8008806:	e002      	b.n	800880e <_printf_i+0x1d2>
 8008808:	0671      	lsls	r1, r6, #25
 800880a:	d5fb      	bpl.n	8008804 <_printf_i+0x1c8>
 800880c:	8018      	strh	r0, [r3, #0]
 800880e:	2300      	movs	r3, #0
 8008810:	6123      	str	r3, [r4, #16]
 8008812:	4616      	mov	r6, r2
 8008814:	e7ba      	b.n	800878c <_printf_i+0x150>
 8008816:	680b      	ldr	r3, [r1, #0]
 8008818:	1d1a      	adds	r2, r3, #4
 800881a:	600a      	str	r2, [r1, #0]
 800881c:	681e      	ldr	r6, [r3, #0]
 800881e:	6862      	ldr	r2, [r4, #4]
 8008820:	2100      	movs	r1, #0
 8008822:	4630      	mov	r0, r6
 8008824:	f7f7 fce4 	bl	80001f0 <memchr>
 8008828:	b108      	cbz	r0, 800882e <_printf_i+0x1f2>
 800882a:	1b80      	subs	r0, r0, r6
 800882c:	6060      	str	r0, [r4, #4]
 800882e:	6863      	ldr	r3, [r4, #4]
 8008830:	6123      	str	r3, [r4, #16]
 8008832:	2300      	movs	r3, #0
 8008834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008838:	e7a8      	b.n	800878c <_printf_i+0x150>
 800883a:	6923      	ldr	r3, [r4, #16]
 800883c:	4632      	mov	r2, r6
 800883e:	4649      	mov	r1, r9
 8008840:	4640      	mov	r0, r8
 8008842:	47d0      	blx	sl
 8008844:	3001      	adds	r0, #1
 8008846:	d0ab      	beq.n	80087a0 <_printf_i+0x164>
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	079b      	lsls	r3, r3, #30
 800884c:	d413      	bmi.n	8008876 <_printf_i+0x23a>
 800884e:	68e0      	ldr	r0, [r4, #12]
 8008850:	9b03      	ldr	r3, [sp, #12]
 8008852:	4298      	cmp	r0, r3
 8008854:	bfb8      	it	lt
 8008856:	4618      	movlt	r0, r3
 8008858:	e7a4      	b.n	80087a4 <_printf_i+0x168>
 800885a:	2301      	movs	r3, #1
 800885c:	4632      	mov	r2, r6
 800885e:	4649      	mov	r1, r9
 8008860:	4640      	mov	r0, r8
 8008862:	47d0      	blx	sl
 8008864:	3001      	adds	r0, #1
 8008866:	d09b      	beq.n	80087a0 <_printf_i+0x164>
 8008868:	3501      	adds	r5, #1
 800886a:	68e3      	ldr	r3, [r4, #12]
 800886c:	9903      	ldr	r1, [sp, #12]
 800886e:	1a5b      	subs	r3, r3, r1
 8008870:	42ab      	cmp	r3, r5
 8008872:	dcf2      	bgt.n	800885a <_printf_i+0x21e>
 8008874:	e7eb      	b.n	800884e <_printf_i+0x212>
 8008876:	2500      	movs	r5, #0
 8008878:	f104 0619 	add.w	r6, r4, #25
 800887c:	e7f5      	b.n	800886a <_printf_i+0x22e>
 800887e:	bf00      	nop
 8008880:	08008c82 	.word	0x08008c82
 8008884:	08008c93 	.word	0x08008c93

08008888 <memcpy>:
 8008888:	440a      	add	r2, r1
 800888a:	4291      	cmp	r1, r2
 800888c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008890:	d100      	bne.n	8008894 <memcpy+0xc>
 8008892:	4770      	bx	lr
 8008894:	b510      	push	{r4, lr}
 8008896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800889a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800889e:	4291      	cmp	r1, r2
 80088a0:	d1f9      	bne.n	8008896 <memcpy+0xe>
 80088a2:	bd10      	pop	{r4, pc}

080088a4 <memmove>:
 80088a4:	4288      	cmp	r0, r1
 80088a6:	b510      	push	{r4, lr}
 80088a8:	eb01 0402 	add.w	r4, r1, r2
 80088ac:	d902      	bls.n	80088b4 <memmove+0x10>
 80088ae:	4284      	cmp	r4, r0
 80088b0:	4623      	mov	r3, r4
 80088b2:	d807      	bhi.n	80088c4 <memmove+0x20>
 80088b4:	1e43      	subs	r3, r0, #1
 80088b6:	42a1      	cmp	r1, r4
 80088b8:	d008      	beq.n	80088cc <memmove+0x28>
 80088ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088c2:	e7f8      	b.n	80088b6 <memmove+0x12>
 80088c4:	4402      	add	r2, r0
 80088c6:	4601      	mov	r1, r0
 80088c8:	428a      	cmp	r2, r1
 80088ca:	d100      	bne.n	80088ce <memmove+0x2a>
 80088cc:	bd10      	pop	{r4, pc}
 80088ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088d6:	e7f7      	b.n	80088c8 <memmove+0x24>

080088d8 <_free_r>:
 80088d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088da:	2900      	cmp	r1, #0
 80088dc:	d048      	beq.n	8008970 <_free_r+0x98>
 80088de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088e2:	9001      	str	r0, [sp, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f1a1 0404 	sub.w	r4, r1, #4
 80088ea:	bfb8      	it	lt
 80088ec:	18e4      	addlt	r4, r4, r3
 80088ee:	f000 f8d3 	bl	8008a98 <__malloc_lock>
 80088f2:	4a20      	ldr	r2, [pc, #128]	; (8008974 <_free_r+0x9c>)
 80088f4:	9801      	ldr	r0, [sp, #4]
 80088f6:	6813      	ldr	r3, [r2, #0]
 80088f8:	4615      	mov	r5, r2
 80088fa:	b933      	cbnz	r3, 800890a <_free_r+0x32>
 80088fc:	6063      	str	r3, [r4, #4]
 80088fe:	6014      	str	r4, [r2, #0]
 8008900:	b003      	add	sp, #12
 8008902:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008906:	f000 b8cd 	b.w	8008aa4 <__malloc_unlock>
 800890a:	42a3      	cmp	r3, r4
 800890c:	d90b      	bls.n	8008926 <_free_r+0x4e>
 800890e:	6821      	ldr	r1, [r4, #0]
 8008910:	1862      	adds	r2, r4, r1
 8008912:	4293      	cmp	r3, r2
 8008914:	bf04      	itt	eq
 8008916:	681a      	ldreq	r2, [r3, #0]
 8008918:	685b      	ldreq	r3, [r3, #4]
 800891a:	6063      	str	r3, [r4, #4]
 800891c:	bf04      	itt	eq
 800891e:	1852      	addeq	r2, r2, r1
 8008920:	6022      	streq	r2, [r4, #0]
 8008922:	602c      	str	r4, [r5, #0]
 8008924:	e7ec      	b.n	8008900 <_free_r+0x28>
 8008926:	461a      	mov	r2, r3
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	b10b      	cbz	r3, 8008930 <_free_r+0x58>
 800892c:	42a3      	cmp	r3, r4
 800892e:	d9fa      	bls.n	8008926 <_free_r+0x4e>
 8008930:	6811      	ldr	r1, [r2, #0]
 8008932:	1855      	adds	r5, r2, r1
 8008934:	42a5      	cmp	r5, r4
 8008936:	d10b      	bne.n	8008950 <_free_r+0x78>
 8008938:	6824      	ldr	r4, [r4, #0]
 800893a:	4421      	add	r1, r4
 800893c:	1854      	adds	r4, r2, r1
 800893e:	42a3      	cmp	r3, r4
 8008940:	6011      	str	r1, [r2, #0]
 8008942:	d1dd      	bne.n	8008900 <_free_r+0x28>
 8008944:	681c      	ldr	r4, [r3, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	6053      	str	r3, [r2, #4]
 800894a:	4421      	add	r1, r4
 800894c:	6011      	str	r1, [r2, #0]
 800894e:	e7d7      	b.n	8008900 <_free_r+0x28>
 8008950:	d902      	bls.n	8008958 <_free_r+0x80>
 8008952:	230c      	movs	r3, #12
 8008954:	6003      	str	r3, [r0, #0]
 8008956:	e7d3      	b.n	8008900 <_free_r+0x28>
 8008958:	6825      	ldr	r5, [r4, #0]
 800895a:	1961      	adds	r1, r4, r5
 800895c:	428b      	cmp	r3, r1
 800895e:	bf04      	itt	eq
 8008960:	6819      	ldreq	r1, [r3, #0]
 8008962:	685b      	ldreq	r3, [r3, #4]
 8008964:	6063      	str	r3, [r4, #4]
 8008966:	bf04      	itt	eq
 8008968:	1949      	addeq	r1, r1, r5
 800896a:	6021      	streq	r1, [r4, #0]
 800896c:	6054      	str	r4, [r2, #4]
 800896e:	e7c7      	b.n	8008900 <_free_r+0x28>
 8008970:	b003      	add	sp, #12
 8008972:	bd30      	pop	{r4, r5, pc}
 8008974:	20000430 	.word	0x20000430

08008978 <_malloc_r>:
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897a:	1ccd      	adds	r5, r1, #3
 800897c:	f025 0503 	bic.w	r5, r5, #3
 8008980:	3508      	adds	r5, #8
 8008982:	2d0c      	cmp	r5, #12
 8008984:	bf38      	it	cc
 8008986:	250c      	movcc	r5, #12
 8008988:	2d00      	cmp	r5, #0
 800898a:	4606      	mov	r6, r0
 800898c:	db01      	blt.n	8008992 <_malloc_r+0x1a>
 800898e:	42a9      	cmp	r1, r5
 8008990:	d903      	bls.n	800899a <_malloc_r+0x22>
 8008992:	230c      	movs	r3, #12
 8008994:	6033      	str	r3, [r6, #0]
 8008996:	2000      	movs	r0, #0
 8008998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800899a:	f000 f87d 	bl	8008a98 <__malloc_lock>
 800899e:	4921      	ldr	r1, [pc, #132]	; (8008a24 <_malloc_r+0xac>)
 80089a0:	680a      	ldr	r2, [r1, #0]
 80089a2:	4614      	mov	r4, r2
 80089a4:	b99c      	cbnz	r4, 80089ce <_malloc_r+0x56>
 80089a6:	4f20      	ldr	r7, [pc, #128]	; (8008a28 <_malloc_r+0xb0>)
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	b923      	cbnz	r3, 80089b6 <_malloc_r+0x3e>
 80089ac:	4621      	mov	r1, r4
 80089ae:	4630      	mov	r0, r6
 80089b0:	f000 f862 	bl	8008a78 <_sbrk_r>
 80089b4:	6038      	str	r0, [r7, #0]
 80089b6:	4629      	mov	r1, r5
 80089b8:	4630      	mov	r0, r6
 80089ba:	f000 f85d 	bl	8008a78 <_sbrk_r>
 80089be:	1c43      	adds	r3, r0, #1
 80089c0:	d123      	bne.n	8008a0a <_malloc_r+0x92>
 80089c2:	230c      	movs	r3, #12
 80089c4:	6033      	str	r3, [r6, #0]
 80089c6:	4630      	mov	r0, r6
 80089c8:	f000 f86c 	bl	8008aa4 <__malloc_unlock>
 80089cc:	e7e3      	b.n	8008996 <_malloc_r+0x1e>
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	1b5b      	subs	r3, r3, r5
 80089d2:	d417      	bmi.n	8008a04 <_malloc_r+0x8c>
 80089d4:	2b0b      	cmp	r3, #11
 80089d6:	d903      	bls.n	80089e0 <_malloc_r+0x68>
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	441c      	add	r4, r3
 80089dc:	6025      	str	r5, [r4, #0]
 80089de:	e004      	b.n	80089ea <_malloc_r+0x72>
 80089e0:	6863      	ldr	r3, [r4, #4]
 80089e2:	42a2      	cmp	r2, r4
 80089e4:	bf0c      	ite	eq
 80089e6:	600b      	streq	r3, [r1, #0]
 80089e8:	6053      	strne	r3, [r2, #4]
 80089ea:	4630      	mov	r0, r6
 80089ec:	f000 f85a 	bl	8008aa4 <__malloc_unlock>
 80089f0:	f104 000b 	add.w	r0, r4, #11
 80089f4:	1d23      	adds	r3, r4, #4
 80089f6:	f020 0007 	bic.w	r0, r0, #7
 80089fa:	1ac2      	subs	r2, r0, r3
 80089fc:	d0cc      	beq.n	8008998 <_malloc_r+0x20>
 80089fe:	1a1b      	subs	r3, r3, r0
 8008a00:	50a3      	str	r3, [r4, r2]
 8008a02:	e7c9      	b.n	8008998 <_malloc_r+0x20>
 8008a04:	4622      	mov	r2, r4
 8008a06:	6864      	ldr	r4, [r4, #4]
 8008a08:	e7cc      	b.n	80089a4 <_malloc_r+0x2c>
 8008a0a:	1cc4      	adds	r4, r0, #3
 8008a0c:	f024 0403 	bic.w	r4, r4, #3
 8008a10:	42a0      	cmp	r0, r4
 8008a12:	d0e3      	beq.n	80089dc <_malloc_r+0x64>
 8008a14:	1a21      	subs	r1, r4, r0
 8008a16:	4630      	mov	r0, r6
 8008a18:	f000 f82e 	bl	8008a78 <_sbrk_r>
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d1dd      	bne.n	80089dc <_malloc_r+0x64>
 8008a20:	e7cf      	b.n	80089c2 <_malloc_r+0x4a>
 8008a22:	bf00      	nop
 8008a24:	20000430 	.word	0x20000430
 8008a28:	20000434 	.word	0x20000434

08008a2c <_realloc_r>:
 8008a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2e:	4607      	mov	r7, r0
 8008a30:	4614      	mov	r4, r2
 8008a32:	460e      	mov	r6, r1
 8008a34:	b921      	cbnz	r1, 8008a40 <_realloc_r+0x14>
 8008a36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	f7ff bf9c 	b.w	8008978 <_malloc_r>
 8008a40:	b922      	cbnz	r2, 8008a4c <_realloc_r+0x20>
 8008a42:	f7ff ff49 	bl	80088d8 <_free_r>
 8008a46:	4625      	mov	r5, r4
 8008a48:	4628      	mov	r0, r5
 8008a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a4c:	f000 f830 	bl	8008ab0 <_malloc_usable_size_r>
 8008a50:	42a0      	cmp	r0, r4
 8008a52:	d20f      	bcs.n	8008a74 <_realloc_r+0x48>
 8008a54:	4621      	mov	r1, r4
 8008a56:	4638      	mov	r0, r7
 8008a58:	f7ff ff8e 	bl	8008978 <_malloc_r>
 8008a5c:	4605      	mov	r5, r0
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d0f2      	beq.n	8008a48 <_realloc_r+0x1c>
 8008a62:	4631      	mov	r1, r6
 8008a64:	4622      	mov	r2, r4
 8008a66:	f7ff ff0f 	bl	8008888 <memcpy>
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4638      	mov	r0, r7
 8008a6e:	f7ff ff33 	bl	80088d8 <_free_r>
 8008a72:	e7e9      	b.n	8008a48 <_realloc_r+0x1c>
 8008a74:	4635      	mov	r5, r6
 8008a76:	e7e7      	b.n	8008a48 <_realloc_r+0x1c>

08008a78 <_sbrk_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d06      	ldr	r5, [pc, #24]	; (8008a94 <_sbrk_r+0x1c>)
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4608      	mov	r0, r1
 8008a82:	602b      	str	r3, [r5, #0]
 8008a84:	f7f8 f936 	bl	8000cf4 <_sbrk>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d102      	bne.n	8008a92 <_sbrk_r+0x1a>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	b103      	cbz	r3, 8008a92 <_sbrk_r+0x1a>
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	20001f84 	.word	0x20001f84

08008a98 <__malloc_lock>:
 8008a98:	4801      	ldr	r0, [pc, #4]	; (8008aa0 <__malloc_lock+0x8>)
 8008a9a:	f000 b811 	b.w	8008ac0 <__retarget_lock_acquire_recursive>
 8008a9e:	bf00      	nop
 8008aa0:	20001f8c 	.word	0x20001f8c

08008aa4 <__malloc_unlock>:
 8008aa4:	4801      	ldr	r0, [pc, #4]	; (8008aac <__malloc_unlock+0x8>)
 8008aa6:	f000 b80c 	b.w	8008ac2 <__retarget_lock_release_recursive>
 8008aaa:	bf00      	nop
 8008aac:	20001f8c 	.word	0x20001f8c

08008ab0 <_malloc_usable_size_r>:
 8008ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ab4:	1f18      	subs	r0, r3, #4
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	bfbc      	itt	lt
 8008aba:	580b      	ldrlt	r3, [r1, r0]
 8008abc:	18c0      	addlt	r0, r0, r3
 8008abe:	4770      	bx	lr

08008ac0 <__retarget_lock_acquire_recursive>:
 8008ac0:	4770      	bx	lr

08008ac2 <__retarget_lock_release_recursive>:
 8008ac2:	4770      	bx	lr

08008ac4 <_init>:
 8008ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac6:	bf00      	nop
 8008ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aca:	bc08      	pop	{r3}
 8008acc:	469e      	mov	lr, r3
 8008ace:	4770      	bx	lr

08008ad0 <_fini>:
 8008ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad2:	bf00      	nop
 8008ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ad6:	bc08      	pop	{r3}
 8008ad8:	469e      	mov	lr, r3
 8008ada:	4770      	bx	lr
