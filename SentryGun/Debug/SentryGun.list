
SentryGun.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  080080d8  080080d8  000180d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082ac  080082ac  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080082ac  080082ac  000182ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082b4  080082b4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082b4  080082b4  000182b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082b8  080082b8  000182b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080082bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c50  200001e8  080084a0  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001e38  080084a0  00021e38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a429  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b2c  00000000  00000000  0003a63d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  0003e170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  0003f2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dae  00000000  00000000  00040258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001607a  00000000  00000000  0005a006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ffa5  00000000  00000000  00070080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100025  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ac8  00000000  00000000  00100078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080080c0 	.word	0x080080c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	080080c0 	.word	0x080080c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <motor_str_init>:
#include "main.h"
#define ENCODER_RESOLUTION			11
#define TIMER_CONF_BOTH_EDGE_T1T2	4

void motor_str_init(motor_str *m, TIM_HandleTypeDef *tim)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
	m->timer = tim;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	601a      	str	r2, [r3, #0]
	m->pulse_count = 0;
 8000598:	6879      	ldr	r1, [r7, #4]
 800059a:	f04f 0200 	mov.w	r2, #0
 800059e:	f04f 0300 	mov.w	r3, #0
 80005a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	m->measured_speed = 0;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
	m->set_target = 0;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	615a      	str	r2, [r3, #20]
	m->actual_PWM = 0;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <motor_update_count>:
void set_target(motor_str *m){
	motor_update_cout(m);
}

void motor_update_count(motor_str *m)
{
 80005c4:	b4b0      	push	{r4, r5, r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

		static uint16_t LastTimerCounter = 0;
		int TimerDif = __HAL_TIM_GET_COUNTER(m->timer) - LastTimerCounter;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d4:	4a15      	ldr	r2, [pc, #84]	; (800062c <motor_update_count+0x68>)
 80005d6:	8812      	ldrh	r2, [r2, #0]
 80005d8:	1a9b      	subs	r3, r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
		if(TimerDif >= 4 || TimerDif <= -4)
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	2b03      	cmp	r3, #3
 80005e0:	dc03      	bgt.n	80005ea <motor_update_count+0x26>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f113 0f03 	cmn.w	r3, #3
 80005e8:	da1a      	bge.n	8000620 <motor_update_count+0x5c>
		{
			TimerDif /= 4;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	da00      	bge.n	80005f2 <motor_update_count+0x2e>
 80005f0:	3303      	adds	r3, #3
 80005f2:	109b      	asrs	r3, r3, #2
 80005f4:	60fb      	str	r3, [r7, #12]
			m->pulse_count += (int8_t)TimerDif;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	b25a      	sxtb	r2, r3
 8000602:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000606:	1884      	adds	r4, r0, r2
 8000608:	eb41 0503 	adc.w	r5, r1, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	e9c3 4502 	strd	r4, r5, [r3, #8]
			LastTimerCounter = __HAL_TIM_GET_COUNTER(m->timer);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800061a:	b29a      	uxth	r2, r3
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <motor_update_count+0x68>)
 800061e:	801a      	strh	r2, [r3, #0]
		}
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	bcb0      	pop	{r4, r5, r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000204 	.word	0x20000204

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <MX_GPIO_Init+0x84>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a1d      	ldr	r2, [pc, #116]	; (80006b4 <MX_GPIO_Init+0x84>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_GPIO_Init+0x84>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <MX_GPIO_Init+0x84>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a16      	ldr	r2, [pc, #88]	; (80006b4 <MX_GPIO_Init+0x84>)
 800065c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_GPIO_Init+0x84>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_GPIO_Init+0x84>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <MX_GPIO_Init+0x84>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_GPIO_Init+0x84>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_GPIO_Init+0x84>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <MX_GPIO_Init+0x84>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_GPIO_Init+0x84>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]

}
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f000 fbb6 	bl	8000e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f832 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f7ff ffb4 	bl	8000630 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80006c8:	f006 fabe 	bl	8006c48 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80006cc:	f000 f9e2 	bl	8000a94 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006d0:	f000 fa38 	bl	8000b44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	motor_str_init(&motorA, &htim1);
 80006d4:	4910      	ldr	r1, [pc, #64]	; (8000718 <main+0x60>)
 80006d6:	4811      	ldr	r0, [pc, #68]	; (800071c <main+0x64>)
 80006d8:	f7ff ff56 	bl	8000588 <motor_str_init>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80006dc:	213c      	movs	r1, #60	; 0x3c
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <main+0x60>)
 80006e0:	f002 fd69 	bl	80031b6 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		receive_usb_message();
 80006e4:	f000 f888 	bl	80007f8 <receive_usb_message>
		motor_update_count(&motorA);
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <main+0x64>)
 80006ea:	f7ff ff6b 	bl	80005c4 <motor_update_count>
		sprintf(message,"EC: %d\n\r",motorA.pulse_count);
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <main+0x64>)
 80006f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80006f4:	490a      	ldr	r1, [pc, #40]	; (8000720 <main+0x68>)
 80006f6:	480b      	ldr	r0, [pc, #44]	; (8000724 <main+0x6c>)
 80006f8:	f007 f804 	bl	8007704 <siprintf>
		CDC_Transmit_FS(message, strlen(message));
 80006fc:	4809      	ldr	r0, [pc, #36]	; (8000724 <main+0x6c>)
 80006fe:	f7ff fd6f 	bl	80001e0 <strlen>
 8000702:	4603      	mov	r3, r0
 8000704:	b29b      	uxth	r3, r3
 8000706:	4619      	mov	r1, r3
 8000708:	4806      	ldr	r0, [pc, #24]	; (8000724 <main+0x6c>)
 800070a:	f006 fb77 	bl	8006dfc <CDC_Transmit_FS>
		HAL_Delay(100);
 800070e:	2064      	movs	r0, #100	; 0x64
 8000710:	f000 fbfe 	bl	8000f10 <HAL_Delay>
	while (1) {
 8000714:	e7e6      	b.n	80006e4 <main+0x2c>
 8000716:	bf00      	nop
 8000718:	20000504 	.word	0x20000504
 800071c:	20000488 	.word	0x20000488
 8000720:	080080d8 	.word	0x080080d8
 8000724:	200004ac 	.word	0x200004ac

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	; 0x50
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	2230      	movs	r2, #48	; 0x30
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f006 ffdc 	bl	80076f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <SystemClock_Config+0xc8>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a26      	ldr	r2, [pc, #152]	; (80007f0 <SystemClock_Config+0xc8>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <SystemClock_Config+0xc8>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <SystemClock_Config+0xcc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a20      	ldr	r2, [pc, #128]	; (80007f4 <SystemClock_Config+0xcc>)
 8000772:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <SystemClock_Config+0xcc>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000784:	2301      	movs	r3, #1
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000792:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000798:	2319      	movs	r3, #25
 800079a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800079c:	23c0      	movs	r3, #192	; 0xc0
 800079e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 0320 	add.w	r3, r7, #32
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 ffed 	bl	800278c <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b8:	f000 f890 	bl	80008dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2302      	movs	r3, #2
 80007c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	2103      	movs	r1, #3
 80007d8:	4618      	mov	r0, r3
 80007da:	f002 fa4f 	bl	8002c7c <HAL_RCC_ClockConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007e4:	f000 f87a 	bl	80008dc <Error_Handler>
  }
}
 80007e8:	bf00      	nop
 80007ea:	3750      	adds	r7, #80	; 0x50
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000

080007f8 <receive_usb_message>:

/* USER CODE BEGIN 4 */
void receive_usb_message() {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	if (ReceivedDataFlag == 1) {
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <receive_usb_message+0xb4>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d150      	bne.n	80008a6 <receive_usb_message+0xae>
		ReceivedDataFlag = 0;
 8000804:	4b29      	ldr	r3, [pc, #164]	; (80008ac <receive_usb_message+0xb4>)
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
		if (ReceivedData[0] == 'X' && strstr(ReceivedData, "Y")) {
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <receive_usb_message+0xb8>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b58      	cmp	r3, #88	; 0x58
 8000810:	d125      	bne.n	800085e <receive_usb_message+0x66>
 8000812:	2159      	movs	r1, #89	; 0x59
 8000814:	4826      	ldr	r0, [pc, #152]	; (80008b0 <receive_usb_message+0xb8>)
 8000816:	f006 ff95 	bl	8007744 <strchr>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d01e      	beq.n	800085e <receive_usb_message+0x66>
			Xaxis = strtol(ReceivedData + 1, &endXarg, 10);
 8000820:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <receive_usb_message+0xbc>)
 8000822:	220a      	movs	r2, #10
 8000824:	4924      	ldr	r1, [pc, #144]	; (80008b8 <receive_usb_message+0xc0>)
 8000826:	4618      	mov	r0, r3
 8000828:	f007 f832 	bl	8007890 <strtol>
 800082c:	4603      	mov	r3, r0
 800082e:	461a      	mov	r2, r3
 8000830:	4b22      	ldr	r3, [pc, #136]	; (80008bc <receive_usb_message+0xc4>)
 8000832:	601a      	str	r2, [r3, #0]
			Yaxis = strtol(endXarg + 1, NULL, 10);
 8000834:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <receive_usb_message+0xc0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	3301      	adds	r3, #1
 800083a:	220a      	movs	r2, #10
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f007 f826 	bl	8007890 <strtol>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <receive_usb_message+0xc8>)
 800084a:	601a      	str	r2, [r3, #0]
			sprintf(message, "OK X=%d Y=%d", Xaxis, Yaxis);
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <receive_usb_message+0xc4>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <receive_usb_message+0xc8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	491b      	ldr	r1, [pc, #108]	; (80008c4 <receive_usb_message+0xcc>)
 8000856:	481c      	ldr	r0, [pc, #112]	; (80008c8 <receive_usb_message+0xd0>)
 8000858:	f006 ff54 	bl	8007704 <siprintf>
 800085c:	e01a      	b.n	8000894 <receive_usb_message+0x9c>
		} else if (ReceivedData[0] == 'C') {
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <receive_usb_message+0xb8>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b43      	cmp	r3, #67	; 0x43
 8000864:	d104      	bne.n	8000870 <receive_usb_message+0x78>
			//calibrate motor
			sprintf(message, "Calibration in progress...");
 8000866:	4919      	ldr	r1, [pc, #100]	; (80008cc <receive_usb_message+0xd4>)
 8000868:	4817      	ldr	r0, [pc, #92]	; (80008c8 <receive_usb_message+0xd0>)
 800086a:	f006 ff4b 	bl	8007704 <siprintf>
 800086e:	e011      	b.n	8000894 <receive_usb_message+0x9c>
		} else if (ReceivedData[0] == 'F') {
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <receive_usb_message+0xb8>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b46      	cmp	r3, #70	; 0x46
 8000876:	d109      	bne.n	800088c <receive_usb_message+0x94>
			FireFlag++;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <receive_usb_message+0xd8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <receive_usb_message+0xd8>)
 8000880:	6013      	str	r3, [r2, #0]
			sprintf(message, "OK");
 8000882:	4914      	ldr	r1, [pc, #80]	; (80008d4 <receive_usb_message+0xdc>)
 8000884:	4810      	ldr	r0, [pc, #64]	; (80008c8 <receive_usb_message+0xd0>)
 8000886:	f006 ff3d 	bl	8007704 <siprintf>
 800088a:	e003      	b.n	8000894 <receive_usb_message+0x9c>
		} else {
			sprintf(message, "BAD_SYNTAX!");
 800088c:	4912      	ldr	r1, [pc, #72]	; (80008d8 <receive_usb_message+0xe0>)
 800088e:	480e      	ldr	r0, [pc, #56]	; (80008c8 <receive_usb_message+0xd0>)
 8000890:	f006 ff38 	bl	8007704 <siprintf>
		}
		CDC_Transmit_FS(message, strlen(message));
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <receive_usb_message+0xd0>)
 8000896:	f7ff fca3 	bl	80001e0 <strlen>
 800089a:	4603      	mov	r3, r0
 800089c:	b29b      	uxth	r3, r3
 800089e:	4619      	mov	r1, r3
 80008a0:	4809      	ldr	r0, [pc, #36]	; (80008c8 <receive_usb_message+0xd0>)
 80008a2:	f006 faab 	bl	8006dfc <CDC_Transmit_FS>
	}
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000206 	.word	0x20000206
 80008b0:	200004d8 	.word	0x200004d8
 80008b4:	200004d9 	.word	0x200004d9
 80008b8:	20000480 	.word	0x20000480
 80008bc:	20000500 	.word	0x20000500
 80008c0:	200004d4 	.word	0x200004d4
 80008c4:	080080e4 	.word	0x080080e4
 80008c8:	200004ac 	.word	0x200004ac
 80008cc:	080080f4 	.word	0x080080f4
 80008d0:	200004a8 	.word	0x200004a8
 80008d4:	08008110 	.word	0x08008110
 80008d8:	08008114 	.word	0x08008114

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008e4:	e7fe      	b.n	80008e4 <Error_Handler+0x8>
	...

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <HAL_MspInit+0x4c>)
 80008f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fc:	6453      	str	r3, [r2, #68]	; 0x44
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <HAL_MspInit+0x4c>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800093c:	e7fe      	b.n	800093c <NMI_Handler+0x4>

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler+0x4>

0800094a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <UsageFault_Handler+0x4>

08000956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000984:	f000 faa4 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000992:	f002 fc9e 	bl	80032d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000504 	.word	0x20000504

080009a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009a6:	f002 fc94 	bl	80032d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000504 	.word	0x20000504

080009b4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80009ba:	f002 fc8a 	bl	80032d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000504 	.word	0x20000504

080009c8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <TIM1_CC_IRQHandler+0x10>)
 80009ce:	f002 fc80 	bl	80032d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000504 	.word	0x20000504

080009dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <TIM2_IRQHandler+0x10>)
 80009e2:	f002 fc76 	bl	80032d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000438 	.word	0x20000438

080009f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <OTG_FS_IRQHandler+0x10>)
 80009f6:	f000 fe95 	bl	8001724 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20001a20 	.word	0x20001a20

08000a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a0c:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <_sbrk+0x5c>)
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <_sbrk+0x60>)
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d102      	bne.n	8000a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <_sbrk+0x64>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <_sbrk+0x68>)
 8000a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d207      	bcs.n	8000a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a34:	f006 fe34 	bl	80076a0 <__errno>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a42:	e009      	b.n	8000a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <_sbrk+0x64>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <_sbrk+0x64>)
 8000a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a56:	68fb      	ldr	r3, [r7, #12]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20020000 	.word	0x20020000
 8000a64:	00000400 	.word	0x00000400
 8000a68:	20000208 	.word	0x20000208
 8000a6c:	20001e38 	.word	0x20001e38

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	; 0x30
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	2224      	movs	r2, #36	; 0x24
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f006 fe26 	bl	80076f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <MX_TIM1_Init+0xa8>)
 8000ab2:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <MX_TIM1_Init+0xac>)
 8000ab4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <MX_TIM1_Init+0xa8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_TIM1_Init+0xa8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <MX_TIM1_Init+0xa8>)
 8000ac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ac8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_TIM1_Init+0xa8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_TIM1_Init+0xa8>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_TIM1_Init+0xa8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000aec:	230f      	movs	r3, #15
 8000aee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000af4:	2301      	movs	r3, #1
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000afc:	230f      	movs	r3, #15
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	4619      	mov	r1, r3
 8000b06:	480d      	ldr	r0, [pc, #52]	; (8000b3c <MX_TIM1_Init+0xa8>)
 8000b08:	f002 faaf 	bl	800306a <HAL_TIM_Encoder_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000b12:	f7ff fee3 	bl	80008dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	4619      	mov	r1, r3
 8000b22:	4806      	ldr	r0, [pc, #24]	; (8000b3c <MX_TIM1_Init+0xa8>)
 8000b24:	f003 f804 	bl	8003b30 <HAL_TIMEx_MasterConfigSynchronization>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000b2e:	f7ff fed5 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	3730      	adds	r7, #48	; 0x30
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000504 	.word	0x20000504
 8000b40:	40010000 	.word	0x40010000

08000b44 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4a:	f107 0320 	add.w	r3, r7, #32
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]
 8000b62:	615a      	str	r2, [r3, #20]
 8000b64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b66:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <MX_TIM2_Init+0xc4>)
 8000b68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5-1;
 8000b6e:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <MX_TIM2_Init+0xc4>)
 8000b70:	2204      	movs	r2, #4
 8000b72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <MX_TIM2_Init+0xc4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000b7a:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <MX_TIM2_Init+0xc4>)
 8000b7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b82:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <MX_TIM2_Init+0xc4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <MX_TIM2_Init+0xc4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b8e:	481e      	ldr	r0, [pc, #120]	; (8000c08 <MX_TIM2_Init+0xc4>)
 8000b90:	f002 fa1c 	bl	8002fcc <HAL_TIM_PWM_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000b9a:	f7ff fe9f 	bl	80008dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	4619      	mov	r1, r3
 8000bac:	4816      	ldr	r0, [pc, #88]	; (8000c08 <MX_TIM2_Init+0xc4>)
 8000bae:	f002 ffbf 	bl	8003b30 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000bb8:	f7ff fe90 	bl	80008dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bbc:	2360      	movs	r3, #96	; 0x60
 8000bbe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <MX_TIM2_Init+0xc4>)
 8000bd4:	f002 fc86 	bl	80034e4 <HAL_TIM_PWM_ConfigChannel>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000bde:	f7ff fe7d 	bl	80008dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2204      	movs	r2, #4
 8000be6:	4619      	mov	r1, r3
 8000be8:	4807      	ldr	r0, [pc, #28]	; (8000c08 <MX_TIM2_Init+0xc4>)
 8000bea:	f002 fc7b 	bl	80034e4 <HAL_TIM_PWM_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000bf4:	f7ff fe72 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bf8:	4803      	ldr	r0, [pc, #12]	; (8000c08 <MX_TIM2_Init+0xc4>)
 8000bfa:	f000 f895 	bl	8000d28 <HAL_TIM_MspPostInit>

}
 8000bfe:	bf00      	nop
 8000c00:	3728      	adds	r7, #40	; 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000438 	.word	0x20000438

08000c0c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a29      	ldr	r2, [pc, #164]	; (8000cd0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d14c      	bne.n	8000cc8 <HAL_TIM_Encoder_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	4a27      	ldr	r2, [pc, #156]	; (8000cd4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M1E_OUT_A_Pin|M1E_OUT_B_Pin;
 8000c66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	4815      	ldr	r0, [pc, #84]	; (8000cd8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8000c84:	f000 fa7a 	bl	800117c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2018      	movs	r0, #24
 8000c8e:	f000 fa3e 	bl	800110e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000c92:	2018      	movs	r0, #24
 8000c94:	f000 fa57 	bl	8001146 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2019      	movs	r0, #25
 8000c9e:	f000 fa36 	bl	800110e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ca2:	2019      	movs	r0, #25
 8000ca4:	f000 fa4f 	bl	8001146 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	201a      	movs	r0, #26
 8000cae:	f000 fa2e 	bl	800110e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000cb2:	201a      	movs	r0, #26
 8000cb4:	f000 fa47 	bl	8001146 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	201b      	movs	r0, #27
 8000cbe:	f000 fa26 	bl	800110e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000cc2:	201b      	movs	r0, #27
 8000cc4:	f000 fa3f 	bl	8001146 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3728      	adds	r7, #40	; 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40010000 	.word	0x40010000
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000

08000cdc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cec:	d115      	bne.n	8000d1a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_TIM_PWM_MspInit+0x48>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <HAL_TIM_PWM_MspInit+0x48>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_TIM_PWM_MspInit+0x48>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	201c      	movs	r0, #28
 8000d10:	f000 f9fd 	bl	800110e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d14:	201c      	movs	r0, #28
 8000d16:	f000 fa16 	bl	8001146 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800

08000d28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d48:	d13b      	bne.n	8000dc2 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <HAL_TIM_MspPostInit+0xa4>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a1e      	ldr	r2, [pc, #120]	; (8000dcc <HAL_TIM_MspPostInit+0xa4>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <HAL_TIM_MspPostInit+0xa4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_TIM_MspPostInit+0xa4>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_TIM_MspPostInit+0xa4>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_TIM_MspPostInit+0xa4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M1PWM_Direct_Pin;
 8000d82:	2320      	movs	r3, #32
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d92:	2301      	movs	r3, #1
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1PWM_Direct_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <HAL_TIM_MspPostInit+0xa8>)
 8000d9e:	f000 f9ed 	bl	800117c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1PWM_Reverse_Pin;
 8000da2:	2308      	movs	r3, #8
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000db2:	2301      	movs	r3, #1
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1PWM_Reverse_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <HAL_TIM_MspPostInit+0xac>)
 8000dbe:	f000 f9dd 	bl	800117c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	; 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	40020400 	.word	0x40020400

08000dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dde:	490e      	ldr	r1, [pc, #56]	; (8000e18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df4:	4c0b      	ldr	r4, [pc, #44]	; (8000e24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e02:	f7ff fe35 	bl	8000a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e06:	f006 fc51 	bl	80076ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0a:	f7ff fc55 	bl	80006b8 <main>
  bx  lr    
 8000e0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000e1c:	080082bc 	.word	0x080082bc
  ldr r2, =_sbss
 8000e20:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8000e24:	20001e38 	.word	0x20001e38

08000e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e30:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <HAL_Init+0x40>)
 8000e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_Init+0x40>)
 8000e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_Init+0x40>)
 8000e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f94f 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5a:	200f      	movs	r0, #15
 8000e5c:	f000 f808 	bl	8000e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e60:	f7ff fd42 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023c00 	.word	0x40023c00

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_InitTick+0x54>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x58>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f967 	bl	8001162 <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00e      	b.n	8000ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d80a      	bhi.n	8000eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f000 f92f 	bl	800110e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <HAL_InitTick+0x5c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	2000054c 	.word	0x2000054c

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	2000054c 	.word	0x2000054c

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff ffee 	bl	8000ef8 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_Delay+0x44>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f36:	bf00      	nop
 8000f38:	f7ff ffde 	bl	8000ef8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4907      	ldr	r1, [pc, #28]	; (8000ff4 <__NVIC_EnableIRQ+0x38>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100

08000ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	; (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	; (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
         );
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c4:	d301      	bcc.n	80010ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00f      	b.n	80010ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <SysTick_Config+0x40>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d2:	210f      	movs	r1, #15
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f7ff ff8e 	bl	8000ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <SysTick_Config+0x40>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <SysTick_Config+0x40>)
 80010e4:	2207      	movs	r2, #7
 80010e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	e000e010 	.word	0xe000e010

080010f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff29 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001120:	f7ff ff3e 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 8001124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	6978      	ldr	r0, [r7, #20]
 800112c:	f7ff ff8e 	bl	800104c <NVIC_EncodePriority>
 8001130:	4602      	mov	r2, r0
 8001132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff5d 	bl	8000ff8 <__NVIC_SetPriority>
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff31 	bl	8000fbc <__NVIC_EnableIRQ>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ffa2 	bl	80010b4 <SysTick_Config>
 8001170:	4603      	mov	r3, r0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	e159      	b.n	800144c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001198:	2201      	movs	r2, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	f040 8148 	bne.w	8001446 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d005      	beq.n	80011ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d130      	bne.n	8001230 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001204:	2201      	movs	r2, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	f003 0201 	and.w	r2, r3, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b03      	cmp	r3, #3
 800123a:	d017      	beq.n	800126c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d123      	bne.n	80012c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	08da      	lsrs	r2, r3, #3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3208      	adds	r2, #8
 8001280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	220f      	movs	r2, #15
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	08da      	lsrs	r2, r3, #3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3208      	adds	r2, #8
 80012ba:	69b9      	ldr	r1, [r7, #24]
 80012bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0203 	and.w	r2, r3, #3
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 80a2 	beq.w	8001446 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b57      	ldr	r3, [pc, #348]	; (8001464 <HAL_GPIO_Init+0x2e8>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a56      	ldr	r2, [pc, #344]	; (8001464 <HAL_GPIO_Init+0x2e8>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b54      	ldr	r3, [pc, #336]	; (8001464 <HAL_GPIO_Init+0x2e8>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800131e:	4a52      	ldr	r2, [pc, #328]	; (8001468 <HAL_GPIO_Init+0x2ec>)
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3302      	adds	r3, #2
 8001326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a49      	ldr	r2, [pc, #292]	; (800146c <HAL_GPIO_Init+0x2f0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d019      	beq.n	800137e <HAL_GPIO_Init+0x202>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a48      	ldr	r2, [pc, #288]	; (8001470 <HAL_GPIO_Init+0x2f4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0x1fe>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a47      	ldr	r2, [pc, #284]	; (8001474 <HAL_GPIO_Init+0x2f8>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00d      	beq.n	8001376 <HAL_GPIO_Init+0x1fa>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a46      	ldr	r2, [pc, #280]	; (8001478 <HAL_GPIO_Init+0x2fc>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d007      	beq.n	8001372 <HAL_GPIO_Init+0x1f6>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a45      	ldr	r2, [pc, #276]	; (800147c <HAL_GPIO_Init+0x300>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_GPIO_Init+0x1f2>
 800136a:	2304      	movs	r3, #4
 800136c:	e008      	b.n	8001380 <HAL_GPIO_Init+0x204>
 800136e:	2307      	movs	r3, #7
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x204>
 8001372:	2303      	movs	r3, #3
 8001374:	e004      	b.n	8001380 <HAL_GPIO_Init+0x204>
 8001376:	2302      	movs	r3, #2
 8001378:	e002      	b.n	8001380 <HAL_GPIO_Init+0x204>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <HAL_GPIO_Init+0x204>
 800137e:	2300      	movs	r3, #0
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	f002 0203 	and.w	r2, r2, #3
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	4093      	lsls	r3, r2
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001390:	4935      	ldr	r1, [pc, #212]	; (8001468 <HAL_GPIO_Init+0x2ec>)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800139e:	4b38      	ldr	r3, [pc, #224]	; (8001480 <HAL_GPIO_Init+0x304>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013c2:	4a2f      	ldr	r2, [pc, #188]	; (8001480 <HAL_GPIO_Init+0x304>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_GPIO_Init+0x304>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ec:	4a24      	ldr	r2, [pc, #144]	; (8001480 <HAL_GPIO_Init+0x304>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f2:	4b23      	ldr	r3, [pc, #140]	; (8001480 <HAL_GPIO_Init+0x304>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001416:	4a1a      	ldr	r2, [pc, #104]	; (8001480 <HAL_GPIO_Init+0x304>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_GPIO_Init+0x304>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001440:	4a0f      	ldr	r2, [pc, #60]	; (8001480 <HAL_GPIO_Init+0x304>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3301      	adds	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2b0f      	cmp	r3, #15
 8001450:	f67f aea2 	bls.w	8001198 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40013800 	.word	0x40013800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020400 	.word	0x40020400
 8001474:	40020800 	.word	0x40020800
 8001478:	40020c00 	.word	0x40020c00
 800147c:	40021000 	.word	0x40021000
 8001480:	40013c00 	.word	0x40013c00

08001484 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001486:	b08f      	sub	sp, #60	; 0x3c
 8001488:	af0a      	add	r7, sp, #40	; 0x28
 800148a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e10f      	b.n	80016b6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d106      	bne.n	80014b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f005 fdeb 	bl	800708c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2203      	movs	r2, #3
 80014ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f002 fcc2 	bl	8003e5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	687e      	ldr	r6, [r7, #4]
 80014e2:	466d      	mov	r5, sp
 80014e4:	f106 0410 	add.w	r4, r6, #16
 80014e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80014f8:	1d33      	adds	r3, r6, #4
 80014fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014fc:	6838      	ldr	r0, [r7, #0]
 80014fe:	f002 fb99 	bl	8003c34 <USB_CoreInit>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e0d0      	b.n	80016b6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f002 fcb0 	bl	8003e80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e04a      	b.n	80015bc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001526:	7bfa      	ldrb	r2, [r7, #15]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	333d      	adds	r3, #61	; 0x3d
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	333c      	adds	r3, #60	; 0x3c
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	b298      	uxth	r0, r3
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	3342      	adds	r3, #66	; 0x42
 8001562:	4602      	mov	r2, r0
 8001564:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	333f      	adds	r3, #63	; 0x3f
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	1a9b      	subs	r3, r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	3344      	adds	r3, #68	; 0x44
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	1a9b      	subs	r3, r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	3348      	adds	r3, #72	; 0x48
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	1a9b      	subs	r3, r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	3350      	adds	r3, #80	; 0x50
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	3301      	adds	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d3af      	bcc.n	8001526 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	73fb      	strb	r3, [r7, #15]
 80015ca:	e044      	b.n	8001656 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	1a9b      	subs	r3, r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015e2:	7bfa      	ldrb	r2, [r7, #15]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	1a9b      	subs	r3, r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	1a9b      	subs	r3, r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	440b      	add	r3, r1
 800161c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	1a9b      	subs	r3, r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	1a9b      	subs	r3, r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	440b      	add	r3, r1
 8001648:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	3301      	adds	r3, #1
 8001654:	73fb      	strb	r3, [r7, #15]
 8001656:	7bfa      	ldrb	r2, [r7, #15]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	d3b5      	bcc.n	80015cc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	687e      	ldr	r6, [r7, #4]
 8001668:	466d      	mov	r5, sp
 800166a:	f106 0410 	add.w	r4, r6, #16
 800166e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001676:	e894 0003 	ldmia.w	r4, {r0, r1}
 800167a:	e885 0003 	stmia.w	r5, {r0, r1}
 800167e:	1d33      	adds	r3, r6, #4
 8001680:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001682:	6838      	ldr	r0, [r7, #0]
 8001684:	f002 fc48 	bl	8003f18 <USB_DevInit>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d005      	beq.n	800169a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2202      	movs	r2, #2
 8001692:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e00d      	b.n	80016b6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 fcc4 	bl	800503c <USB_DevDisconnect>

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_PCD_Start+0x1c>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e020      	b.n	800171c <HAL_PCD_Start+0x5e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d109      	bne.n	80016fe <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d005      	beq.n	80016fe <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f002 fb9a 	bl	8003e3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f003 fc74 	bl	8004ffa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b08d      	sub	sp, #52	; 0x34
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f003 fd32 	bl	80051a4 <USB_GetMode>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	f040 839d 	bne.w	8001e82 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f003 fc96 	bl	800507e <USB_ReadInterrupts>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 8393 	beq.w	8001e80 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f003 fc8d 	bl	800507e <USB_ReadInterrupts>
 8001764:	4603      	mov	r3, r0
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b02      	cmp	r3, #2
 800176c:	d107      	bne.n	800177e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	695a      	ldr	r2, [r3, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f002 0202 	and.w	r2, r2, #2
 800177c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f003 fc7b 	bl	800507e <USB_ReadInterrupts>
 8001788:	4603      	mov	r3, r0
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	2b10      	cmp	r3, #16
 8001790:	d161      	bne.n	8001856 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	699a      	ldr	r2, [r3, #24]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0210 	bic.w	r2, r2, #16
 80017a0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	f003 020f 	and.w	r2, r3, #15
 80017ae:	4613      	mov	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	3304      	adds	r3, #4
 80017c0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	0c5b      	lsrs	r3, r3, #17
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d124      	bne.n	8001818 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d035      	beq.n	8001846 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	6a38      	ldr	r0, [r7, #32]
 80017ee:	f003 fab2 	bl	8004d56 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017fe:	441a      	add	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	699a      	ldr	r2, [r3, #24]
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001810:	441a      	add	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	619a      	str	r2, [r3, #24]
 8001816:	e016      	b.n	8001846 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	0c5b      	lsrs	r3, r3, #17
 800181c:	f003 030f 	and.w	r3, r3, #15
 8001820:	2b06      	cmp	r3, #6
 8001822:	d110      	bne.n	8001846 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800182a:	2208      	movs	r2, #8
 800182c:	4619      	mov	r1, r3
 800182e:	6a38      	ldr	r0, [r7, #32]
 8001830:	f003 fa91 	bl	8004d56 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	699a      	ldr	r2, [r3, #24]
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001840:	441a      	add	r2, r3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	699a      	ldr	r2, [r3, #24]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f042 0210 	orr.w	r2, r2, #16
 8001854:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f003 fc0f 	bl	800507e <USB_ReadInterrupts>
 8001860:	4603      	mov	r3, r0
 8001862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001866:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800186a:	d16e      	bne.n	800194a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f003 fc15 	bl	80050a4 <USB_ReadDevAllOutEpInterrupt>
 800187a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800187c:	e062      	b.n	8001944 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800187e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d057      	beq.n	8001938 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f003 fc3a 	bl	800510c <USB_ReadDevOutEPInterrupt>
 8001898:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00c      	beq.n	80018be <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	015a      	lsls	r2, r3, #5
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018b0:	461a      	mov	r2, r3
 80018b2:	2301      	movs	r3, #1
 80018b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 fdb1 	bl	8002420 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00c      	beq.n	80018e2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	015a      	lsls	r2, r3, #5
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018d4:	461a      	mov	r2, r3
 80018d6:	2308      	movs	r3, #8
 80018d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80018da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 feab 	bl	8002638 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	015a      	lsls	r2, r3, #5
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	4413      	add	r3, r2
 80018f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018f8:	461a      	mov	r2, r3
 80018fa:	2310      	movs	r3, #16
 80018fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	015a      	lsls	r2, r3, #5
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	4413      	add	r3, r2
 8001910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001914:	461a      	mov	r2, r3
 8001916:	2320      	movs	r3, #32
 8001918:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d009      	beq.n	8001938 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	015a      	lsls	r2, r3, #5
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	4413      	add	r3, r2
 800192c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001930:	461a      	mov	r2, r3
 8001932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001936:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	3301      	adds	r3, #1
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800193e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001940:	085b      	lsrs	r3, r3, #1
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001946:	2b00      	cmp	r3, #0
 8001948:	d199      	bne.n	800187e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f003 fb95 	bl	800507e <USB_ReadInterrupts>
 8001954:	4603      	mov	r3, r0
 8001956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800195a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800195e:	f040 80c0 	bne.w	8001ae2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f003 fbb6 	bl	80050d8 <USB_ReadDevAllInEpInterrupt>
 800196c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001972:	e0b2      	b.n	8001ada <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 80a7 	beq.w	8001ace <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f003 fbdc 	bl	8005148 <USB_ReadDevInEPInterrupt>
 8001990:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d057      	beq.n	8001a4c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	2201      	movs	r2, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69f9      	ldr	r1, [r7, #28]
 80019b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019bc:	4013      	ands	r3, r2
 80019be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	015a      	lsls	r2, r3, #5
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	4413      	add	r3, r2
 80019c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019cc:	461a      	mov	r2, r3
 80019ce:	2301      	movs	r3, #1
 80019d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d132      	bne.n	8001a40 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019de:	4613      	mov	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	1a9b      	subs	r3, r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	3348      	adds	r3, #72	; 0x48
 80019ea:	6819      	ldr	r1, [r3, #0]
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f0:	4613      	mov	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4403      	add	r3, r0
 80019fa:	3344      	adds	r3, #68	; 0x44
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4419      	add	r1, r3
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4403      	add	r3, r0
 8001a0e:	3348      	adds	r3, #72	; 0x48
 8001a10:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d113      	bne.n	8001a40 <HAL_PCD_IRQHandler+0x31c>
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	3350      	adds	r3, #80	; 0x50
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d108      	bne.n	8001a40 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a38:	461a      	mov	r2, r3
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	f003 fbe4 	bl	8005208 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	4619      	mov	r1, r3
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f005 fba1 	bl	800718e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d008      	beq.n	8001a68 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	015a      	lsls	r2, r3, #5
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a62:	461a      	mov	r2, r3
 8001a64:	2308      	movs	r3, #8
 8001a66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d008      	beq.n	8001a84 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	015a      	lsls	r2, r3, #5
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a7e:	461a      	mov	r2, r3
 8001a80:	2310      	movs	r3, #16
 8001a82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d008      	beq.n	8001aa0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	015a      	lsls	r2, r3, #5
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	2340      	movs	r3, #64	; 0x40
 8001a9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d008      	beq.n	8001abc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	015a      	lsls	r2, r3, #5
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	2302      	movs	r3, #2
 8001aba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 fc1b 	bl	8002304 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad6:	085b      	lsrs	r3, r3, #1
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f47f af49 	bne.w	8001974 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 fac9 	bl	800507e <USB_ReadInterrupts>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001af6:	d122      	bne.n	8001b3e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	69fa      	ldr	r2, [r7, #28]
 8001b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d108      	bne.n	8001b28 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b1e:	2100      	movs	r1, #0
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fe27 	bl	8002774 <HAL_PCDEx_LPM_Callback>
 8001b26:	e002      	b.n	8001b2e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f005 fb9d 	bl	8007268 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 fa9b 	bl	800507e <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b52:	d112      	bne.n	8001b7a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d102      	bne.n	8001b6a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f005 fb59 	bl	800721c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695a      	ldr	r2, [r3, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b78:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f003 fa7d 	bl	800507e <USB_ReadInterrupts>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b8e:	f040 80c7 	bne.w	8001d20 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2110      	movs	r1, #16
 8001bac:	4618      	mov	r0, r3
 8001bae:	f002 fb17 	bl	80041e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bb6:	e056      	b.n	8001c66 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bba:	015a      	lsls	r2, r3, #5
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bce:	015a      	lsls	r2, r3, #5
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bdc:	0151      	lsls	r1, r2, #5
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	440a      	add	r2, r1
 8001be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001be6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bea:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bee:	015a      	lsls	r2, r3, #5
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bfc:	0151      	lsls	r1, r2, #5
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	440a      	add	r2, r1
 8001c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0e:	015a      	lsls	r2, r3, #5
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c1e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c22:	015a      	lsls	r2, r3, #5
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c30:	0151      	lsls	r1, r2, #5
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	440a      	add	r2, r1
 8001c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c42:	015a      	lsls	r2, r3, #5
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	4413      	add	r3, r2
 8001c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c50:	0151      	lsls	r1, r2, #5
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	440a      	add	r2, r1
 8001c56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c5e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c62:	3301      	adds	r3, #1
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d3a3      	bcc.n	8001bb8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	69fa      	ldr	r2, [r7, #28]
 8001c7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c7e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c82:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d016      	beq.n	8001cba <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c9c:	f043 030b 	orr.w	r3, r3, #11
 8001ca0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cb2:	f043 030b 	orr.w	r3, r3, #11
 8001cb6:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb8:	e015      	b.n	8001ce6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ccc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001cd0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ce0:	f043 030b 	orr.w	r3, r3, #11
 8001ce4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cf4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001cf8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6818      	ldr	r0, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f003 fa7c 	bl	8005208 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 f9aa 	bl	800507e <USB_ReadInterrupts>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d34:	d124      	bne.n	8001d80 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 fa40 	bl	80051c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 faa8 	bl	800429a <USB_GetDevSpeed>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681c      	ldr	r4, [r3, #0]
 8001d56:	f001 f92d 	bl	8002fb4 <HAL_RCC_GetHCLKFreq>
 8001d5a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	4620      	mov	r0, r4
 8001d66:	f001 ffc7 	bl	8003cf8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f005 fa37 	bl	80071de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f003 f97a 	bl	800507e <USB_ReadInterrupts>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d10a      	bne.n	8001daa <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f005 fa14 	bl	80071c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695a      	ldr	r2, [r3, #20]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f002 0208 	and.w	r2, r2, #8
 8001da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 f965 	bl	800507e <USB_ReadInterrupts>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dbe:	d10f      	bne.n	8001de0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	4619      	mov	r1, r3
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f005 fa6c 	bl	80072a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f003 f94a 	bl	800507e <USB_ReadInterrupts>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001df4:	d10f      	bne.n	8001e16 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f005 fa3f 	bl	8007284 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695a      	ldr	r2, [r3, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f003 f92f 	bl	800507e <USB_ReadInterrupts>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2a:	d10a      	bne.n	8001e42 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f005 fa4d 	bl	80072cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f003 f919 	bl	800507e <USB_ReadInterrupts>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d115      	bne.n	8001e82 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f005 fa3d 	bl	80072e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	e000      	b.n	8001e82 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001e80:	bf00      	nop
    }
  }
}
 8001e82:	3734      	adds	r7, #52	; 0x34
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd90      	pop	{r4, r7, pc}

08001e88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_PCD_SetAddress+0x1a>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e013      	b.n	8001eca <HAL_PCD_SetAddress+0x42>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	78fa      	ldrb	r2, [r7, #3]
 8001eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	78fa      	ldrb	r2, [r7, #3]
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 f877 	bl	8004fae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	4608      	mov	r0, r1
 8001edc:	4611      	mov	r1, r2
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	70fb      	strb	r3, [r7, #3]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	803b      	strh	r3, [r7, #0]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ef0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da0f      	bge.n	8001f18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	f003 020f 	and.w	r2, r3, #15
 8001efe:	4613      	mov	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	1a9b      	subs	r3, r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	3338      	adds	r3, #56	; 0x38
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2201      	movs	r2, #1
 8001f14:	705a      	strb	r2, [r3, #1]
 8001f16:	e00f      	b.n	8001f38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	f003 020f 	and.w	r2, r3, #15
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	1a9b      	subs	r3, r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3304      	adds	r3, #4
 8001f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f44:	883a      	ldrh	r2, [r7, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	78ba      	ldrb	r2, [r7, #2]
 8001f4e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	785b      	ldrb	r3, [r3, #1]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d004      	beq.n	8001f62 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f62:	78bb      	ldrb	r3, [r7, #2]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d102      	bne.n	8001f6e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_PCD_EP_Open+0xaa>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e00e      	b.n	8001f9a <HAL_PCD_EP_Open+0xc8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68f9      	ldr	r1, [r7, #12]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f002 f9aa 	bl	80042e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001f98:	7afb      	ldrb	r3, [r7, #11]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	da0f      	bge.n	8001fd6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 020f 	and.w	r2, r3, #15
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	3338      	adds	r3, #56	; 0x38
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	705a      	strb	r2, [r3, #1]
 8001fd4:	e00f      	b.n	8001ff6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f003 020f 	and.w	r2, r3, #15
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	3304      	adds	r3, #4
 8001fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_PCD_EP_Close+0x6e>
 800200c:	2302      	movs	r3, #2
 800200e:	e00e      	b.n	800202e <HAL_PCD_EP_Close+0x8c>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68f9      	ldr	r1, [r7, #12]
 800201e:	4618      	mov	r0, r3
 8002020:	f002 f9e8 	bl	80043f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
 8002042:	460b      	mov	r3, r1
 8002044:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002046:	7afb      	ldrb	r3, [r7, #11]
 8002048:	f003 020f 	and.w	r2, r3, #15
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4413      	add	r3, r2
 800205c:	3304      	adds	r3, #4
 800205e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	2200      	movs	r2, #0
 8002070:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2200      	movs	r2, #0
 8002076:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002078:	7afb      	ldrb	r3, [r7, #11]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	b2da      	uxtb	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d102      	bne.n	8002092 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002092:	7afb      	ldrb	r3, [r7, #11]
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	2b00      	cmp	r3, #0
 800209a:	d109      	bne.n	80020b0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	6979      	ldr	r1, [r7, #20]
 80020aa:	f002 fcc3 	bl	8004a34 <USB_EP0StartXfer>
 80020ae:	e008      	b.n	80020c2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	6979      	ldr	r1, [r7, #20]
 80020be:	f002 fa75 	bl	80045ac <USB_EPStartXfer>
  }

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	f003 020f 	and.w	r2, r3, #15
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	460b      	mov	r3, r1
 800210a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800210c:	7afb      	ldrb	r3, [r7, #11]
 800210e:	f003 020f 	and.w	r2, r3, #15
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	3338      	adds	r3, #56	; 0x38
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	3304      	adds	r3, #4
 8002122:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2200      	movs	r2, #0
 8002134:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2201      	movs	r2, #1
 800213a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800213c:	7afb      	ldrb	r3, [r7, #11]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	b2da      	uxtb	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d102      	bne.n	8002156 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002156:	7afb      	ldrb	r3, [r7, #11]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	2b00      	cmp	r3, #0
 800215e:	d109      	bne.n	8002174 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	6979      	ldr	r1, [r7, #20]
 800216e:	f002 fc61 	bl	8004a34 <USB_EP0StartXfer>
 8002172:	e008      	b.n	8002186 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	6979      	ldr	r1, [r7, #20]
 8002182:	f002 fa13 	bl	80045ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	f003 020f 	and.w	r2, r3, #15
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d901      	bls.n	80021ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e050      	b.n	8002250 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	da0f      	bge.n	80021d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	f003 020f 	and.w	r2, r3, #15
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	3338      	adds	r3, #56	; 0x38
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	3304      	adds	r3, #4
 80021cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2201      	movs	r2, #1
 80021d2:	705a      	strb	r2, [r3, #1]
 80021d4:	e00d      	b.n	80021f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	4413      	add	r3, r2
 80021e8:	3304      	adds	r3, #4
 80021ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2201      	movs	r2, #1
 80021f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_PCD_EP_SetStall+0x82>
 800220e:	2302      	movs	r3, #2
 8002210:	e01e      	b.n	8002250 <HAL_PCD_EP_SetStall+0xc0>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68f9      	ldr	r1, [r7, #12]
 8002220:	4618      	mov	r0, r3
 8002222:	f002 fdf0 	bl	8004e06 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002226:	78fb      	ldrb	r3, [r7, #3]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10a      	bne.n	8002246 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	b2d9      	uxtb	r1, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002240:	461a      	mov	r2, r3
 8002242:	f002 ffe1 	bl	8005208 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	f003 020f 	and.w	r2, r3, #15
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	429a      	cmp	r2, r3
 8002270:	d901      	bls.n	8002276 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e042      	b.n	80022fc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002276:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800227a:	2b00      	cmp	r3, #0
 800227c:	da0f      	bge.n	800229e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	f003 020f 	and.w	r2, r3, #15
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	3338      	adds	r3, #56	; 0x38
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	3304      	adds	r3, #4
 8002294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	705a      	strb	r2, [r3, #1]
 800229c:	e00f      	b.n	80022be <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	f003 020f 	and.w	r2, r3, #15
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	3304      	adds	r3, #4
 80022b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_PCD_EP_ClrStall+0x86>
 80022da:	2302      	movs	r3, #2
 80022dc:	e00e      	b.n	80022fc <HAL_PCD_EP_ClrStall+0xa4>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68f9      	ldr	r1, [r7, #12]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f002 fdf8 	bl	8004ee2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af02      	add	r7, sp, #8
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	4613      	mov	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	3338      	adds	r3, #56	; 0x38
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	4413      	add	r3, r2
 8002328:	3304      	adds	r3, #4
 800232a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	699a      	ldr	r2, [r3, #24]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	429a      	cmp	r2, r3
 8002336:	d901      	bls.n	800233c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e06c      	b.n	8002416 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	695a      	ldr	r2, [r3, #20]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	429a      	cmp	r2, r3
 8002350:	d902      	bls.n	8002358 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	3303      	adds	r3, #3
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002360:	e02b      	b.n	80023ba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	429a      	cmp	r2, r3
 8002376:	d902      	bls.n	800237e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3303      	adds	r3, #3
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	68d9      	ldr	r1, [r3, #12]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	b2da      	uxtb	r2, r3
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002396:	b2db      	uxtb	r3, r3
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	4603      	mov	r3, r0
 800239c:	6978      	ldr	r0, [r7, #20]
 800239e:	f002 fc9c 	bl	8004cda <USB_WritePacket>

    ep->xfer_buff  += len;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	441a      	add	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	441a      	add	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d809      	bhi.n	80023e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	699a      	ldr	r2, [r3, #24]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023d8:	429a      	cmp	r2, r3
 80023da:	d203      	bcs.n	80023e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1be      	bne.n	8002362 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	695a      	ldr	r2, [r3, #20]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d811      	bhi.n	8002414 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	2201      	movs	r2, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	43db      	mvns	r3, r3
 800240a:	6939      	ldr	r1, [r7, #16]
 800240c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002410:	4013      	ands	r3, r2
 8002412:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3720      	adds	r7, #32
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	333c      	adds	r3, #60	; 0x3c
 8002438:	3304      	adds	r3, #4
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4413      	add	r3, r2
 8002446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b01      	cmp	r3, #1
 8002454:	f040 80a0 	bne.w	8002598 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d015      	beq.n	800248e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4a72      	ldr	r2, [pc, #456]	; (8002630 <PCD_EP_OutXfrComplete_int+0x210>)
 8002466:	4293      	cmp	r3, r2
 8002468:	f240 80dd 	bls.w	8002626 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 80d7 	beq.w	8002626 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002484:	461a      	mov	r2, r3
 8002486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800248a:	6093      	str	r3, [r2, #8]
 800248c:	e0cb      	b.n	8002626 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b00      	cmp	r3, #0
 8002496:	d009      	beq.n	80024ac <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a4:	461a      	mov	r2, r3
 80024a6:	2320      	movs	r3, #32
 80024a8:	6093      	str	r3, [r2, #8]
 80024aa:	e0bc      	b.n	8002626 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 80b7 	bne.w	8002626 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4a5d      	ldr	r2, [pc, #372]	; (8002630 <PCD_EP_OutXfrComplete_int+0x210>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d90f      	bls.n	80024e0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d6:	461a      	mov	r2, r3
 80024d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024dc:	6093      	str	r3, [r2, #8]
 80024de:	e0a2      	b.n	8002626 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024f2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	0159      	lsls	r1, r3, #5
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	440b      	add	r3, r1
 80024fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002506:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4403      	add	r3, r0
 8002516:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800251a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800252e:	6819      	ldr	r1, [r3, #0]
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4403      	add	r3, r0
 800253e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4419      	add	r1, r3
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4403      	add	r3, r0
 8002554:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002558:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d114      	bne.n	800258a <PCD_EP_OutXfrComplete_int+0x16a>
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d108      	bne.n	800258a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002582:	461a      	mov	r2, r3
 8002584:	2101      	movs	r1, #1
 8002586:	f002 fe3f 	bl	8005208 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	4619      	mov	r1, r3
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f004 fde1 	bl	8007158 <HAL_PCD_DataOutStageCallback>
 8002596:	e046      	b.n	8002626 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4a26      	ldr	r2, [pc, #152]	; (8002634 <PCD_EP_OutXfrComplete_int+0x214>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d124      	bne.n	80025ea <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b6:	461a      	mov	r2, r3
 80025b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025bc:	6093      	str	r3, [r2, #8]
 80025be:	e032      	b.n	8002626 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d008      	beq.n	80025dc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d6:	461a      	mov	r2, r3
 80025d8:	2320      	movs	r3, #32
 80025da:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	4619      	mov	r1, r3
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f004 fdb8 	bl	8007158 <HAL_PCD_DataOutStageCallback>
 80025e8:	e01d      	b.n	8002626 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d114      	bne.n	800261a <PCD_EP_OutXfrComplete_int+0x1fa>
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	1a9b      	subs	r3, r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d108      	bne.n	800261a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002612:	461a      	mov	r2, r3
 8002614:	2100      	movs	r1, #0
 8002616:	f002 fdf7 	bl	8005208 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	4619      	mov	r1, r3
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f004 fd99 	bl	8007158 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	4f54300a 	.word	0x4f54300a
 8002634:	4f54310a 	.word	0x4f54310a

08002638 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	333c      	adds	r3, #60	; 0x3c
 8002650:	3304      	adds	r3, #4
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4413      	add	r3, r2
 800265e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4a15      	ldr	r2, [pc, #84]	; (80026c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d90e      	bls.n	800268c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002674:	2b00      	cmp	r3, #0
 8002676:	d009      	beq.n	800268c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4413      	add	r3, r2
 8002680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002684:	461a      	mov	r2, r3
 8002686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800268a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f004 fd51 	bl	8007134 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d90c      	bls.n	80026b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d108      	bne.n	80026b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026ac:	461a      	mov	r2, r3
 80026ae:	2101      	movs	r1, #1
 80026b0:	f002 fdaa 	bl	8005208 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	4f54300a 	.word	0x4f54300a

080026c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	70fb      	strb	r3, [r7, #3]
 80026d0:	4613      	mov	r3, r2
 80026d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d107      	bne.n	80026f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026e2:	883b      	ldrh	r3, [r7, #0]
 80026e4:	0419      	lsls	r1, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28
 80026f0:	e028      	b.n	8002744 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	0c1b      	lsrs	r3, r3, #16
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	4413      	add	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]
 8002704:	e00d      	b.n	8002722 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	3340      	adds	r3, #64	; 0x40
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	0c1b      	lsrs	r3, r3, #16
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	4413      	add	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	3301      	adds	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	3b01      	subs	r3, #1
 8002728:	429a      	cmp	r2, r3
 800272a:	d3ec      	bcc.n	8002706 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800272c:	883b      	ldrh	r3, [r7, #0]
 800272e:	0418      	lsls	r0, r3, #16
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6819      	ldr	r1, [r3, #0]
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	3b01      	subs	r3, #1
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	4302      	orrs	r2, r0
 800273c:	3340      	adds	r3, #64	; 0x40
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	460b      	mov	r3, r1
 800275c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e264      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d075      	beq.n	8002896 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027aa:	4ba3      	ldr	r3, [pc, #652]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d00c      	beq.n	80027d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b6:	4ba0      	ldr	r3, [pc, #640]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d112      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c2:	4b9d      	ldr	r3, [pc, #628]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ce:	d10b      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	4b99      	ldr	r3, [pc, #612]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d05b      	beq.n	8002894 <HAL_RCC_OscConfig+0x108>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d157      	bne.n	8002894 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e23f      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f0:	d106      	bne.n	8002800 <HAL_RCC_OscConfig+0x74>
 80027f2:	4b91      	ldr	r3, [pc, #580]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a90      	ldr	r2, [pc, #576]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e01d      	b.n	800283c <HAL_RCC_OscConfig+0xb0>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x98>
 800280a:	4b8b      	ldr	r3, [pc, #556]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a8a      	ldr	r2, [pc, #552]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b88      	ldr	r3, [pc, #544]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a87      	ldr	r2, [pc, #540]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0xb0>
 8002824:	4b84      	ldr	r3, [pc, #528]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a83      	ldr	r2, [pc, #524]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800282a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b81      	ldr	r3, [pc, #516]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a80      	ldr	r2, [pc, #512]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800283a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7fe fb58 	bl	8000ef8 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284c:	f7fe fb54 	bl	8000ef8 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e204      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b76      	ldr	r3, [pc, #472]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0xc0>
 800286a:	e014      	b.n	8002896 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe fb44 	bl	8000ef8 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002874:	f7fe fb40 	bl	8000ef8 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e1f0      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002886:	4b6c      	ldr	r3, [pc, #432]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0xe8>
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d063      	beq.n	800296a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028a2:	4b65      	ldr	r3, [pc, #404]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ae:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d11c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ba:	4b5f      	ldr	r3, [pc, #380]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d116      	bne.n	80028f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	4b5c      	ldr	r3, [pc, #368]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_RCC_OscConfig+0x152>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e1c4      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	4b56      	ldr	r3, [pc, #344]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4952      	ldr	r1, [pc, #328]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	e03a      	b.n	800296a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028fc:	4b4f      	ldr	r3, [pc, #316]	; (8002a3c <HAL_RCC_OscConfig+0x2b0>)
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7fe faf9 	bl	8000ef8 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800290a:	f7fe faf5 	bl	8000ef8 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e1a5      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291c:	4b46      	ldr	r3, [pc, #280]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002928:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4940      	ldr	r1, [pc, #256]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]
 800293c:	e015      	b.n	800296a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293e:	4b3f      	ldr	r3, [pc, #252]	; (8002a3c <HAL_RCC_OscConfig+0x2b0>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7fe fad8 	bl	8000ef8 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800294c:	f7fe fad4 	bl	8000ef8 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e184      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	4b36      	ldr	r3, [pc, #216]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d030      	beq.n	80029d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d016      	beq.n	80029ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297e:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <HAL_RCC_OscConfig+0x2b4>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002984:	f7fe fab8 	bl	8000ef8 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298c:	f7fe fab4 	bl	8000ef8 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e164      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299e:	4b26      	ldr	r3, [pc, #152]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x200>
 80029aa:	e015      	b.n	80029d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ac:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <HAL_RCC_OscConfig+0x2b4>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b2:	f7fe faa1 	bl	8000ef8 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ba:	f7fe fa9d 	bl	8000ef8 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e14d      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029cc:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80029ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f0      	bne.n	80029ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80a0 	beq.w	8002b26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e6:	2300      	movs	r3, #0
 80029e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ea:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10f      	bne.n	8002a16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	4a0e      	ldr	r2, [pc, #56]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a04:	6413      	str	r3, [r2, #64]	; 0x40
 8002a06:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a12:	2301      	movs	r3, #1
 8002a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCC_OscConfig+0x2b8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d121      	bne.n	8002a66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <HAL_RCC_OscConfig+0x2b8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <HAL_RCC_OscConfig+0x2b8>)
 8002a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2e:	f7fe fa63 	bl	8000ef8 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	e011      	b.n	8002a5a <HAL_RCC_OscConfig+0x2ce>
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	42470000 	.word	0x42470000
 8002a40:	42470e80 	.word	0x42470e80
 8002a44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a48:	f7fe fa56 	bl	8000ef8 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e106      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5a:	4b85      	ldr	r3, [pc, #532]	; (8002c70 <HAL_RCC_OscConfig+0x4e4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d106      	bne.n	8002a7c <HAL_RCC_OscConfig+0x2f0>
 8002a6e:	4b81      	ldr	r3, [pc, #516]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	4a80      	ldr	r2, [pc, #512]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7a:	e01c      	b.n	8002ab6 <HAL_RCC_OscConfig+0x32a>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d10c      	bne.n	8002a9e <HAL_RCC_OscConfig+0x312>
 8002a84:	4b7b      	ldr	r3, [pc, #492]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	4a7a      	ldr	r2, [pc, #488]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002a8a:	f043 0304 	orr.w	r3, r3, #4
 8002a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a90:	4b78      	ldr	r3, [pc, #480]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	4a77      	ldr	r2, [pc, #476]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9c:	e00b      	b.n	8002ab6 <HAL_RCC_OscConfig+0x32a>
 8002a9e:	4b75      	ldr	r3, [pc, #468]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	4a74      	ldr	r2, [pc, #464]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aaa:	4b72      	ldr	r3, [pc, #456]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	4a71      	ldr	r2, [pc, #452]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d015      	beq.n	8002aea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abe:	f7fe fa1b 	bl	8000ef8 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7fe fa17 	bl	8000ef8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e0c5      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002adc:	4b65      	ldr	r3, [pc, #404]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ee      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x33a>
 8002ae8:	e014      	b.n	8002b14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aea:	f7fe fa05 	bl	8000ef8 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f7fe fa01 	bl	8000ef8 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e0af      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b08:	4b5a      	ldr	r3, [pc, #360]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1ee      	bne.n	8002af2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d105      	bne.n	8002b26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1a:	4b56      	ldr	r3, [pc, #344]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a55      	ldr	r2, [pc, #340]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 809b 	beq.w	8002c66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b30:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d05c      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d141      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b44:	4b4c      	ldr	r3, [pc, #304]	; (8002c78 <HAL_RCC_OscConfig+0x4ec>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4a:	f7fe f9d5 	bl	8000ef8 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b52:	f7fe f9d1 	bl	8000ef8 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e081      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b64:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f0      	bne.n	8002b52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69da      	ldr	r2, [r3, #28]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	019b      	lsls	r3, r3, #6
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	061b      	lsls	r3, r3, #24
 8002b94:	4937      	ldr	r1, [pc, #220]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b9a:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <HAL_RCC_OscConfig+0x4ec>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fe f9aa 	bl	8000ef8 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe f9a6 	bl	8000ef8 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e056      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bba:	4b2e      	ldr	r3, [pc, #184]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x41c>
 8002bc6:	e04e      	b.n	8002c66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc8:	4b2b      	ldr	r3, [pc, #172]	; (8002c78 <HAL_RCC_OscConfig+0x4ec>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7fe f993 	bl	8000ef8 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd6:	f7fe f98f 	bl	8000ef8 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e03f      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be8:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f0      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x44a>
 8002bf4:	e037      	b.n	8002c66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e032      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c02:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d028      	beq.n	8002c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d121      	bne.n	8002c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d11a      	bne.n	8002c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c32:	4013      	ands	r3, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d111      	bne.n	8002c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	085b      	lsrs	r3, r3, #1
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d107      	bne.n	8002c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d001      	beq.n	8002c66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40007000 	.word	0x40007000
 8002c74:	40023800 	.word	0x40023800
 8002c78:	42470060 	.word	0x42470060

08002c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0cc      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c90:	4b68      	ldr	r3, [pc, #416]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d90c      	bls.n	8002cb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b65      	ldr	r3, [pc, #404]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca6:	4b63      	ldr	r3, [pc, #396]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0b8      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d020      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cd0:	4b59      	ldr	r3, [pc, #356]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4a58      	ldr	r2, [pc, #352]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce8:	4b53      	ldr	r3, [pc, #332]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a52      	ldr	r2, [pc, #328]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf4:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	494d      	ldr	r1, [pc, #308]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d044      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1a:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d119      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e07f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d003      	beq.n	8002d3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e06f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e067      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5a:	4b37      	ldr	r3, [pc, #220]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4934      	ldr	r1, [pc, #208]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d6c:	f7fe f8c4 	bl	8000ef8 <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d74:	f7fe f8c0 	bl	8000ef8 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e04f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 020c 	and.w	r2, r3, #12
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d1eb      	bne.n	8002d74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d20c      	bcs.n	8002dc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e032      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd0:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4916      	ldr	r1, [pc, #88]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	490e      	ldr	r1, [pc, #56]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e02:	f000 f821 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8002e06:	4602      	mov	r2, r0
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	490a      	ldr	r1, [pc, #40]	; (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002e14:	5ccb      	ldrb	r3, [r1, r3]
 8002e16:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1a:	4a09      	ldr	r2, [pc, #36]	; (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fe f824 	bl	8000e70 <HAL_InitTick>

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40023c00 	.word	0x40023c00
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	08008168 	.word	0x08008168
 8002e40:	20000000 	.word	0x20000000
 8002e44:	20000004 	.word	0x20000004

08002e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e48:	b5b0      	push	{r4, r5, r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e4e:	2100      	movs	r1, #0
 8002e50:	6079      	str	r1, [r7, #4]
 8002e52:	2100      	movs	r1, #0
 8002e54:	60f9      	str	r1, [r7, #12]
 8002e56:	2100      	movs	r1, #0
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e5e:	4952      	ldr	r1, [pc, #328]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e60:	6889      	ldr	r1, [r1, #8]
 8002e62:	f001 010c 	and.w	r1, r1, #12
 8002e66:	2908      	cmp	r1, #8
 8002e68:	d00d      	beq.n	8002e86 <HAL_RCC_GetSysClockFreq+0x3e>
 8002e6a:	2908      	cmp	r1, #8
 8002e6c:	f200 8094 	bhi.w	8002f98 <HAL_RCC_GetSysClockFreq+0x150>
 8002e70:	2900      	cmp	r1, #0
 8002e72:	d002      	beq.n	8002e7a <HAL_RCC_GetSysClockFreq+0x32>
 8002e74:	2904      	cmp	r1, #4
 8002e76:	d003      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x38>
 8002e78:	e08e      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e7a:	4b4c      	ldr	r3, [pc, #304]	; (8002fac <HAL_RCC_GetSysClockFreq+0x164>)
 8002e7c:	60bb      	str	r3, [r7, #8]
       break;
 8002e7e:	e08e      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e80:	4b4b      	ldr	r3, [pc, #300]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002e82:	60bb      	str	r3, [r7, #8]
      break;
 8002e84:	e08b      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e86:	4948      	ldr	r1, [pc, #288]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e88:	6849      	ldr	r1, [r1, #4]
 8002e8a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002e8e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e90:	4945      	ldr	r1, [pc, #276]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e92:	6849      	ldr	r1, [r1, #4]
 8002e94:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002e98:	2900      	cmp	r1, #0
 8002e9a:	d024      	beq.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e9c:	4942      	ldr	r1, [pc, #264]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e9e:	6849      	ldr	r1, [r1, #4]
 8002ea0:	0989      	lsrs	r1, r1, #6
 8002ea2:	4608      	mov	r0, r1
 8002ea4:	f04f 0100 	mov.w	r1, #0
 8002ea8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002eac:	f04f 0500 	mov.w	r5, #0
 8002eb0:	ea00 0204 	and.w	r2, r0, r4
 8002eb4:	ea01 0305 	and.w	r3, r1, r5
 8002eb8:	493d      	ldr	r1, [pc, #244]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002eba:	fb01 f003 	mul.w	r0, r1, r3
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	fb01 f102 	mul.w	r1, r1, r2
 8002ec4:	1844      	adds	r4, r0, r1
 8002ec6:	493a      	ldr	r1, [pc, #232]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ec8:	fba2 0101 	umull	r0, r1, r2, r1
 8002ecc:	1863      	adds	r3, r4, r1
 8002ece:	4619      	mov	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	f7fd f9da 	bl	8000290 <__aeabi_uldivmod>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	e04a      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee6:	4b30      	ldr	r3, [pc, #192]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	099b      	lsrs	r3, r3, #6
 8002eec:	461a      	mov	r2, r3
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ef6:	f04f 0100 	mov.w	r1, #0
 8002efa:	ea02 0400 	and.w	r4, r2, r0
 8002efe:	ea03 0501 	and.w	r5, r3, r1
 8002f02:	4620      	mov	r0, r4
 8002f04:	4629      	mov	r1, r5
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	014b      	lsls	r3, r1, #5
 8002f10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f14:	0142      	lsls	r2, r0, #5
 8002f16:	4610      	mov	r0, r2
 8002f18:	4619      	mov	r1, r3
 8002f1a:	1b00      	subs	r0, r0, r4
 8002f1c:	eb61 0105 	sbc.w	r1, r1, r5
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	018b      	lsls	r3, r1, #6
 8002f2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f2e:	0182      	lsls	r2, r0, #6
 8002f30:	1a12      	subs	r2, r2, r0
 8002f32:	eb63 0301 	sbc.w	r3, r3, r1
 8002f36:	f04f 0000 	mov.w	r0, #0
 8002f3a:	f04f 0100 	mov.w	r1, #0
 8002f3e:	00d9      	lsls	r1, r3, #3
 8002f40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f44:	00d0      	lsls	r0, r2, #3
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	1912      	adds	r2, r2, r4
 8002f4c:	eb45 0303 	adc.w	r3, r5, r3
 8002f50:	f04f 0000 	mov.w	r0, #0
 8002f54:	f04f 0100 	mov.w	r1, #0
 8002f58:	0299      	lsls	r1, r3, #10
 8002f5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f5e:	0290      	lsls	r0, r2, #10
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4610      	mov	r0, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	f7fd f98e 	bl	8000290 <__aeabi_uldivmod>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4613      	mov	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	0c1b      	lsrs	r3, r3, #16
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	3301      	adds	r3, #1
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f94:	60bb      	str	r3, [r7, #8]
      break;
 8002f96:	e002      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <HAL_RCC_GetSysClockFreq+0x164>)
 8002f9a:	60bb      	str	r3, [r7, #8]
      break;
 8002f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	00f42400 	.word	0x00f42400
 8002fb0:	017d7840 	.word	0x017d7840

08002fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20000000 	.word	0x20000000

08002fcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e041      	b.n	8003062 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fe72 	bl	8000cdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3304      	adds	r3, #4
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f000 fb5e 	bl	80036cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b086      	sub	sp, #24
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e097      	b.n	80031ae <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fd fdba 	bl	8000c0c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030ae:	f023 0307 	bic.w	r3, r3, #7
 80030b2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3304      	adds	r3, #4
 80030bc:	4619      	mov	r1, r3
 80030be:	4610      	mov	r0, r2
 80030c0:	f000 fb04 	bl	80036cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ec:	f023 0303 	bic.w	r3, r3, #3
 80030f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	021b      	lsls	r3, r3, #8
 80030fc:	4313      	orrs	r3, r2
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800310a:	f023 030c 	bic.w	r3, r3, #12
 800310e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800311a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	4313      	orrs	r3, r2
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	011a      	lsls	r2, r3, #4
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	031b      	lsls	r3, r3, #12
 800313a:	4313      	orrs	r3, r2
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003148:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003150:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	4313      	orrs	r3, r2
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031c6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031ce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031d6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80031de:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d110      	bne.n	8003208 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d102      	bne.n	80031f2 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80031ec:	7b7b      	ldrb	r3, [r7, #13]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d001      	beq.n	80031f6 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e069      	b.n	80032ca <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2202      	movs	r2, #2
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2202      	movs	r2, #2
 8003202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003206:	e031      	b.n	800326c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b04      	cmp	r3, #4
 800320c:	d110      	bne.n	8003230 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800320e:	7bbb      	ldrb	r3, [r7, #14]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d102      	bne.n	800321a <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003214:	7b3b      	ldrb	r3, [r7, #12]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d001      	beq.n	800321e <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e055      	b.n	80032ca <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2202      	movs	r2, #2
 800322a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800322e:	e01d      	b.n	800326c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d108      	bne.n	8003248 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003236:	7bbb      	ldrb	r3, [r7, #14]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d105      	bne.n	8003248 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800323c:	7b7b      	ldrb	r3, [r7, #13]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d102      	bne.n	8003248 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003242:	7b3b      	ldrb	r3, [r7, #12]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d001      	beq.n	800324c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e03e      	b.n	80032ca <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_TIM_Encoder_Start+0xc4>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d008      	beq.n	800328a <HAL_TIM_Encoder_Start+0xd4>
 8003278:	e00f      	b.n	800329a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2201      	movs	r2, #1
 8003280:	2100      	movs	r1, #0
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fc2e 	bl	8003ae4 <TIM_CCxChannelCmd>
      break;
 8003288:	e016      	b.n	80032b8 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2201      	movs	r2, #1
 8003290:	2104      	movs	r1, #4
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fc26 	bl	8003ae4 <TIM_CCxChannelCmd>
      break;
 8003298:	e00e      	b.n	80032b8 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2201      	movs	r2, #1
 80032a0:	2100      	movs	r1, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fc1e 	bl	8003ae4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2201      	movs	r2, #1
 80032ae:	2104      	movs	r1, #4
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fc17 	bl	8003ae4 <TIM_CCxChannelCmd>
      break;
 80032b6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d122      	bne.n	800332e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d11b      	bne.n	800332e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f06f 0202 	mvn.w	r2, #2
 80032fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f9bb 	bl	8003690 <HAL_TIM_IC_CaptureCallback>
 800331a:	e005      	b.n	8003328 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f9ad 	bl	800367c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f9be 	bl	80036a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b04      	cmp	r3, #4
 800333a:	d122      	bne.n	8003382 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b04      	cmp	r3, #4
 8003348:	d11b      	bne.n	8003382 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f06f 0204 	mvn.w	r2, #4
 8003352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f991 	bl	8003690 <HAL_TIM_IC_CaptureCallback>
 800336e:	e005      	b.n	800337c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f983 	bl	800367c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f994 	bl	80036a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b08      	cmp	r3, #8
 800338e:	d122      	bne.n	80033d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b08      	cmp	r3, #8
 800339c:	d11b      	bne.n	80033d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f06f 0208 	mvn.w	r2, #8
 80033a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2204      	movs	r2, #4
 80033ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f967 	bl	8003690 <HAL_TIM_IC_CaptureCallback>
 80033c2:	e005      	b.n	80033d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f959 	bl	800367c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f96a 	bl	80036a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b10      	cmp	r3, #16
 80033e2:	d122      	bne.n	800342a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	2b10      	cmp	r3, #16
 80033f0:	d11b      	bne.n	800342a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f06f 0210 	mvn.w	r2, #16
 80033fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2208      	movs	r2, #8
 8003400:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f93d 	bl	8003690 <HAL_TIM_IC_CaptureCallback>
 8003416:	e005      	b.n	8003424 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f92f 	bl	800367c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f940 	bl	80036a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b01      	cmp	r3, #1
 8003436:	d10e      	bne.n	8003456 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b01      	cmp	r3, #1
 8003444:	d107      	bne.n	8003456 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f06f 0201 	mvn.w	r2, #1
 800344e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f909 	bl	8003668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003460:	2b80      	cmp	r3, #128	; 0x80
 8003462:	d10e      	bne.n	8003482 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	2b80      	cmp	r3, #128	; 0x80
 8003470:	d107      	bne.n	8003482 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800347a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fbcf 	bl	8003c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d10e      	bne.n	80034ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b40      	cmp	r3, #64	; 0x40
 800349c:	d107      	bne.n	80034ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f905 	bl	80036b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d10e      	bne.n	80034da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	d107      	bne.n	80034da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f06f 0220 	mvn.w	r2, #32
 80034d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fb99 	bl	8003c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034fe:	2302      	movs	r3, #2
 8003500:	e0ae      	b.n	8003660 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b0c      	cmp	r3, #12
 800350e:	f200 809f 	bhi.w	8003650 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003512:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003518:	0800354d 	.word	0x0800354d
 800351c:	08003651 	.word	0x08003651
 8003520:	08003651 	.word	0x08003651
 8003524:	08003651 	.word	0x08003651
 8003528:	0800358d 	.word	0x0800358d
 800352c:	08003651 	.word	0x08003651
 8003530:	08003651 	.word	0x08003651
 8003534:	08003651 	.word	0x08003651
 8003538:	080035cf 	.word	0x080035cf
 800353c:	08003651 	.word	0x08003651
 8003540:	08003651 	.word	0x08003651
 8003544:	08003651 	.word	0x08003651
 8003548:	0800360f 	.word	0x0800360f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	4618      	mov	r0, r3
 8003554:	f000 f93a 	bl	80037cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0208 	orr.w	r2, r2, #8
 8003566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0204 	bic.w	r2, r2, #4
 8003576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6999      	ldr	r1, [r3, #24]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	619a      	str	r2, [r3, #24]
      break;
 800358a:	e064      	b.n	8003656 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	4618      	mov	r0, r3
 8003594:	f000 f980 	bl	8003898 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699a      	ldr	r2, [r3, #24]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6999      	ldr	r1, [r3, #24]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	021a      	lsls	r2, r3, #8
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	619a      	str	r2, [r3, #24]
      break;
 80035cc:	e043      	b.n	8003656 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f000 f9cb 	bl	8003970 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0208 	orr.w	r2, r2, #8
 80035e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69da      	ldr	r2, [r3, #28]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0204 	bic.w	r2, r2, #4
 80035f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69d9      	ldr	r1, [r3, #28]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	61da      	str	r2, [r3, #28]
      break;
 800360c:	e023      	b.n	8003656 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68b9      	ldr	r1, [r7, #8]
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fa15 	bl	8003a44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69da      	ldr	r2, [r3, #28]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69d9      	ldr	r1, [r3, #28]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	021a      	lsls	r2, r3, #8
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	61da      	str	r2, [r3, #28]
      break;
 800364e:	e002      	b.n	8003656 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	75fb      	strb	r3, [r7, #23]
      break;
 8003654:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800365e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a34      	ldr	r2, [pc, #208]	; (80037b0 <TIM_Base_SetConfig+0xe4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00f      	beq.n	8003704 <TIM_Base_SetConfig+0x38>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ea:	d00b      	beq.n	8003704 <TIM_Base_SetConfig+0x38>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a31      	ldr	r2, [pc, #196]	; (80037b4 <TIM_Base_SetConfig+0xe8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d007      	beq.n	8003704 <TIM_Base_SetConfig+0x38>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a30      	ldr	r2, [pc, #192]	; (80037b8 <TIM_Base_SetConfig+0xec>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d003      	beq.n	8003704 <TIM_Base_SetConfig+0x38>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a2f      	ldr	r2, [pc, #188]	; (80037bc <TIM_Base_SetConfig+0xf0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d108      	bne.n	8003716 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a25      	ldr	r2, [pc, #148]	; (80037b0 <TIM_Base_SetConfig+0xe4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d01b      	beq.n	8003756 <TIM_Base_SetConfig+0x8a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003724:	d017      	beq.n	8003756 <TIM_Base_SetConfig+0x8a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a22      	ldr	r2, [pc, #136]	; (80037b4 <TIM_Base_SetConfig+0xe8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d013      	beq.n	8003756 <TIM_Base_SetConfig+0x8a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a21      	ldr	r2, [pc, #132]	; (80037b8 <TIM_Base_SetConfig+0xec>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00f      	beq.n	8003756 <TIM_Base_SetConfig+0x8a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a20      	ldr	r2, [pc, #128]	; (80037bc <TIM_Base_SetConfig+0xf0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00b      	beq.n	8003756 <TIM_Base_SetConfig+0x8a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a1f      	ldr	r2, [pc, #124]	; (80037c0 <TIM_Base_SetConfig+0xf4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d007      	beq.n	8003756 <TIM_Base_SetConfig+0x8a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a1e      	ldr	r2, [pc, #120]	; (80037c4 <TIM_Base_SetConfig+0xf8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d003      	beq.n	8003756 <TIM_Base_SetConfig+0x8a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a1d      	ldr	r2, [pc, #116]	; (80037c8 <TIM_Base_SetConfig+0xfc>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d108      	bne.n	8003768 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a08      	ldr	r2, [pc, #32]	; (80037b0 <TIM_Base_SetConfig+0xe4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d103      	bne.n	800379c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	615a      	str	r2, [r3, #20]
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40000400 	.word	0x40000400
 80037b8:	40000800 	.word	0x40000800
 80037bc:	40000c00 	.word	0x40000c00
 80037c0:	40014000 	.word	0x40014000
 80037c4:	40014400 	.word	0x40014400
 80037c8:	40014800 	.word	0x40014800

080037cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	f023 0201 	bic.w	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0303 	bic.w	r3, r3, #3
 8003802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f023 0302 	bic.w	r3, r3, #2
 8003814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a1c      	ldr	r2, [pc, #112]	; (8003894 <TIM_OC1_SetConfig+0xc8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d10c      	bne.n	8003842 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0308 	bic.w	r3, r3, #8
 800382e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f023 0304 	bic.w	r3, r3, #4
 8003840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a13      	ldr	r2, [pc, #76]	; (8003894 <TIM_OC1_SetConfig+0xc8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d111      	bne.n	800386e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	621a      	str	r2, [r3, #32]
}
 8003888:	bf00      	nop
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	40010000 	.word	0x40010000

08003898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	f023 0210 	bic.w	r2, r3, #16
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f023 0320 	bic.w	r3, r3, #32
 80038e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a1e      	ldr	r2, [pc, #120]	; (800396c <TIM_OC2_SetConfig+0xd4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d10d      	bne.n	8003914 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003912:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a15      	ldr	r2, [pc, #84]	; (800396c <TIM_OC2_SetConfig+0xd4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d113      	bne.n	8003944 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003922:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800392a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	621a      	str	r2, [r3, #32]
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40010000 	.word	0x40010000

08003970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a1d      	ldr	r2, [pc, #116]	; (8003a40 <TIM_OC3_SetConfig+0xd0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d10d      	bne.n	80039ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a14      	ldr	r2, [pc, #80]	; (8003a40 <TIM_OC3_SetConfig+0xd0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d113      	bne.n	8003a1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	621a      	str	r2, [r3, #32]
}
 8003a34:	bf00      	nop
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	40010000 	.word	0x40010000

08003a44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	031b      	lsls	r3, r3, #12
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a10      	ldr	r2, [pc, #64]	; (8003ae0 <TIM_OC4_SetConfig+0x9c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d109      	bne.n	8003ab8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	019b      	lsls	r3, r3, #6
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	621a      	str	r2, [r3, #32]
}
 8003ad2:	bf00      	nop
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40010000 	.word	0x40010000

08003ae4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	2201      	movs	r2, #1
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a1a      	ldr	r2, [r3, #32]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	401a      	ands	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1a      	ldr	r2, [r3, #32]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	621a      	str	r2, [r3, #32]
}
 8003b22:	bf00      	nop
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e050      	b.n	8003bea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d018      	beq.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b94:	d013      	beq.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a18      	ldr	r2, [pc, #96]	; (8003bfc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00e      	beq.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a16      	ldr	r2, [pc, #88]	; (8003c00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d009      	beq.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a15      	ldr	r2, [pc, #84]	; (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d004      	beq.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a13      	ldr	r2, [pc, #76]	; (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40010000 	.word	0x40010000
 8003bfc:	40000400 	.word	0x40000400
 8003c00:	40000800 	.word	0x40000800
 8003c04:	40000c00 	.word	0x40000c00
 8003c08:	40014000 	.word	0x40014000

08003c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c34:	b084      	sub	sp, #16
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	f107 001c 	add.w	r0, r7, #28
 8003c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d122      	bne.n	8003c92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d105      	bne.n	8003c86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f001 fb1c 	bl	80052c4 <USB_CoreReset>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	73fb      	strb	r3, [r7, #15]
 8003c90:	e01a      	b.n	8003cc8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f001 fb10 	bl	80052c4 <USB_CoreReset>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d106      	bne.n	8003cbc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
 8003cba:	e005      	b.n	8003cc8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d10b      	bne.n	8003ce6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f043 0206 	orr.w	r2, r3, #6
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f043 0220 	orr.w	r2, r3, #32
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cf2:	b004      	add	sp, #16
 8003cf4:	4770      	bx	lr
	...

08003cf8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	4613      	mov	r3, r2
 8003d04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d06:	79fb      	ldrb	r3, [r7, #7]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d165      	bne.n	8003dd8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4a41      	ldr	r2, [pc, #260]	; (8003e14 <USB_SetTurnaroundTime+0x11c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d906      	bls.n	8003d22 <USB_SetTurnaroundTime+0x2a>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4a40      	ldr	r2, [pc, #256]	; (8003e18 <USB_SetTurnaroundTime+0x120>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d202      	bcs.n	8003d22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d1c:	230f      	movs	r3, #15
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e062      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4a3c      	ldr	r2, [pc, #240]	; (8003e18 <USB_SetTurnaroundTime+0x120>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d306      	bcc.n	8003d38 <USB_SetTurnaroundTime+0x40>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4a3b      	ldr	r2, [pc, #236]	; (8003e1c <USB_SetTurnaroundTime+0x124>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d202      	bcs.n	8003d38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d32:	230e      	movs	r3, #14
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	e057      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4a38      	ldr	r2, [pc, #224]	; (8003e1c <USB_SetTurnaroundTime+0x124>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d306      	bcc.n	8003d4e <USB_SetTurnaroundTime+0x56>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4a37      	ldr	r2, [pc, #220]	; (8003e20 <USB_SetTurnaroundTime+0x128>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d202      	bcs.n	8003d4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d48:	230d      	movs	r3, #13
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	e04c      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	4a33      	ldr	r2, [pc, #204]	; (8003e20 <USB_SetTurnaroundTime+0x128>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d306      	bcc.n	8003d64 <USB_SetTurnaroundTime+0x6c>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4a32      	ldr	r2, [pc, #200]	; (8003e24 <USB_SetTurnaroundTime+0x12c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d802      	bhi.n	8003d64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d5e:	230c      	movs	r3, #12
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	e041      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4a2f      	ldr	r2, [pc, #188]	; (8003e24 <USB_SetTurnaroundTime+0x12c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d906      	bls.n	8003d7a <USB_SetTurnaroundTime+0x82>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4a2e      	ldr	r2, [pc, #184]	; (8003e28 <USB_SetTurnaroundTime+0x130>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d802      	bhi.n	8003d7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d74:	230b      	movs	r3, #11
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	e036      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4a2a      	ldr	r2, [pc, #168]	; (8003e28 <USB_SetTurnaroundTime+0x130>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d906      	bls.n	8003d90 <USB_SetTurnaroundTime+0x98>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4a29      	ldr	r2, [pc, #164]	; (8003e2c <USB_SetTurnaroundTime+0x134>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d802      	bhi.n	8003d90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d8a:	230a      	movs	r3, #10
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	e02b      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4a26      	ldr	r2, [pc, #152]	; (8003e2c <USB_SetTurnaroundTime+0x134>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d906      	bls.n	8003da6 <USB_SetTurnaroundTime+0xae>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4a25      	ldr	r2, [pc, #148]	; (8003e30 <USB_SetTurnaroundTime+0x138>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d202      	bcs.n	8003da6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003da0:	2309      	movs	r3, #9
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	e020      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	4a21      	ldr	r2, [pc, #132]	; (8003e30 <USB_SetTurnaroundTime+0x138>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d306      	bcc.n	8003dbc <USB_SetTurnaroundTime+0xc4>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4a20      	ldr	r2, [pc, #128]	; (8003e34 <USB_SetTurnaroundTime+0x13c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d802      	bhi.n	8003dbc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003db6:	2308      	movs	r3, #8
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	e015      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4a1d      	ldr	r2, [pc, #116]	; (8003e34 <USB_SetTurnaroundTime+0x13c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d906      	bls.n	8003dd2 <USB_SetTurnaroundTime+0xda>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4a1c      	ldr	r2, [pc, #112]	; (8003e38 <USB_SetTurnaroundTime+0x140>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d202      	bcs.n	8003dd2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003dcc:	2307      	movs	r3, #7
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	e00a      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003dd2:	2306      	movs	r3, #6
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	e007      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d102      	bne.n	8003de4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003dde:	2309      	movs	r3, #9
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	e001      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003de4:	2309      	movs	r3, #9
 8003de6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	029b      	lsls	r3, r3, #10
 8003dfc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003e00:	431a      	orrs	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	00d8acbf 	.word	0x00d8acbf
 8003e18:	00e4e1c0 	.word	0x00e4e1c0
 8003e1c:	00f42400 	.word	0x00f42400
 8003e20:	01067380 	.word	0x01067380
 8003e24:	011a499f 	.word	0x011a499f
 8003e28:	01312cff 	.word	0x01312cff
 8003e2c:	014ca43f 	.word	0x014ca43f
 8003e30:	016e3600 	.word	0x016e3600
 8003e34:	01a6ab1f 	.word	0x01a6ab1f
 8003e38:	01e84800 	.word	0x01e84800

08003e3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f043 0201 	orr.w	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f023 0201 	bic.w	r2, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d115      	bne.n	8003ece <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003eae:	2001      	movs	r0, #1
 8003eb0:	f7fd f82e 	bl	8000f10 <HAL_Delay>
      ms++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f001 f972 	bl	80051a4 <USB_GetMode>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d01e      	beq.n	8003f04 <USB_SetCurrentMode+0x84>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b31      	cmp	r3, #49	; 0x31
 8003eca:	d9f0      	bls.n	8003eae <USB_SetCurrentMode+0x2e>
 8003ecc:	e01a      	b.n	8003f04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ece:	78fb      	ldrb	r3, [r7, #3]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d115      	bne.n	8003f00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	f7fd f815 	bl	8000f10 <HAL_Delay>
      ms++;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f001 f959 	bl	80051a4 <USB_GetMode>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <USB_SetCurrentMode+0x84>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b31      	cmp	r3, #49	; 0x31
 8003efc:	d9f0      	bls.n	8003ee0 <USB_SetCurrentMode+0x60>
 8003efe:	e001      	b.n	8003f04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e005      	b.n	8003f10 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b32      	cmp	r3, #50	; 0x32
 8003f08:	d101      	bne.n	8003f0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f18:	b084      	sub	sp, #16
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b086      	sub	sp, #24
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f32:	2300      	movs	r3, #0
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	e009      	b.n	8003f4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	3340      	adds	r3, #64	; 0x40
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	2200      	movs	r2, #0
 8003f44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	2b0e      	cmp	r3, #14
 8003f50:	d9f2      	bls.n	8003f38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d11c      	bne.n	8003f92 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f66:	f043 0302 	orr.w	r3, r3, #2
 8003f6a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	639a      	str	r2, [r3, #56]	; 0x38
 8003f90:	e00b      	b.n	8003faa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	680b      	ldr	r3, [r1, #0]
 8003fc8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d10c      	bne.n	8003fea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d104      	bne.n	8003fe0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f945 	bl	8004268 <USB_SetDevSpeed>
 8003fde:	e008      	b.n	8003ff2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f940 	bl	8004268 <USB_SetDevSpeed>
 8003fe8:	e003      	b.n	8003ff2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003fea:	2103      	movs	r1, #3
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f93b 	bl	8004268 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ff2:	2110      	movs	r1, #16
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f8f3 	bl	80041e0 <USB_FlushTxFifo>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f90f 	bl	8004228 <USB_FlushRxFifo>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401a:	461a      	mov	r2, r3
 800401c:	2300      	movs	r3, #0
 800401e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004026:	461a      	mov	r2, r3
 8004028:	2300      	movs	r3, #0
 800402a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004032:	461a      	mov	r2, r3
 8004034:	2300      	movs	r3, #0
 8004036:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004038:	2300      	movs	r3, #0
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	e043      	b.n	80040c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004054:	d118      	bne.n	8004088 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10a      	bne.n	8004072 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004068:	461a      	mov	r2, r3
 800406a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	e013      	b.n	800409a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407e:	461a      	mov	r2, r3
 8004080:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e008      	b.n	800409a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004094:	461a      	mov	r2, r3
 8004096:	2300      	movs	r3, #0
 8004098:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a6:	461a      	mov	r2, r3
 80040a8:	2300      	movs	r3, #0
 80040aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b8:	461a      	mov	r2, r3
 80040ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	3301      	adds	r3, #1
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d3b7      	bcc.n	800403e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040ce:	2300      	movs	r3, #0
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	e043      	b.n	800415c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ea:	d118      	bne.n	800411e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10a      	bne.n	8004108 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fe:	461a      	mov	r2, r3
 8004100:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	e013      	b.n	8004130 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004114:	461a      	mov	r2, r3
 8004116:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	e008      	b.n	8004130 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412a:	461a      	mov	r2, r3
 800412c:	2300      	movs	r3, #0
 800412e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413c:	461a      	mov	r2, r3
 800413e:	2300      	movs	r3, #0
 8004140:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414e:	461a      	mov	r2, r3
 8004150:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004154:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	3301      	adds	r3, #1
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	429a      	cmp	r2, r3
 8004162:	d3b7      	bcc.n	80040d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004172:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004176:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004184:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004188:	2b00      	cmp	r3, #0
 800418a:	d105      	bne.n	8004198 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f043 0210 	orr.w	r2, r3, #16
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699a      	ldr	r2, [r3, #24]
 800419c:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <USB_DevInit+0x2c4>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f043 0208 	orr.w	r2, r3, #8
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d107      	bne.n	80041cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041c4:	f043 0304 	orr.w	r3, r3, #4
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041d8:	b004      	add	sp, #16
 80041da:	4770      	bx	lr
 80041dc:	803c3800 	.word	0x803c3800

080041e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	019b      	lsls	r3, r3, #6
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3301      	adds	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	4a08      	ldr	r2, [pc, #32]	; (8004224 <USB_FlushTxFifo+0x44>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d901      	bls.n	800420a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e006      	b.n	8004218 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b20      	cmp	r3, #32
 8004214:	d0f1      	beq.n	80041fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	00030d40 	.word	0x00030d40

08004228 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2210      	movs	r2, #16
 8004238:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3301      	adds	r3, #1
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	4a08      	ldr	r2, [pc, #32]	; (8004264 <USB_FlushRxFifo+0x3c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d901      	bls.n	800424a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e006      	b.n	8004258 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	2b10      	cmp	r3, #16
 8004254:	d0f1      	beq.n	800423a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	00030d40 	.word	0x00030d40

08004268 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	68f9      	ldr	r1, [r7, #12]
 8004284:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004288:	4313      	orrs	r3, r2
 800428a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800429a:	b480      	push	{r7}
 800429c:	b087      	sub	sp, #28
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 0306 	and.w	r3, r3, #6
 80042b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d102      	bne.n	80042c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80042ba:	2300      	movs	r3, #0
 80042bc:	75fb      	strb	r3, [r7, #23]
 80042be:	e00a      	b.n	80042d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d002      	beq.n	80042cc <USB_GetDevSpeed+0x32>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b06      	cmp	r3, #6
 80042ca:	d102      	bne.n	80042d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80042cc:	2302      	movs	r3, #2
 80042ce:	75fb      	strb	r3, [r7, #23]
 80042d0:	e001      	b.n	80042d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80042d2:	230f      	movs	r3, #15
 80042d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80042d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	785b      	ldrb	r3, [r3, #1]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d13a      	bne.n	8004376 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	2101      	movs	r1, #1
 8004312:	fa01 f303 	lsl.w	r3, r1, r3
 8004316:	b29b      	uxth	r3, r3
 8004318:	68f9      	ldr	r1, [r7, #12]
 800431a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800431e:	4313      	orrs	r3, r2
 8004320:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d155      	bne.n	80043e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	78db      	ldrb	r3, [r3, #3]
 8004352:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004354:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	059b      	lsls	r3, r3, #22
 800435a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800435c:	4313      	orrs	r3, r2
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	0151      	lsls	r1, r2, #5
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	440a      	add	r2, r1
 8004366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800436a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800436e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	e036      	b.n	80043e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437c:	69da      	ldr	r2, [r3, #28]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	2101      	movs	r1, #1
 8004388:	fa01 f303 	lsl.w	r3, r1, r3
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	68f9      	ldr	r1, [r7, #12]
 8004390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004394:	4313      	orrs	r3, r2
 8004396:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d11a      	bne.n	80043e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	78db      	ldrb	r3, [r3, #3]
 80043c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043ca:	430b      	orrs	r3, r1
 80043cc:	4313      	orrs	r3, r2
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	0151      	lsls	r1, r2, #5
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	440a      	add	r2, r1
 80043d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	785b      	ldrb	r3, [r3, #1]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d161      	bne.n	80044d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004426:	d11f      	bne.n	8004468 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	0151      	lsls	r1, r2, #5
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	440a      	add	r2, r1
 800443e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004442:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004446:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	0151      	lsls	r1, r2, #5
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	440a      	add	r2, r1
 800445e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004462:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004466:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	2101      	movs	r1, #1
 800447a:	fa01 f303 	lsl.w	r3, r1, r3
 800447e:	b29b      	uxth	r3, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	68f9      	ldr	r1, [r7, #12]
 8004484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004488:	4013      	ands	r3, r2
 800448a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	2101      	movs	r1, #1
 800449e:	fa01 f303 	lsl.w	r3, r1, r3
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	43db      	mvns	r3, r3
 80044a6:	68f9      	ldr	r1, [r7, #12]
 80044a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044ac:	4013      	ands	r3, r2
 80044ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	0159      	lsls	r1, r3, #5
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	440b      	add	r3, r1
 80044c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ca:	4619      	mov	r1, r3
 80044cc:	4b35      	ldr	r3, [pc, #212]	; (80045a4 <USB_DeactivateEndpoint+0x1b0>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	600b      	str	r3, [r1, #0]
 80044d2:	e060      	b.n	8004596 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044ea:	d11f      	bne.n	800452c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	0151      	lsls	r1, r2, #5
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	440a      	add	r2, r1
 8004502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004506:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800450a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	0151      	lsls	r1, r2, #5
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	440a      	add	r2, r1
 8004522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004526:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800452a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	2101      	movs	r1, #1
 800453e:	fa01 f303 	lsl.w	r3, r1, r3
 8004542:	041b      	lsls	r3, r3, #16
 8004544:	43db      	mvns	r3, r3
 8004546:	68f9      	ldr	r1, [r7, #12]
 8004548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800454c:	4013      	ands	r3, r2
 800454e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004556:	69da      	ldr	r2, [r3, #28]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	2101      	movs	r1, #1
 8004562:	fa01 f303 	lsl.w	r3, r1, r3
 8004566:	041b      	lsls	r3, r3, #16
 8004568:	43db      	mvns	r3, r3
 800456a:	68f9      	ldr	r1, [r7, #12]
 800456c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004570:	4013      	ands	r3, r2
 8004572:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	0159      	lsls	r1, r3, #5
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	440b      	add	r3, r1
 800458a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800458e:	4619      	mov	r1, r3
 8004590:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <USB_DeactivateEndpoint+0x1b4>)
 8004592:	4013      	ands	r3, r2
 8004594:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	ec337800 	.word	0xec337800
 80045a8:	eff37800 	.word	0xeff37800

080045ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	; 0x28
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	4613      	mov	r3, r2
 80045b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	785b      	ldrb	r3, [r3, #1]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	f040 815c 	bne.w	8004886 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d132      	bne.n	800463c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	0151      	lsls	r1, r2, #5
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	440a      	add	r2, r1
 80045ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	0151      	lsls	r1, r2, #5
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	440a      	add	r2, r1
 8004610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004614:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004618:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	0151      	lsls	r1, r2, #5
 800462c:	69fa      	ldr	r2, [r7, #28]
 800462e:	440a      	add	r2, r1
 8004630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004634:	0cdb      	lsrs	r3, r3, #19
 8004636:	04db      	lsls	r3, r3, #19
 8004638:	6113      	str	r3, [r2, #16]
 800463a:	e074      	b.n	8004726 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	0151      	lsls	r1, r2, #5
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	440a      	add	r2, r1
 8004652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004656:	0cdb      	lsrs	r3, r3, #19
 8004658:	04db      	lsls	r3, r3, #19
 800465a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	440a      	add	r2, r1
 8004672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004676:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800467a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800467e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	6959      	ldr	r1, [r3, #20]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	440b      	add	r3, r1
 8004698:	1e59      	subs	r1, r3, #1
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	fbb1 f3f3 	udiv	r3, r1, r3
 80046a2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046a4:	4b9d      	ldr	r3, [pc, #628]	; (800491c <USB_EPStartXfer+0x370>)
 80046a6:	400b      	ands	r3, r1
 80046a8:	69b9      	ldr	r1, [r7, #24]
 80046aa:	0148      	lsls	r0, r1, #5
 80046ac:	69f9      	ldr	r1, [r7, #28]
 80046ae:	4401      	add	r1, r0
 80046b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046b4:	4313      	orrs	r3, r2
 80046b6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c4:	691a      	ldr	r2, [r3, #16]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ce:	69b9      	ldr	r1, [r7, #24]
 80046d0:	0148      	lsls	r0, r1, #5
 80046d2:	69f9      	ldr	r1, [r7, #28]
 80046d4:	4401      	add	r1, r0
 80046d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046da:	4313      	orrs	r3, r2
 80046dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	78db      	ldrb	r3, [r3, #3]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d11f      	bne.n	8004726 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	0151      	lsls	r1, r2, #5
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	440a      	add	r2, r1
 80046fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004700:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004704:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	0151      	lsls	r1, r2, #5
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	440a      	add	r2, r1
 800471c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004720:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004724:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d14b      	bne.n	80047c4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d009      	beq.n	8004748 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004740:	461a      	mov	r2, r3
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	78db      	ldrb	r3, [r3, #3]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d128      	bne.n	80047a2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475c:	2b00      	cmp	r3, #0
 800475e:	d110      	bne.n	8004782 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	0151      	lsls	r1, r2, #5
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	440a      	add	r2, r1
 8004776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800477a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	e00f      	b.n	80047a2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	0151      	lsls	r1, r2, #5
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	440a      	add	r2, r1
 8004798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800479c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	0151      	lsls	r1, r2, #5
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	440a      	add	r2, r1
 80047b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	e12f      	b.n	8004a24 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	0151      	lsls	r1, r2, #5
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	440a      	add	r2, r1
 80047da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	78db      	ldrb	r3, [r3, #3]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d015      	beq.n	8004818 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 8117 	beq.w	8004a24 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	2101      	movs	r1, #1
 8004808:	fa01 f303 	lsl.w	r3, r1, r3
 800480c:	69f9      	ldr	r1, [r7, #28]
 800480e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004812:	4313      	orrs	r3, r2
 8004814:	634b      	str	r3, [r1, #52]	; 0x34
 8004816:	e105      	b.n	8004a24 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d110      	bne.n	800484a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	0151      	lsls	r1, r2, #5
 800483a:	69fa      	ldr	r2, [r7, #28]
 800483c:	440a      	add	r2, r1
 800483e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004842:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	e00f      	b.n	800486a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	0151      	lsls	r1, r2, #5
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	440a      	add	r2, r1
 8004860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004868:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	68d9      	ldr	r1, [r3, #12]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	781a      	ldrb	r2, [r3, #0]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	b298      	uxth	r0, r3
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	4603      	mov	r3, r0
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fa2b 	bl	8004cda <USB_WritePacket>
 8004884:	e0ce      	b.n	8004a24 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	0151      	lsls	r1, r2, #5
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	440a      	add	r2, r1
 800489c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a0:	0cdb      	lsrs	r3, r3, #19
 80048a2:	04db      	lsls	r3, r3, #19
 80048a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	0151      	lsls	r1, r2, #5
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	440a      	add	r2, r1
 80048bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d126      	bne.n	8004920 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e8:	69b9      	ldr	r1, [r7, #24]
 80048ea:	0148      	lsls	r0, r1, #5
 80048ec:	69f9      	ldr	r1, [r7, #28]
 80048ee:	4401      	add	r1, r0
 80048f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048f4:	4313      	orrs	r3, r2
 80048f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	440a      	add	r2, r1
 800490e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004912:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004916:	6113      	str	r3, [r2, #16]
 8004918:	e036      	b.n	8004988 <USB_EPStartXfer+0x3dc>
 800491a:	bf00      	nop
 800491c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	695a      	ldr	r2, [r3, #20]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	4413      	add	r3, r2
 800492a:	1e5a      	subs	r2, r3, #1
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	fbb2 f3f3 	udiv	r3, r2, r3
 8004934:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	8afb      	ldrh	r3, [r7, #22]
 8004946:	04d9      	lsls	r1, r3, #19
 8004948:	4b39      	ldr	r3, [pc, #228]	; (8004a30 <USB_EPStartXfer+0x484>)
 800494a:	400b      	ands	r3, r1
 800494c:	69b9      	ldr	r1, [r7, #24]
 800494e:	0148      	lsls	r0, r1, #5
 8004950:	69f9      	ldr	r1, [r7, #28]
 8004952:	4401      	add	r1, r0
 8004954:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004958:	4313      	orrs	r3, r2
 800495a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	8af9      	ldrh	r1, [r7, #22]
 8004970:	fb01 f303 	mul.w	r3, r1, r3
 8004974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004978:	69b9      	ldr	r1, [r7, #24]
 800497a:	0148      	lsls	r0, r1, #5
 800497c:	69f9      	ldr	r1, [r7, #28]
 800497e:	4401      	add	r1, r0
 8004980:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004984:	4313      	orrs	r3, r2
 8004986:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004988:	79fb      	ldrb	r3, [r7, #7]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d10d      	bne.n	80049aa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	68d9      	ldr	r1, [r3, #12]
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	460a      	mov	r2, r1
 80049a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	78db      	ldrb	r3, [r3, #3]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d128      	bne.n	8004a04 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d110      	bne.n	80049e4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	0151      	lsls	r1, r2, #5
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	440a      	add	r2, r1
 80049d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e00f      	b.n	8004a04 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	0151      	lsls	r1, r2, #5
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	440a      	add	r2, r1
 80049fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	0151      	lsls	r1, r2, #5
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	440a      	add	r2, r1
 8004a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3720      	adds	r7, #32
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	1ff80000 	.word	0x1ff80000

08004a34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	785b      	ldrb	r3, [r3, #1]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	f040 80cd 	bne.w	8004bf0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d132      	bne.n	8004ac4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	0151      	lsls	r1, r2, #5
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	440a      	add	r2, r1
 8004a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	0151      	lsls	r1, r2, #5
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	440a      	add	r2, r1
 8004ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004abc:	0cdb      	lsrs	r3, r3, #19
 8004abe:	04db      	lsls	r3, r3, #19
 8004ac0:	6113      	str	r3, [r2, #16]
 8004ac2:	e04e      	b.n	8004b62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	0151      	lsls	r1, r2, #5
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	440a      	add	r2, r1
 8004ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ade:	0cdb      	lsrs	r3, r3, #19
 8004ae0:	04db      	lsls	r3, r3, #19
 8004ae2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d903      	bls.n	8004b1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	0151      	lsls	r1, r2, #5
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	440a      	add	r2, r1
 8004b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b52:	6939      	ldr	r1, [r7, #16]
 8004b54:	0148      	lsls	r0, r1, #5
 8004b56:	6979      	ldr	r1, [r7, #20]
 8004b58:	4401      	add	r1, r0
 8004b5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b62:	79fb      	ldrb	r3, [r7, #7]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d11e      	bne.n	8004ba6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d009      	beq.n	8004b84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	0151      	lsls	r1, r2, #5
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	440a      	add	r2, r1
 8004b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	e092      	b.n	8004ccc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	0151      	lsls	r1, r2, #5
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	440a      	add	r2, r1
 8004bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bc4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d07e      	beq.n	8004ccc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	2101      	movs	r1, #1
 8004be0:	fa01 f303 	lsl.w	r3, r1, r3
 8004be4:	6979      	ldr	r1, [r7, #20]
 8004be6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bea:	4313      	orrs	r3, r2
 8004bec:	634b      	str	r3, [r1, #52]	; 0x34
 8004bee:	e06d      	b.n	8004ccc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	0151      	lsls	r1, r2, #5
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	440a      	add	r2, r1
 8004c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c0a:	0cdb      	lsrs	r3, r3, #19
 8004c0c:	04db      	lsls	r3, r3, #19
 8004c0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	0151      	lsls	r1, r2, #5
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	440a      	add	r2, r1
 8004c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c32:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	0151      	lsls	r1, r2, #5
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	440a      	add	r2, r1
 8004c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c7a:	6939      	ldr	r1, [r7, #16]
 8004c7c:	0148      	lsls	r0, r1, #5
 8004c7e:	6979      	ldr	r1, [r7, #20]
 8004c80:	4401      	add	r1, r0
 8004c82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c86:	4313      	orrs	r3, r2
 8004c88:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d10d      	bne.n	8004cac <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d009      	beq.n	8004cac <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	68d9      	ldr	r1, [r3, #12]
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca8:	460a      	mov	r2, r1
 8004caa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	0151      	lsls	r1, r2, #5
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	440a      	add	r2, r1
 8004cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b089      	sub	sp, #36	; 0x24
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	4611      	mov	r1, r2
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	460b      	mov	r3, r1
 8004cea:	71fb      	strb	r3, [r7, #7]
 8004cec:	4613      	mov	r3, r2
 8004cee:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004cf8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d123      	bne.n	8004d48 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d00:	88bb      	ldrh	r3, [r7, #4]
 8004d02:	3303      	adds	r3, #3
 8004d04:	089b      	lsrs	r3, r3, #2
 8004d06:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61bb      	str	r3, [r7, #24]
 8004d0c:	e018      	b.n	8004d40 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	031a      	lsls	r2, r3, #12
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	3301      	adds	r3, #1
 8004d26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	3301      	adds	r3, #1
 8004d32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	3301      	adds	r3, #1
 8004d38:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d3e2      	bcc.n	8004d0e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3724      	adds	r7, #36	; 0x24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b08b      	sub	sp, #44	; 0x2c
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	60f8      	str	r0, [r7, #12]
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	4613      	mov	r3, r2
 8004d62:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d6c:	88fb      	ldrh	r3, [r7, #6]
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d74:	88fb      	ldrh	r3, [r7, #6]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	623b      	str	r3, [r7, #32]
 8004d80:	e014      	b.n	8004dac <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	3301      	adds	r3, #1
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	3301      	adds	r3, #1
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	3301      	adds	r3, #1
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	3301      	adds	r3, #1
 8004daa:	623b      	str	r3, [r7, #32]
 8004dac:	6a3a      	ldr	r2, [r7, #32]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d3e6      	bcc.n	8004d82 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004db4:	8bfb      	ldrh	r3, [r7, #30]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d01e      	beq.n	8004df8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	f107 0310 	add.w	r3, r7, #16
 8004dca:	6812      	ldr	r2, [r2, #0]
 8004dcc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	701a      	strb	r2, [r3, #0]
      i++;
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	3301      	adds	r3, #1
 8004de4:	623b      	str	r3, [r7, #32]
      pDest++;
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	3301      	adds	r3, #1
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004dec:	8bfb      	ldrh	r3, [r7, #30]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004df2:	8bfb      	ldrh	r3, [r7, #30]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1ea      	bne.n	8004dce <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	372c      	adds	r7, #44	; 0x2c
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b085      	sub	sp, #20
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	785b      	ldrb	r3, [r3, #1]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d12c      	bne.n	8004e7c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	db12      	blt.n	8004e5a <USB_EPSetStall+0x54>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00f      	beq.n	8004e5a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	0151      	lsls	r1, r2, #5
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	440a      	add	r2, r1
 8004e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e58:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	0151      	lsls	r1, r2, #5
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	440a      	add	r2, r1
 8004e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e02b      	b.n	8004ed4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	db12      	blt.n	8004eb4 <USB_EPSetStall+0xae>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00f      	beq.n	8004eb4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eb2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ece:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ed2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b085      	sub	sp, #20
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	785b      	ldrb	r3, [r3, #1]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d128      	bne.n	8004f50 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	0151      	lsls	r1, r2, #5
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	440a      	add	r2, r1
 8004f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	78db      	ldrb	r3, [r3, #3]
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d003      	beq.n	8004f2e <USB_EPClearStall+0x4c>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	78db      	ldrb	r3, [r3, #3]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d138      	bne.n	8004fa0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	0151      	lsls	r1, r2, #5
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	440a      	add	r2, r1
 8004f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	e027      	b.n	8004fa0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	0151      	lsls	r1, r2, #5
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	440a      	add	r2, r1
 8004f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	78db      	ldrb	r3, [r3, #3]
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d003      	beq.n	8004f80 <USB_EPClearStall+0x9e>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	78db      	ldrb	r3, [r3, #3]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d10f      	bne.n	8004fa0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	0151      	lsls	r1, r2, #5
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	440a      	add	r2, r1
 8004f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b085      	sub	sp, #20
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fcc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004fd0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	78fb      	ldrb	r3, [r7, #3]
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004fe2:	68f9      	ldr	r1, [r7, #12]
 8004fe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b085      	sub	sp, #20
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005014:	f023 0303 	bic.w	r3, r3, #3
 8005018:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005028:	f023 0302 	bic.w	r3, r3, #2
 800502c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005056:	f023 0303 	bic.w	r3, r3, #3
 800505a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800506a:	f043 0302 	orr.w	r3, r3, #2
 800506e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800507e:	b480      	push	{r7}
 8005080:	b085      	sub	sp, #20
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4013      	ands	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005096:	68fb      	ldr	r3, [r7, #12]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	4013      	ands	r3, r2
 80050c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	0c1b      	lsrs	r3, r3, #16
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	4013      	ands	r3, r2
 80050fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	b29b      	uxth	r3, r3
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	4013      	ands	r3, r2
 8005138:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800513a:	68bb      	ldr	r3, [r7, #8]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	fa22 f303 	lsr.w	r3, r2, r3
 8005178:	01db      	lsls	r3, r3, #7
 800517a:	b2db      	uxtb	r3, r3
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005182:	78fb      	ldrb	r3, [r7, #3]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4013      	ands	r3, r2
 8005194:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005196:	68bb      	ldr	r3, [r7, #8]
}
 8005198:	4618      	mov	r0, r3
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	f003 0301 	and.w	r3, r3, #1
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80051de:	f023 0307 	bic.w	r3, r3, #7
 80051e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	460b      	mov	r3, r1
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	333c      	adds	r3, #60	; 0x3c
 800521e:	3304      	adds	r3, #4
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4a26      	ldr	r2, [pc, #152]	; (80052c0 <USB_EP0_OutStart+0xb8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d90a      	bls.n	8005242 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800523c:	d101      	bne.n	8005242 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	e037      	b.n	80052b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005248:	461a      	mov	r2, r3
 800524a:	2300      	movs	r3, #0
 800524c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800525c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005260:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005270:	f043 0318 	orr.w	r3, r3, #24
 8005274:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005284:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005288:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800528a:	7afb      	ldrb	r3, [r7, #11]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d10f      	bne.n	80052b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005296:	461a      	mov	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80052ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	4f54300a 	.word	0x4f54300a

080052c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3301      	adds	r3, #1
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	4a13      	ldr	r2, [pc, #76]	; (8005324 <USB_CoreReset+0x60>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d901      	bls.n	80052e0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e01a      	b.n	8005316 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	daf3      	bge.n	80052d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f043 0201 	orr.w	r2, r3, #1
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	3301      	adds	r3, #1
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	4a09      	ldr	r2, [pc, #36]	; (8005324 <USB_CoreReset+0x60>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d901      	bls.n	8005308 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e006      	b.n	8005316 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b01      	cmp	r3, #1
 8005312:	d0f1      	beq.n	80052f8 <USB_CoreReset+0x34>

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	00030d40 	.word	0x00030d40

08005328 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005334:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005338:	f002 f96e 	bl	8007618 <USBD_static_malloc>
 800533c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d105      	bne.n	8005350 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800534c:	2302      	movs	r3, #2
 800534e:	e066      	b.n	800541e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	7c1b      	ldrb	r3, [r3, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d119      	bne.n	8005394 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005364:	2202      	movs	r2, #2
 8005366:	2181      	movs	r1, #129	; 0x81
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f002 f832 	bl	80073d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005378:	2202      	movs	r2, #2
 800537a:	2101      	movs	r1, #1
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f002 f828 	bl	80073d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2210      	movs	r2, #16
 800538e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005392:	e016      	b.n	80053c2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005394:	2340      	movs	r3, #64	; 0x40
 8005396:	2202      	movs	r2, #2
 8005398:	2181      	movs	r1, #129	; 0x81
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f002 f819 	bl	80073d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053a6:	2340      	movs	r3, #64	; 0x40
 80053a8:	2202      	movs	r2, #2
 80053aa:	2101      	movs	r1, #1
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f002 f810 	bl	80073d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2210      	movs	r2, #16
 80053be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80053c2:	2308      	movs	r3, #8
 80053c4:	2203      	movs	r2, #3
 80053c6:	2182      	movs	r1, #130	; 0x82
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f002 f802 	bl	80073d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	7c1b      	ldrb	r3, [r3, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d109      	bne.n	800540c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005402:	2101      	movs	r1, #1
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f002 f8d3 	bl	80075b0 <USBD_LL_PrepareReceive>
 800540a:	e007      	b.n	800541c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005412:	2340      	movs	r3, #64	; 0x40
 8005414:	2101      	movs	r1, #1
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f002 f8ca 	bl	80075b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	460b      	mov	r3, r1
 8005430:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005432:	2181      	movs	r1, #129	; 0x81
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f001 fff2 	bl	800741e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005440:	2101      	movs	r1, #1
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f001 ffeb 	bl	800741e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005450:	2182      	movs	r1, #130	; 0x82
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f001 ffe3 	bl	800741e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00e      	beq.n	8005490 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005482:	4618      	mov	r0, r3
 8005484:	f002 f8d6 	bl	8007634 <USBD_static_free>
    pdev->pClassData = NULL;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e0af      	b.n	8005624 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d03f      	beq.n	8005550 <USBD_CDC_Setup+0xb4>
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	f040 809f 	bne.w	8005614 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	88db      	ldrh	r3, [r3, #6]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d02e      	beq.n	800553c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	da16      	bge.n	8005516 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80054f4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	88d2      	ldrh	r2, [r2, #6]
 80054fa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	88db      	ldrh	r3, [r3, #6]
 8005500:	2b07      	cmp	r3, #7
 8005502:	bf28      	it	cs
 8005504:	2307      	movcs	r3, #7
 8005506:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	89fa      	ldrh	r2, [r7, #14]
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f001 fb19 	bl	8006b46 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005514:	e085      	b.n	8005622 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	785a      	ldrb	r2, [r3, #1]
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	88db      	ldrh	r3, [r3, #6]
 8005524:	b2da      	uxtb	r2, r3
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800552c:	6939      	ldr	r1, [r7, #16]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	88db      	ldrh	r3, [r3, #6]
 8005532:	461a      	mov	r2, r3
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f001 fb32 	bl	8006b9e <USBD_CtlPrepareRx>
      break;
 800553a:	e072      	b.n	8005622 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	7850      	ldrb	r0, [r2, #1]
 8005548:	2200      	movs	r2, #0
 800554a:	6839      	ldr	r1, [r7, #0]
 800554c:	4798      	blx	r3
      break;
 800554e:	e068      	b.n	8005622 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	785b      	ldrb	r3, [r3, #1]
 8005554:	2b0b      	cmp	r3, #11
 8005556:	d852      	bhi.n	80055fe <USBD_CDC_Setup+0x162>
 8005558:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <USBD_CDC_Setup+0xc4>)
 800555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555e:	bf00      	nop
 8005560:	08005591 	.word	0x08005591
 8005564:	0800560d 	.word	0x0800560d
 8005568:	080055ff 	.word	0x080055ff
 800556c:	080055ff 	.word	0x080055ff
 8005570:	080055ff 	.word	0x080055ff
 8005574:	080055ff 	.word	0x080055ff
 8005578:	080055ff 	.word	0x080055ff
 800557c:	080055ff 	.word	0x080055ff
 8005580:	080055ff 	.word	0x080055ff
 8005584:	080055ff 	.word	0x080055ff
 8005588:	080055bb 	.word	0x080055bb
 800558c:	080055e5 	.word	0x080055e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b03      	cmp	r3, #3
 800559a:	d107      	bne.n	80055ac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800559c:	f107 030a 	add.w	r3, r7, #10
 80055a0:	2202      	movs	r2, #2
 80055a2:	4619      	mov	r1, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f001 face 	bl	8006b46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055aa:	e032      	b.n	8005612 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80055ac:	6839      	ldr	r1, [r7, #0]
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f001 fa58 	bl	8006a64 <USBD_CtlError>
            ret = USBD_FAIL;
 80055b4:	2303      	movs	r3, #3
 80055b6:	75fb      	strb	r3, [r7, #23]
          break;
 80055b8:	e02b      	b.n	8005612 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b03      	cmp	r3, #3
 80055c4:	d107      	bne.n	80055d6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80055c6:	f107 030d 	add.w	r3, r7, #13
 80055ca:	2201      	movs	r2, #1
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f001 fab9 	bl	8006b46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055d4:	e01d      	b.n	8005612 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f001 fa43 	bl	8006a64 <USBD_CtlError>
            ret = USBD_FAIL;
 80055de:	2303      	movs	r3, #3
 80055e0:	75fb      	strb	r3, [r7, #23]
          break;
 80055e2:	e016      	b.n	8005612 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d00f      	beq.n	8005610 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f001 fa36 	bl	8006a64 <USBD_CtlError>
            ret = USBD_FAIL;
 80055f8:	2303      	movs	r3, #3
 80055fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80055fc:	e008      	b.n	8005610 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80055fe:	6839      	ldr	r1, [r7, #0]
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f001 fa2f 	bl	8006a64 <USBD_CtlError>
          ret = USBD_FAIL;
 8005606:	2303      	movs	r3, #3
 8005608:	75fb      	strb	r3, [r7, #23]
          break;
 800560a:	e002      	b.n	8005612 <USBD_CDC_Setup+0x176>
          break;
 800560c:	bf00      	nop
 800560e:	e008      	b.n	8005622 <USBD_CDC_Setup+0x186>
          break;
 8005610:	bf00      	nop
      }
      break;
 8005612:	e006      	b.n	8005622 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005614:	6839      	ldr	r1, [r7, #0]
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f001 fa24 	bl	8006a64 <USBD_CtlError>
      ret = USBD_FAIL;
 800561c:	2303      	movs	r3, #3
 800561e:	75fb      	strb	r3, [r7, #23]
      break;
 8005620:	bf00      	nop
  }

  return (uint8_t)ret;
 8005622:	7dfb      	ldrb	r3, [r7, #23]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800563e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800564a:	2303      	movs	r3, #3
 800564c:	e04f      	b.n	80056ee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005654:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005656:	78fa      	ldrb	r2, [r7, #3]
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	440b      	add	r3, r1
 8005664:	3318      	adds	r3, #24
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d029      	beq.n	80056c0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800566c:	78fa      	ldrb	r2, [r7, #3]
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	440b      	add	r3, r1
 800567a:	3318      	adds	r3, #24
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	78f9      	ldrb	r1, [r7, #3]
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	460b      	mov	r3, r1
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	1a5b      	subs	r3, r3, r1
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4403      	add	r3, r0
 800568c:	3344      	adds	r3, #68	; 0x44
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	fbb2 f1f3 	udiv	r1, r2, r3
 8005694:	fb03 f301 	mul.w	r3, r3, r1
 8005698:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800569a:	2b00      	cmp	r3, #0
 800569c:	d110      	bne.n	80056c0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800569e:	78fa      	ldrb	r2, [r7, #3]
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	3318      	adds	r3, #24
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80056b2:	78f9      	ldrb	r1, [r7, #3]
 80056b4:	2300      	movs	r3, #0
 80056b6:	2200      	movs	r2, #0
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f001 ff58 	bl	800756e <USBD_LL_Transmit>
 80056be:	e015      	b.n	80056ec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00b      	beq.n	80056ec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80056e8:	78fa      	ldrb	r2, [r7, #3]
 80056ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	460b      	mov	r3, r1
 8005700:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005708:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005714:	2303      	movs	r3, #3
 8005716:	e015      	b.n	8005744 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005718:	78fb      	ldrb	r3, [r7, #3]
 800571a:	4619      	mov	r1, r3
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f001 ff68 	bl	80075f2 <USBD_LL_GetRxDataSize>
 8005722:	4602      	mov	r2, r0
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800573e:	4611      	mov	r1, r2
 8005740:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800575a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005762:	2303      	movs	r3, #3
 8005764:	e01b      	b.n	800579e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d015      	beq.n	800579c <USBD_CDC_EP0_RxReady+0x50>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005776:	2bff      	cmp	r3, #255	; 0xff
 8005778:	d010      	beq.n	800579c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005788:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005790:	b292      	uxth	r2, r2
 8005792:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	22ff      	movs	r2, #255	; 0xff
 8005798:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2243      	movs	r2, #67	; 0x43
 80057b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80057b6:	4b03      	ldr	r3, [pc, #12]	; (80057c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	20000094 	.word	0x20000094

080057c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2243      	movs	r2, #67	; 0x43
 80057d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80057d6:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80057d8:	4618      	mov	r0, r3
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	20000050 	.word	0x20000050

080057e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2243      	movs	r2, #67	; 0x43
 80057f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80057f6:	4b03      	ldr	r3, [pc, #12]	; (8005804 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	200000d8 	.word	0x200000d8

08005808 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	220a      	movs	r2, #10
 8005814:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005816:	4b03      	ldr	r3, [pc, #12]	; (8005824 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005818:	4618      	mov	r0, r3
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	2000000c 	.word	0x2000000c

08005828 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005838:	2303      	movs	r3, #3
 800583a:	e004      	b.n	8005846 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005852:	b480      	push	{r7}
 8005854:	b087      	sub	sp, #28
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005864:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800586c:	2303      	movs	r3, #3
 800586e:	e008      	b.n	8005882 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800588e:	b480      	push	{r7}
 8005890:	b085      	sub	sp, #20
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800589e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e004      	b.n	80058b4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058ce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80058d0:	2301      	movs	r3, #1
 80058d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80058de:	2303      	movs	r3, #3
 80058e0:	e01a      	b.n	8005918 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d114      	bne.n	8005916 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800590a:	2181      	movs	r1, #129	; 0x81
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f001 fe2e 	bl	800756e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005916:	7bfb      	ldrb	r3, [r7, #15]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800592e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800593a:	2303      	movs	r3, #3
 800593c:	e016      	b.n	800596c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	7c1b      	ldrb	r3, [r3, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800594c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005950:	2101      	movs	r1, #1
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f001 fe2c 	bl	80075b0 <USBD_LL_PrepareReceive>
 8005958:	e007      	b.n	800596a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005960:	2340      	movs	r3, #64	; 0x40
 8005962:	2101      	movs	r1, #1
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f001 fe23 	bl	80075b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	4613      	mov	r3, r2
 8005980:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005988:	2303      	movs	r3, #3
 800598a:	e01f      	b.n	80059cc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	79fa      	ldrb	r2, [r7, #7]
 80059be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f001 fc9f 	bl	8007304 <USBD_LL_Init>
 80059c6:	4603      	mov	r3, r0
 80059c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80059ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e016      	b.n	8005a1a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00b      	beq.n	8005a18 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	f107 020e 	add.w	r2, r7, #14
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4798      	blx	r3
 8005a10:	4602      	mov	r2, r0
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f001 fcb6 	bl	800739c <USBD_LL_Start>
 8005a30:	4603      	mov	r3, r0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	78fa      	ldrb	r2, [r7, #3]
 8005a74:	4611      	mov	r1, r2
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	4798      	blx	r3
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d007      	beq.n	8005aae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	78fa      	ldrb	r2, [r7, #3]
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	4798      	blx	r3
  }

  return USBD_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ac8:	6839      	ldr	r1, [r7, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 ff90 	bl	80069f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005ade:	461a      	mov	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d01a      	beq.n	8005b2a <USBD_LL_SetupStage+0x72>
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d822      	bhi.n	8005b3e <USBD_LL_SetupStage+0x86>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <USBD_LL_SetupStage+0x4a>
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d00a      	beq.n	8005b16 <USBD_LL_SetupStage+0x5e>
 8005b00:	e01d      	b.n	8005b3e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fa62 	bl	8005fd4 <USBD_StdDevReq>
 8005b10:	4603      	mov	r3, r0
 8005b12:	73fb      	strb	r3, [r7, #15]
      break;
 8005b14:	e020      	b.n	8005b58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fac6 	bl	80060b0 <USBD_StdItfReq>
 8005b24:	4603      	mov	r3, r0
 8005b26:	73fb      	strb	r3, [r7, #15]
      break;
 8005b28:	e016      	b.n	8005b58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fb05 	bl	8006142 <USBD_StdEPReq>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b3c:	e00c      	b.n	8005b58 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f001 fc85 	bl	800745c <USBD_LL_StallEP>
 8005b52:	4603      	mov	r3, r0
 8005b54:	73fb      	strb	r3, [r7, #15]
      break;
 8005b56:	bf00      	nop
  }

  return ret;
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b086      	sub	sp, #24
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	607a      	str	r2, [r7, #4]
 8005b6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005b70:	7afb      	ldrb	r3, [r7, #11]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d138      	bne.n	8005be8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d14a      	bne.n	8005c1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d913      	bls.n	8005bbc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	1ad2      	subs	r2, r2, r3
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	4293      	cmp	r3, r2
 8005bac:	bf28      	it	cs
 8005bae:	4613      	movcs	r3, r2
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f001 f80f 	bl	8006bd8 <USBD_CtlContinueRx>
 8005bba:	e030      	b.n	8005c1e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d10b      	bne.n	8005be0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d005      	beq.n	8005be0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f001 f80a 	bl	8006bfa <USBD_CtlSendStatus>
 8005be6:	e01a      	b.n	8005c1e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d114      	bne.n	8005c1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00e      	beq.n	8005c1e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	7afa      	ldrb	r2, [r7, #11]
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	4798      	blx	r3
 8005c10:	4603      	mov	r3, r0
 8005c12:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005c14:	7dfb      	ldrb	r3, [r7, #23]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005c1a:	7dfb      	ldrb	r3, [r7, #23]
 8005c1c:	e000      	b.n	8005c20 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	460b      	mov	r3, r1
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005c36:	7afb      	ldrb	r3, [r7, #11]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d16b      	bne.n	8005d14 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3314      	adds	r3, #20
 8005c40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d156      	bne.n	8005cfa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d914      	bls.n	8005c82 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	1ad2      	subs	r2, r2, r3
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 ff84 	bl	8006b7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c74:	2300      	movs	r3, #0
 8005c76:	2200      	movs	r2, #0
 8005c78:	2100      	movs	r1, #0
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f001 fc98 	bl	80075b0 <USBD_LL_PrepareReceive>
 8005c80:	e03b      	b.n	8005cfa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d11c      	bne.n	8005cc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d316      	bcc.n	8005cc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d20f      	bcs.n	8005cc8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2100      	movs	r1, #0
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 ff65 	bl	8006b7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cba:	2300      	movs	r3, #0
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f001 fc75 	bl	80075b0 <USBD_LL_PrepareReceive>
 8005cc6:	e018      	b.n	8005cfa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d10b      	bne.n	8005cec <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cec:	2180      	movs	r1, #128	; 0x80
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f001 fbb4 	bl	800745c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 ff93 	bl	8006c20 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d122      	bne.n	8005d4a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f7ff fe98 	bl	8005a3a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005d12:	e01a      	b.n	8005d4a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d114      	bne.n	8005d4a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00e      	beq.n	8005d4a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	7afa      	ldrb	r2, [r7, #11]
 8005d36:	4611      	mov	r1, r2
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	4798      	blx	r3
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005d40:	7dfb      	ldrb	r3, [r7, #23]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005d46:	7dfb      	ldrb	r3, [r7, #23]
 8005d48:	e000      	b.n	8005d4c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e02f      	b.n	8005de8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00f      	beq.n	8005db2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6852      	ldr	r2, [r2, #4]
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	4611      	mov	r1, r2
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005db2:	2340      	movs	r3, #64	; 0x40
 8005db4:	2200      	movs	r2, #0
 8005db6:	2100      	movs	r1, #0
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f001 fb0a 	bl	80073d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2240      	movs	r2, #64	; 0x40
 8005dca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005dce:	2340      	movs	r3, #64	; 0x40
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2180      	movs	r1, #128	; 0x80
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f001 fafc 	bl	80073d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2240      	movs	r2, #64	; 0x40
 8005de4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	78fa      	ldrb	r2, [r7, #3]
 8005e00:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2204      	movs	r2, #4
 8005e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d106      	bne.n	8005e5e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e012      	b.n	8005ea8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	d10b      	bne.n	8005ea6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e014      	b.n	8005ef4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d10d      	bne.n	8005ef2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d007      	beq.n	8005ef2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	78fa      	ldrb	r2, [r7, #3]
 8005eec:	4611      	mov	r1, r2
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	460b      	mov	r3, r1
 8005f06:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e014      	b.n	8005f40 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d10d      	bne.n	8005f3e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d007      	beq.n	8005f3e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	78fa      	ldrb	r2, [r7, #3]
 8005f38:	4611      	mov	r1, r2
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b082      	sub	sp, #8
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d009      	beq.n	8005f8c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6852      	ldr	r2, [r2, #4]
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	4611      	mov	r1, r2
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	4798      	blx	r3
  }

  return USBD_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b087      	sub	sp, #28
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	3301      	adds	r3, #1
 8005fac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005fb4:	8a3b      	ldrh	r3, [r7, #16]
 8005fb6:	021b      	lsls	r3, r3, #8
 8005fb8:	b21a      	sxth	r2, r3
 8005fba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	b21b      	sxth	r3, r3
 8005fc2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005fc4:	89fb      	ldrh	r3, [r7, #14]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
	...

08005fd4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fea:	2b40      	cmp	r3, #64	; 0x40
 8005fec:	d005      	beq.n	8005ffa <USBD_StdDevReq+0x26>
 8005fee:	2b40      	cmp	r3, #64	; 0x40
 8005ff0:	d853      	bhi.n	800609a <USBD_StdDevReq+0xc6>
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00b      	beq.n	800600e <USBD_StdDevReq+0x3a>
 8005ff6:	2b20      	cmp	r3, #32
 8005ff8:	d14f      	bne.n	800609a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	4798      	blx	r3
 8006008:	4603      	mov	r3, r0
 800600a:	73fb      	strb	r3, [r7, #15]
      break;
 800600c:	e04a      	b.n	80060a4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	785b      	ldrb	r3, [r3, #1]
 8006012:	2b09      	cmp	r3, #9
 8006014:	d83b      	bhi.n	800608e <USBD_StdDevReq+0xba>
 8006016:	a201      	add	r2, pc, #4	; (adr r2, 800601c <USBD_StdDevReq+0x48>)
 8006018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601c:	08006071 	.word	0x08006071
 8006020:	08006085 	.word	0x08006085
 8006024:	0800608f 	.word	0x0800608f
 8006028:	0800607b 	.word	0x0800607b
 800602c:	0800608f 	.word	0x0800608f
 8006030:	0800604f 	.word	0x0800604f
 8006034:	08006045 	.word	0x08006045
 8006038:	0800608f 	.word	0x0800608f
 800603c:	08006067 	.word	0x08006067
 8006040:	08006059 	.word	0x08006059
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f9de 	bl	8006408 <USBD_GetDescriptor>
          break;
 800604c:	e024      	b.n	8006098 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fb43 	bl	80066dc <USBD_SetAddress>
          break;
 8006056:	e01f      	b.n	8006098 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fb82 	bl	8006764 <USBD_SetConfig>
 8006060:	4603      	mov	r3, r0
 8006062:	73fb      	strb	r3, [r7, #15]
          break;
 8006064:	e018      	b.n	8006098 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fc21 	bl	80068b0 <USBD_GetConfig>
          break;
 800606e:	e013      	b.n	8006098 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006070:	6839      	ldr	r1, [r7, #0]
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fc52 	bl	800691c <USBD_GetStatus>
          break;
 8006078:	e00e      	b.n	8006098 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800607a:	6839      	ldr	r1, [r7, #0]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fc81 	bl	8006984 <USBD_SetFeature>
          break;
 8006082:	e009      	b.n	8006098 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006084:	6839      	ldr	r1, [r7, #0]
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fc90 	bl	80069ac <USBD_ClrFeature>
          break;
 800608c:	e004      	b.n	8006098 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800608e:	6839      	ldr	r1, [r7, #0]
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fce7 	bl	8006a64 <USBD_CtlError>
          break;
 8006096:	bf00      	nop
      }
      break;
 8006098:	e004      	b.n	80060a4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800609a:	6839      	ldr	r1, [r7, #0]
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fce1 	bl	8006a64 <USBD_CtlError>
      break;
 80060a2:	bf00      	nop
  }

  return ret;
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop

080060b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d005      	beq.n	80060d6 <USBD_StdItfReq+0x26>
 80060ca:	2b40      	cmp	r3, #64	; 0x40
 80060cc:	d82f      	bhi.n	800612e <USBD_StdItfReq+0x7e>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <USBD_StdItfReq+0x26>
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d12b      	bne.n	800612e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	3b01      	subs	r3, #1
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d81d      	bhi.n	8006120 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	889b      	ldrh	r3, [r3, #4]
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d813      	bhi.n	8006116 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	4798      	blx	r3
 80060fc:	4603      	mov	r3, r0
 80060fe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	88db      	ldrh	r3, [r3, #6]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d110      	bne.n	800612a <USBD_StdItfReq+0x7a>
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10d      	bne.n	800612a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fd73 	bl	8006bfa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006114:	e009      	b.n	800612a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fca3 	bl	8006a64 <USBD_CtlError>
          break;
 800611e:	e004      	b.n	800612a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fc9e 	bl	8006a64 <USBD_CtlError>
          break;
 8006128:	e000      	b.n	800612c <USBD_StdItfReq+0x7c>
          break;
 800612a:	bf00      	nop
      }
      break;
 800612c:	e004      	b.n	8006138 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fc97 	bl	8006a64 <USBD_CtlError>
      break;
 8006136:	bf00      	nop
  }

  return ret;
 8006138:	7bfb      	ldrb	r3, [r7, #15]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	889b      	ldrh	r3, [r3, #4]
 8006154:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800615e:	2b40      	cmp	r3, #64	; 0x40
 8006160:	d007      	beq.n	8006172 <USBD_StdEPReq+0x30>
 8006162:	2b40      	cmp	r3, #64	; 0x40
 8006164:	f200 8145 	bhi.w	80063f2 <USBD_StdEPReq+0x2b0>
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00c      	beq.n	8006186 <USBD_StdEPReq+0x44>
 800616c:	2b20      	cmp	r3, #32
 800616e:	f040 8140 	bne.w	80063f2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	6839      	ldr	r1, [r7, #0]
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	4798      	blx	r3
 8006180:	4603      	mov	r3, r0
 8006182:	73fb      	strb	r3, [r7, #15]
      break;
 8006184:	e13a      	b.n	80063fc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	785b      	ldrb	r3, [r3, #1]
 800618a:	2b03      	cmp	r3, #3
 800618c:	d007      	beq.n	800619e <USBD_StdEPReq+0x5c>
 800618e:	2b03      	cmp	r3, #3
 8006190:	f300 8129 	bgt.w	80063e6 <USBD_StdEPReq+0x2a4>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d07f      	beq.n	8006298 <USBD_StdEPReq+0x156>
 8006198:	2b01      	cmp	r3, #1
 800619a:	d03c      	beq.n	8006216 <USBD_StdEPReq+0xd4>
 800619c:	e123      	b.n	80063e6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d002      	beq.n	80061b0 <USBD_StdEPReq+0x6e>
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d016      	beq.n	80061dc <USBD_StdEPReq+0x9a>
 80061ae:	e02c      	b.n	800620a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061b0:	7bbb      	ldrb	r3, [r7, #14]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00d      	beq.n	80061d2 <USBD_StdEPReq+0x90>
 80061b6:	7bbb      	ldrb	r3, [r7, #14]
 80061b8:	2b80      	cmp	r3, #128	; 0x80
 80061ba:	d00a      	beq.n	80061d2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80061bc:	7bbb      	ldrb	r3, [r7, #14]
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 f94b 	bl	800745c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80061c6:	2180      	movs	r1, #128	; 0x80
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 f947 	bl	800745c <USBD_LL_StallEP>
 80061ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061d0:	e020      	b.n	8006214 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fc45 	bl	8006a64 <USBD_CtlError>
              break;
 80061da:	e01b      	b.n	8006214 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	885b      	ldrh	r3, [r3, #2]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10e      	bne.n	8006202 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80061e4:	7bbb      	ldrb	r3, [r7, #14]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00b      	beq.n	8006202 <USBD_StdEPReq+0xc0>
 80061ea:	7bbb      	ldrb	r3, [r7, #14]
 80061ec:	2b80      	cmp	r3, #128	; 0x80
 80061ee:	d008      	beq.n	8006202 <USBD_StdEPReq+0xc0>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	88db      	ldrh	r3, [r3, #6]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d104      	bne.n	8006202 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80061f8:	7bbb      	ldrb	r3, [r7, #14]
 80061fa:	4619      	mov	r1, r3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f001 f92d 	bl	800745c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fcf9 	bl	8006bfa <USBD_CtlSendStatus>

              break;
 8006208:	e004      	b.n	8006214 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fc29 	bl	8006a64 <USBD_CtlError>
              break;
 8006212:	bf00      	nop
          }
          break;
 8006214:	e0ec      	b.n	80063f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b02      	cmp	r3, #2
 8006220:	d002      	beq.n	8006228 <USBD_StdEPReq+0xe6>
 8006222:	2b03      	cmp	r3, #3
 8006224:	d016      	beq.n	8006254 <USBD_StdEPReq+0x112>
 8006226:	e030      	b.n	800628a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006228:	7bbb      	ldrb	r3, [r7, #14]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00d      	beq.n	800624a <USBD_StdEPReq+0x108>
 800622e:	7bbb      	ldrb	r3, [r7, #14]
 8006230:	2b80      	cmp	r3, #128	; 0x80
 8006232:	d00a      	beq.n	800624a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006234:	7bbb      	ldrb	r3, [r7, #14]
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 f90f 	bl	800745c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800623e:	2180      	movs	r1, #128	; 0x80
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f001 f90b 	bl	800745c <USBD_LL_StallEP>
 8006246:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006248:	e025      	b.n	8006296 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fc09 	bl	8006a64 <USBD_CtlError>
              break;
 8006252:	e020      	b.n	8006296 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	885b      	ldrh	r3, [r3, #2]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d11b      	bne.n	8006294 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800625c:	7bbb      	ldrb	r3, [r7, #14]
 800625e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006262:	2b00      	cmp	r3, #0
 8006264:	d004      	beq.n	8006270 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006266:	7bbb      	ldrb	r3, [r7, #14]
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f001 f915 	bl	800749a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fcc2 	bl	8006bfa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	4798      	blx	r3
 8006284:	4603      	mov	r3, r0
 8006286:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006288:	e004      	b.n	8006294 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fbe9 	bl	8006a64 <USBD_CtlError>
              break;
 8006292:	e000      	b.n	8006296 <USBD_StdEPReq+0x154>
              break;
 8006294:	bf00      	nop
          }
          break;
 8006296:	e0ab      	b.n	80063f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d002      	beq.n	80062aa <USBD_StdEPReq+0x168>
 80062a4:	2b03      	cmp	r3, #3
 80062a6:	d032      	beq.n	800630e <USBD_StdEPReq+0x1cc>
 80062a8:	e097      	b.n	80063da <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062aa:	7bbb      	ldrb	r3, [r7, #14]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d007      	beq.n	80062c0 <USBD_StdEPReq+0x17e>
 80062b0:	7bbb      	ldrb	r3, [r7, #14]
 80062b2:	2b80      	cmp	r3, #128	; 0x80
 80062b4:	d004      	beq.n	80062c0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80062b6:	6839      	ldr	r1, [r7, #0]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fbd3 	bl	8006a64 <USBD_CtlError>
                break;
 80062be:	e091      	b.n	80063e4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	da0b      	bge.n	80062e0 <USBD_StdEPReq+0x19e>
 80062c8:	7bbb      	ldrb	r3, [r7, #14]
 80062ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062ce:	4613      	mov	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	3310      	adds	r3, #16
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	4413      	add	r3, r2
 80062dc:	3304      	adds	r3, #4
 80062de:	e00b      	b.n	80062f8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80062e0:	7bbb      	ldrb	r3, [r7, #14]
 80062e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062e6:	4613      	mov	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	4413      	add	r3, r2
 80062f6:	3304      	adds	r3, #4
 80062f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2202      	movs	r2, #2
 8006304:	4619      	mov	r1, r3
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fc1d 	bl	8006b46 <USBD_CtlSendData>
              break;
 800630c:	e06a      	b.n	80063e4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800630e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006312:	2b00      	cmp	r3, #0
 8006314:	da11      	bge.n	800633a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006316:	7bbb      	ldrb	r3, [r7, #14]
 8006318:	f003 020f 	and.w	r2, r3, #15
 800631c:	6879      	ldr	r1, [r7, #4]
 800631e:	4613      	mov	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	440b      	add	r3, r1
 8006328:	3324      	adds	r3, #36	; 0x24
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d117      	bne.n	8006360 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fb96 	bl	8006a64 <USBD_CtlError>
                  break;
 8006338:	e054      	b.n	80063e4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800633a:	7bbb      	ldrb	r3, [r7, #14]
 800633c:	f003 020f 	and.w	r2, r3, #15
 8006340:	6879      	ldr	r1, [r7, #4]
 8006342:	4613      	mov	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	440b      	add	r3, r1
 800634c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d104      	bne.n	8006360 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006356:	6839      	ldr	r1, [r7, #0]
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fb83 	bl	8006a64 <USBD_CtlError>
                  break;
 800635e:	e041      	b.n	80063e4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006360:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006364:	2b00      	cmp	r3, #0
 8006366:	da0b      	bge.n	8006380 <USBD_StdEPReq+0x23e>
 8006368:	7bbb      	ldrb	r3, [r7, #14]
 800636a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	3310      	adds	r3, #16
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	4413      	add	r3, r2
 800637c:	3304      	adds	r3, #4
 800637e:	e00b      	b.n	8006398 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006380:	7bbb      	ldrb	r3, [r7, #14]
 8006382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	4413      	add	r3, r2
 8006396:	3304      	adds	r3, #4
 8006398:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800639a:	7bbb      	ldrb	r3, [r7, #14]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <USBD_StdEPReq+0x264>
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	2b80      	cmp	r3, #128	; 0x80
 80063a4:	d103      	bne.n	80063ae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	e00e      	b.n	80063cc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80063ae:	7bbb      	ldrb	r3, [r7, #14]
 80063b0:	4619      	mov	r1, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 f890 	bl	80074d8 <USBD_LL_IsStallEP>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2201      	movs	r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	e002      	b.n	80063cc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2200      	movs	r2, #0
 80063ca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2202      	movs	r2, #2
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fbb7 	bl	8006b46 <USBD_CtlSendData>
              break;
 80063d8:	e004      	b.n	80063e4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80063da:	6839      	ldr	r1, [r7, #0]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fb41 	bl	8006a64 <USBD_CtlError>
              break;
 80063e2:	bf00      	nop
          }
          break;
 80063e4:	e004      	b.n	80063f0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fb3b 	bl	8006a64 <USBD_CtlError>
          break;
 80063ee:	bf00      	nop
      }
      break;
 80063f0:	e004      	b.n	80063fc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fb35 	bl	8006a64 <USBD_CtlError>
      break;
 80063fa:	bf00      	nop
  }

  return ret;
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	885b      	ldrh	r3, [r3, #2]
 8006422:	0a1b      	lsrs	r3, r3, #8
 8006424:	b29b      	uxth	r3, r3
 8006426:	3b01      	subs	r3, #1
 8006428:	2b06      	cmp	r3, #6
 800642a:	f200 8128 	bhi.w	800667e <USBD_GetDescriptor+0x276>
 800642e:	a201      	add	r2, pc, #4	; (adr r2, 8006434 <USBD_GetDescriptor+0x2c>)
 8006430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006434:	08006451 	.word	0x08006451
 8006438:	08006469 	.word	0x08006469
 800643c:	080064a9 	.word	0x080064a9
 8006440:	0800667f 	.word	0x0800667f
 8006444:	0800667f 	.word	0x0800667f
 8006448:	0800661f 	.word	0x0800661f
 800644c:	0800664b 	.word	0x0800664b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	7c12      	ldrb	r2, [r2, #16]
 800645c:	f107 0108 	add.w	r1, r7, #8
 8006460:	4610      	mov	r0, r2
 8006462:	4798      	blx	r3
 8006464:	60f8      	str	r0, [r7, #12]
      break;
 8006466:	e112      	b.n	800668e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	7c1b      	ldrb	r3, [r3, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10d      	bne.n	800648c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006478:	f107 0208 	add.w	r2, r7, #8
 800647c:	4610      	mov	r0, r2
 800647e:	4798      	blx	r3
 8006480:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3301      	adds	r3, #1
 8006486:	2202      	movs	r2, #2
 8006488:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800648a:	e100      	b.n	800668e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	f107 0208 	add.w	r2, r7, #8
 8006498:	4610      	mov	r0, r2
 800649a:	4798      	blx	r3
 800649c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3301      	adds	r3, #1
 80064a2:	2202      	movs	r2, #2
 80064a4:	701a      	strb	r2, [r3, #0]
      break;
 80064a6:	e0f2      	b.n	800668e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	885b      	ldrh	r3, [r3, #2]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b05      	cmp	r3, #5
 80064b0:	f200 80ac 	bhi.w	800660c <USBD_GetDescriptor+0x204>
 80064b4:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <USBD_GetDescriptor+0xb4>)
 80064b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ba:	bf00      	nop
 80064bc:	080064d5 	.word	0x080064d5
 80064c0:	08006509 	.word	0x08006509
 80064c4:	0800653d 	.word	0x0800653d
 80064c8:	08006571 	.word	0x08006571
 80064cc:	080065a5 	.word	0x080065a5
 80064d0:	080065d9 	.word	0x080065d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00b      	beq.n	80064f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	7c12      	ldrb	r2, [r2, #16]
 80064ec:	f107 0108 	add.w	r1, r7, #8
 80064f0:	4610      	mov	r0, r2
 80064f2:	4798      	blx	r3
 80064f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064f6:	e091      	b.n	800661c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fab2 	bl	8006a64 <USBD_CtlError>
            err++;
 8006500:	7afb      	ldrb	r3, [r7, #11]
 8006502:	3301      	adds	r3, #1
 8006504:	72fb      	strb	r3, [r7, #11]
          break;
 8006506:	e089      	b.n	800661c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00b      	beq.n	800652c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	7c12      	ldrb	r2, [r2, #16]
 8006520:	f107 0108 	add.w	r1, r7, #8
 8006524:	4610      	mov	r0, r2
 8006526:	4798      	blx	r3
 8006528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800652a:	e077      	b.n	800661c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fa98 	bl	8006a64 <USBD_CtlError>
            err++;
 8006534:	7afb      	ldrb	r3, [r7, #11]
 8006536:	3301      	adds	r3, #1
 8006538:	72fb      	strb	r3, [r7, #11]
          break;
 800653a:	e06f      	b.n	800661c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00b      	beq.n	8006560 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	7c12      	ldrb	r2, [r2, #16]
 8006554:	f107 0108 	add.w	r1, r7, #8
 8006558:	4610      	mov	r0, r2
 800655a:	4798      	blx	r3
 800655c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800655e:	e05d      	b.n	800661c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fa7e 	bl	8006a64 <USBD_CtlError>
            err++;
 8006568:	7afb      	ldrb	r3, [r7, #11]
 800656a:	3301      	adds	r3, #1
 800656c:	72fb      	strb	r3, [r7, #11]
          break;
 800656e:	e055      	b.n	800661c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00b      	beq.n	8006594 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	7c12      	ldrb	r2, [r2, #16]
 8006588:	f107 0108 	add.w	r1, r7, #8
 800658c:	4610      	mov	r0, r2
 800658e:	4798      	blx	r3
 8006590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006592:	e043      	b.n	800661c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006594:	6839      	ldr	r1, [r7, #0]
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fa64 	bl	8006a64 <USBD_CtlError>
            err++;
 800659c:	7afb      	ldrb	r3, [r7, #11]
 800659e:	3301      	adds	r3, #1
 80065a0:	72fb      	strb	r3, [r7, #11]
          break;
 80065a2:	e03b      	b.n	800661c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00b      	beq.n	80065c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	7c12      	ldrb	r2, [r2, #16]
 80065bc:	f107 0108 	add.w	r1, r7, #8
 80065c0:	4610      	mov	r0, r2
 80065c2:	4798      	blx	r3
 80065c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065c6:	e029      	b.n	800661c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fa4a 	bl	8006a64 <USBD_CtlError>
            err++;
 80065d0:	7afb      	ldrb	r3, [r7, #11]
 80065d2:	3301      	adds	r3, #1
 80065d4:	72fb      	strb	r3, [r7, #11]
          break;
 80065d6:	e021      	b.n	800661c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00b      	beq.n	80065fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	7c12      	ldrb	r2, [r2, #16]
 80065f0:	f107 0108 	add.w	r1, r7, #8
 80065f4:	4610      	mov	r0, r2
 80065f6:	4798      	blx	r3
 80065f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065fa:	e00f      	b.n	800661c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fa30 	bl	8006a64 <USBD_CtlError>
            err++;
 8006604:	7afb      	ldrb	r3, [r7, #11]
 8006606:	3301      	adds	r3, #1
 8006608:	72fb      	strb	r3, [r7, #11]
          break;
 800660a:	e007      	b.n	800661c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fa28 	bl	8006a64 <USBD_CtlError>
          err++;
 8006614:	7afb      	ldrb	r3, [r7, #11]
 8006616:	3301      	adds	r3, #1
 8006618:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800661a:	bf00      	nop
      }
      break;
 800661c:	e037      	b.n	800668e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	7c1b      	ldrb	r3, [r3, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d109      	bne.n	800663a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662e:	f107 0208 	add.w	r2, r7, #8
 8006632:	4610      	mov	r0, r2
 8006634:	4798      	blx	r3
 8006636:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006638:	e029      	b.n	800668e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fa11 	bl	8006a64 <USBD_CtlError>
        err++;
 8006642:	7afb      	ldrb	r3, [r7, #11]
 8006644:	3301      	adds	r3, #1
 8006646:	72fb      	strb	r3, [r7, #11]
      break;
 8006648:	e021      	b.n	800668e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	7c1b      	ldrb	r3, [r3, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10d      	bne.n	800666e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665a:	f107 0208 	add.w	r2, r7, #8
 800665e:	4610      	mov	r0, r2
 8006660:	4798      	blx	r3
 8006662:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3301      	adds	r3, #1
 8006668:	2207      	movs	r2, #7
 800666a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800666c:	e00f      	b.n	800668e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f9f7 	bl	8006a64 <USBD_CtlError>
        err++;
 8006676:	7afb      	ldrb	r3, [r7, #11]
 8006678:	3301      	adds	r3, #1
 800667a:	72fb      	strb	r3, [r7, #11]
      break;
 800667c:	e007      	b.n	800668e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f9ef 	bl	8006a64 <USBD_CtlError>
      err++;
 8006686:	7afb      	ldrb	r3, [r7, #11]
 8006688:	3301      	adds	r3, #1
 800668a:	72fb      	strb	r3, [r7, #11]
      break;
 800668c:	bf00      	nop
  }

  if (err != 0U)
 800668e:	7afb      	ldrb	r3, [r7, #11]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d11e      	bne.n	80066d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	88db      	ldrh	r3, [r3, #6]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d016      	beq.n	80066ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800669c:	893b      	ldrh	r3, [r7, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00e      	beq.n	80066c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	88da      	ldrh	r2, [r3, #6]
 80066a6:	893b      	ldrh	r3, [r7, #8]
 80066a8:	4293      	cmp	r3, r2
 80066aa:	bf28      	it	cs
 80066ac:	4613      	movcs	r3, r2
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80066b2:	893b      	ldrh	r3, [r7, #8]
 80066b4:	461a      	mov	r2, r3
 80066b6:	68f9      	ldr	r1, [r7, #12]
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fa44 	bl	8006b46 <USBD_CtlSendData>
 80066be:	e009      	b.n	80066d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f9ce 	bl	8006a64 <USBD_CtlError>
 80066c8:	e004      	b.n	80066d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fa95 	bl	8006bfa <USBD_CtlSendStatus>
 80066d0:	e000      	b.n	80066d4 <USBD_GetDescriptor+0x2cc>
    return;
 80066d2:	bf00      	nop
  }
}
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop

080066dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	889b      	ldrh	r3, [r3, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d131      	bne.n	8006752 <USBD_SetAddress+0x76>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	88db      	ldrh	r3, [r3, #6]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d12d      	bne.n	8006752 <USBD_SetAddress+0x76>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	885b      	ldrh	r3, [r3, #2]
 80066fa:	2b7f      	cmp	r3, #127	; 0x7f
 80066fc:	d829      	bhi.n	8006752 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	885b      	ldrh	r3, [r3, #2]
 8006702:	b2db      	uxtb	r3, r3
 8006704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006708:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b03      	cmp	r3, #3
 8006714:	d104      	bne.n	8006720 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f9a3 	bl	8006a64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800671e:	e01d      	b.n	800675c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	7bfa      	ldrb	r2, [r7, #15]
 8006724:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006728:	7bfb      	ldrb	r3, [r7, #15]
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 feff 	bl	8007530 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa61 	bl	8006bfa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2202      	movs	r2, #2
 8006742:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006746:	e009      	b.n	800675c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006750:	e004      	b.n	800675c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f985 	bl	8006a64 <USBD_CtlError>
  }
}
 800675a:	bf00      	nop
 800675c:	bf00      	nop
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	885b      	ldrh	r3, [r3, #2]
 8006776:	b2da      	uxtb	r2, r3
 8006778:	4b4c      	ldr	r3, [pc, #304]	; (80068ac <USBD_SetConfig+0x148>)
 800677a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800677c:	4b4b      	ldr	r3, [pc, #300]	; (80068ac <USBD_SetConfig+0x148>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d905      	bls.n	8006790 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f96c 	bl	8006a64 <USBD_CtlError>
    return USBD_FAIL;
 800678c:	2303      	movs	r3, #3
 800678e:	e088      	b.n	80068a2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b02      	cmp	r3, #2
 800679a:	d002      	beq.n	80067a2 <USBD_SetConfig+0x3e>
 800679c:	2b03      	cmp	r3, #3
 800679e:	d025      	beq.n	80067ec <USBD_SetConfig+0x88>
 80067a0:	e071      	b.n	8006886 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80067a2:	4b42      	ldr	r3, [pc, #264]	; (80068ac <USBD_SetConfig+0x148>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d01c      	beq.n	80067e4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80067aa:	4b40      	ldr	r3, [pc, #256]	; (80068ac <USBD_SetConfig+0x148>)
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80067b4:	4b3d      	ldr	r3, [pc, #244]	; (80068ac <USBD_SetConfig+0x148>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7ff f948 	bl	8005a50 <USBD_SetClassConfig>
 80067c0:	4603      	mov	r3, r0
 80067c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d004      	beq.n	80067d4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f949 	bl	8006a64 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80067d2:	e065      	b.n	80068a0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fa10 	bl	8006bfa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2203      	movs	r2, #3
 80067de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80067e2:	e05d      	b.n	80068a0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fa08 	bl	8006bfa <USBD_CtlSendStatus>
      break;
 80067ea:	e059      	b.n	80068a0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80067ec:	4b2f      	ldr	r3, [pc, #188]	; (80068ac <USBD_SetConfig+0x148>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d112      	bne.n	800681a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80067fc:	4b2b      	ldr	r3, [pc, #172]	; (80068ac <USBD_SetConfig+0x148>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	461a      	mov	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006806:	4b29      	ldr	r3, [pc, #164]	; (80068ac <USBD_SetConfig+0x148>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7ff f93b 	bl	8005a88 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f9f1 	bl	8006bfa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006818:	e042      	b.n	80068a0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800681a:	4b24      	ldr	r3, [pc, #144]	; (80068ac <USBD_SetConfig+0x148>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	429a      	cmp	r2, r3
 8006826:	d02a      	beq.n	800687e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff f929 	bl	8005a88 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006836:	4b1d      	ldr	r3, [pc, #116]	; (80068ac <USBD_SetConfig+0x148>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006840:	4b1a      	ldr	r3, [pc, #104]	; (80068ac <USBD_SetConfig+0x148>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7ff f902 	bl	8005a50 <USBD_SetClassConfig>
 800684c:	4603      	mov	r3, r0
 800684e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00f      	beq.n	8006876 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f903 	bl	8006a64 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7ff f90e 	bl	8005a88 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006874:	e014      	b.n	80068a0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f9bf 	bl	8006bfa <USBD_CtlSendStatus>
      break;
 800687c:	e010      	b.n	80068a0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f9bb 	bl	8006bfa <USBD_CtlSendStatus>
      break;
 8006884:	e00c      	b.n	80068a0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 f8eb 	bl	8006a64 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800688e:	4b07      	ldr	r3, [pc, #28]	; (80068ac <USBD_SetConfig+0x148>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7ff f8f7 	bl	8005a88 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800689a:	2303      	movs	r3, #3
 800689c:	73fb      	strb	r3, [r7, #15]
      break;
 800689e:	bf00      	nop
  }

  return ret;
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	2000020c 	.word	0x2000020c

080068b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	88db      	ldrh	r3, [r3, #6]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d004      	beq.n	80068cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f8cd 	bl	8006a64 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80068ca:	e023      	b.n	8006914 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	dc02      	bgt.n	80068de <USBD_GetConfig+0x2e>
 80068d8:	2b00      	cmp	r3, #0
 80068da:	dc03      	bgt.n	80068e4 <USBD_GetConfig+0x34>
 80068dc:	e015      	b.n	800690a <USBD_GetConfig+0x5a>
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d00b      	beq.n	80068fa <USBD_GetConfig+0x4a>
 80068e2:	e012      	b.n	800690a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	3308      	adds	r3, #8
 80068ee:	2201      	movs	r2, #1
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f927 	bl	8006b46 <USBD_CtlSendData>
        break;
 80068f8:	e00c      	b.n	8006914 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3304      	adds	r3, #4
 80068fe:	2201      	movs	r2, #1
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f91f 	bl	8006b46 <USBD_CtlSendData>
        break;
 8006908:	e004      	b.n	8006914 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f8a9 	bl	8006a64 <USBD_CtlError>
        break;
 8006912:	bf00      	nop
}
 8006914:	bf00      	nop
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692c:	b2db      	uxtb	r3, r3
 800692e:	3b01      	subs	r3, #1
 8006930:	2b02      	cmp	r3, #2
 8006932:	d81e      	bhi.n	8006972 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	88db      	ldrh	r3, [r3, #6]
 8006938:	2b02      	cmp	r3, #2
 800693a:	d004      	beq.n	8006946 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f890 	bl	8006a64 <USBD_CtlError>
        break;
 8006944:	e01a      	b.n	800697c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	f043 0202 	orr.w	r2, r3, #2
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	330c      	adds	r3, #12
 8006966:	2202      	movs	r2, #2
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f8eb 	bl	8006b46 <USBD_CtlSendData>
      break;
 8006970:	e004      	b.n	800697c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f875 	bl	8006a64 <USBD_CtlError>
      break;
 800697a:	bf00      	nop
  }
}
 800697c:	bf00      	nop
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	885b      	ldrh	r3, [r3, #2]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d106      	bne.n	80069a4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f92b 	bl	8006bfa <USBD_CtlSendStatus>
  }
}
 80069a4:	bf00      	nop
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d80b      	bhi.n	80069dc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	885b      	ldrh	r3, [r3, #2]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d10c      	bne.n	80069e6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f910 	bl	8006bfa <USBD_CtlSendStatus>
      }
      break;
 80069da:	e004      	b.n	80069e6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f840 	bl	8006a64 <USBD_CtlError>
      break;
 80069e4:	e000      	b.n	80069e8 <USBD_ClrFeature+0x3c>
      break;
 80069e6:	bf00      	nop
  }
}
 80069e8:	bf00      	nop
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	781a      	ldrb	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	781a      	ldrb	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	3301      	adds	r3, #1
 8006a18:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7ff fabb 	bl	8005f96 <SWAPBYTE>
 8006a20:	4603      	mov	r3, r0
 8006a22:	461a      	mov	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	3301      	adds	r3, #1
 8006a32:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f7ff faae 	bl	8005f96 <SWAPBYTE>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	3301      	adds	r3, #1
 8006a46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f7ff faa1 	bl	8005f96 <SWAPBYTE>
 8006a54:	4603      	mov	r3, r0
 8006a56:	461a      	mov	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	80da      	strh	r2, [r3, #6]
}
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a6e:	2180      	movs	r1, #128	; 0x80
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fcf3 	bl	800745c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006a76:	2100      	movs	r1, #0
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fcef 	bl	800745c <USBD_LL_StallEP>
}
 8006a7e:	bf00      	nop
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b086      	sub	sp, #24
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d036      	beq.n	8006b0a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006aa0:	6938      	ldr	r0, [r7, #16]
 8006aa2:	f000 f836 	bl	8006b12 <USBD_GetLen>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	4413      	add	r3, r2
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	7812      	ldrb	r2, [r2, #0]
 8006abe:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ac6:	7dfb      	ldrb	r3, [r7, #23]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	4413      	add	r3, r2
 8006acc:	2203      	movs	r2, #3
 8006ace:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006ad6:	e013      	b.n	8006b00 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006ad8:	7dfb      	ldrb	r3, [r7, #23]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	4413      	add	r3, r2
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	7812      	ldrb	r2, [r2, #0]
 8006ae2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	613b      	str	r3, [r7, #16]
    idx++;
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
 8006aec:	3301      	adds	r3, #1
 8006aee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	4413      	add	r3, r2
 8006af6:	2200      	movs	r2, #0
 8006af8:	701a      	strb	r2, [r3, #0]
    idx++;
 8006afa:	7dfb      	ldrb	r3, [r7, #23]
 8006afc:	3301      	adds	r3, #1
 8006afe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e7      	bne.n	8006ad8 <USBD_GetString+0x52>
 8006b08:	e000      	b.n	8006b0c <USBD_GetString+0x86>
    return;
 8006b0a:	bf00      	nop
  }
}
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b085      	sub	sp, #20
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006b22:	e005      	b.n	8006b30 <USBD_GetLen+0x1e>
  {
    len++;
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	3301      	adds	r3, #1
 8006b28:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1f5      	bne.n	8006b24 <USBD_GetLen+0x12>
  }

  return len;
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	60b9      	str	r1, [r7, #8]
 8006b50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2202      	movs	r2, #2
 8006b56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 fcfe 	bl	800756e <USBD_LL_Transmit>

  return USBD_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 fced 	bl	800756e <USBD_LL_Transmit>

  return USBD_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2203      	movs	r2, #3
 8006bae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 fcf1 	bl	80075b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	2100      	movs	r1, #0
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 fce0 	bl	80075b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b082      	sub	sp, #8
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2204      	movs	r2, #4
 8006c06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2100      	movs	r1, #0
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fcac 	bl	800756e <USBD_LL_Transmit>

  return USBD_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2205      	movs	r2, #5
 8006c2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c30:	2300      	movs	r3, #0
 8006c32:	2200      	movs	r2, #0
 8006c34:	2100      	movs	r1, #0
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fcba 	bl	80075b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	4912      	ldr	r1, [pc, #72]	; (8006c98 <MX_USB_DEVICE_Init+0x50>)
 8006c50:	4812      	ldr	r0, [pc, #72]	; (8006c9c <MX_USB_DEVICE_Init+0x54>)
 8006c52:	f7fe fe8f 	bl	8005974 <USBD_Init>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006c5c:	f7f9 fe3e 	bl	80008dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006c60:	490f      	ldr	r1, [pc, #60]	; (8006ca0 <MX_USB_DEVICE_Init+0x58>)
 8006c62:	480e      	ldr	r0, [pc, #56]	; (8006c9c <MX_USB_DEVICE_Init+0x54>)
 8006c64:	f7fe feb6 	bl	80059d4 <USBD_RegisterClass>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006c6e:	f7f9 fe35 	bl	80008dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006c72:	490c      	ldr	r1, [pc, #48]	; (8006ca4 <MX_USB_DEVICE_Init+0x5c>)
 8006c74:	4809      	ldr	r0, [pc, #36]	; (8006c9c <MX_USB_DEVICE_Init+0x54>)
 8006c76:	f7fe fdd7 	bl	8005828 <USBD_CDC_RegisterInterface>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006c80:	f7f9 fe2c 	bl	80008dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006c84:	4805      	ldr	r0, [pc, #20]	; (8006c9c <MX_USB_DEVICE_Init+0x54>)
 8006c86:	f7fe fecc 	bl	8005a22 <USBD_Start>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006c90:	f7f9 fe24 	bl	80008dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006c94:	bf00      	nop
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	20000130 	.word	0x20000130
 8006c9c:	20000550 	.word	0x20000550
 8006ca0:	20000018 	.word	0x20000018
 8006ca4:	2000011c 	.word	0x2000011c

08006ca8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006cac:	2200      	movs	r2, #0
 8006cae:	4905      	ldr	r1, [pc, #20]	; (8006cc4 <CDC_Init_FS+0x1c>)
 8006cb0:	4805      	ldr	r0, [pc, #20]	; (8006cc8 <CDC_Init_FS+0x20>)
 8006cb2:	f7fe fdce 	bl	8005852 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006cb6:	4905      	ldr	r1, [pc, #20]	; (8006ccc <CDC_Init_FS+0x24>)
 8006cb8:	4803      	ldr	r0, [pc, #12]	; (8006cc8 <CDC_Init_FS+0x20>)
 8006cba:	f7fe fde8 	bl	800588e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006cbe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	20001020 	.word	0x20001020
 8006cc8:	20000550 	.word	0x20000550
 8006ccc:	20000820 	.word	0x20000820

08006cd0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006cd4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	6039      	str	r1, [r7, #0]
 8006cea:	71fb      	strb	r3, [r7, #7]
 8006cec:	4613      	mov	r3, r2
 8006cee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006cf0:	79fb      	ldrb	r3, [r7, #7]
 8006cf2:	2b23      	cmp	r3, #35	; 0x23
 8006cf4:	d84a      	bhi.n	8006d8c <CDC_Control_FS+0xac>
 8006cf6:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <CDC_Control_FS+0x1c>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006d8d 	.word	0x08006d8d
 8006d00:	08006d8d 	.word	0x08006d8d
 8006d04:	08006d8d 	.word	0x08006d8d
 8006d08:	08006d8d 	.word	0x08006d8d
 8006d0c:	08006d8d 	.word	0x08006d8d
 8006d10:	08006d8d 	.word	0x08006d8d
 8006d14:	08006d8d 	.word	0x08006d8d
 8006d18:	08006d8d 	.word	0x08006d8d
 8006d1c:	08006d8d 	.word	0x08006d8d
 8006d20:	08006d8d 	.word	0x08006d8d
 8006d24:	08006d8d 	.word	0x08006d8d
 8006d28:	08006d8d 	.word	0x08006d8d
 8006d2c:	08006d8d 	.word	0x08006d8d
 8006d30:	08006d8d 	.word	0x08006d8d
 8006d34:	08006d8d 	.word	0x08006d8d
 8006d38:	08006d8d 	.word	0x08006d8d
 8006d3c:	08006d8d 	.word	0x08006d8d
 8006d40:	08006d8d 	.word	0x08006d8d
 8006d44:	08006d8d 	.word	0x08006d8d
 8006d48:	08006d8d 	.word	0x08006d8d
 8006d4c:	08006d8d 	.word	0x08006d8d
 8006d50:	08006d8d 	.word	0x08006d8d
 8006d54:	08006d8d 	.word	0x08006d8d
 8006d58:	08006d8d 	.word	0x08006d8d
 8006d5c:	08006d8d 	.word	0x08006d8d
 8006d60:	08006d8d 	.word	0x08006d8d
 8006d64:	08006d8d 	.word	0x08006d8d
 8006d68:	08006d8d 	.word	0x08006d8d
 8006d6c:	08006d8d 	.word	0x08006d8d
 8006d70:	08006d8d 	.word	0x08006d8d
 8006d74:	08006d8d 	.word	0x08006d8d
 8006d78:	08006d8d 	.word	0x08006d8d
 8006d7c:	08006d8d 	.word	0x08006d8d
 8006d80:	08006d8d 	.word	0x08006d8d
 8006d84:	08006d8d 	.word	0x08006d8d
 8006d88:	08006d8d 	.word	0x08006d8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006d8c:	bf00      	nop
  }

  return (USBD_OK);
 8006d8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006da6:	6879      	ldr	r1, [r7, #4]
 8006da8:	4811      	ldr	r0, [pc, #68]	; (8006df0 <CDC_Receive_FS+0x54>)
 8006daa:	f7fe fd70 	bl	800588e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006dae:	4810      	ldr	r0, [pc, #64]	; (8006df0 <CDC_Receive_FS+0x54>)
 8006db0:	f7fe fdb6 	bl	8005920 <USBD_CDC_ReceivePacket>
   extern uint8_t ReceivedData[40]; // Tablica przechowujaca odebrane dane
   extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych

   // Wyczyszczenie tablicy odebranych danych
   uint8_t iter;
   for(iter = 0; iter<40; ++iter){
 8006db4:	2300      	movs	r3, #0
 8006db6:	73fb      	strb	r3, [r7, #15]
 8006db8:	e006      	b.n	8006dc8 <CDC_Receive_FS+0x2c>
 	  ReceivedData[iter] = 0;
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
 8006dbc:	4a0d      	ldr	r2, [pc, #52]	; (8006df4 <CDC_Receive_FS+0x58>)
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	54d1      	strb	r1, [r2, r3]
   for(iter = 0; iter<40; ++iter){
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	73fb      	strb	r3, [r7, #15]
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	2b27      	cmp	r3, #39	; 0x27
 8006dcc:	d9f5      	bls.n	8006dba <CDC_Receive_FS+0x1e>
   }

   strlcpy(ReceivedData, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	6879      	ldr	r1, [r7, #4]
 8006dd8:	4806      	ldr	r0, [pc, #24]	; (8006df4 <CDC_Receive_FS+0x58>)
 8006dda:	f000 fcc0 	bl	800775e <strlcpy>
   ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 8006dde:	4b06      	ldr	r3, [pc, #24]	; (8006df8 <CDC_Receive_FS+0x5c>)
 8006de0:	2201      	movs	r2, #1
 8006de2:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 8006de4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	20000550 	.word	0x20000550
 8006df4:	200004d8 	.word	0x200004d8
 8006df8:	20000206 	.word	0x20000206

08006dfc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006e0c:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <CDC_Transmit_FS+0x48>)
 8006e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e12:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e00b      	b.n	8006e3a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006e22:	887b      	ldrh	r3, [r7, #2]
 8006e24:	461a      	mov	r2, r3
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	4806      	ldr	r0, [pc, #24]	; (8006e44 <CDC_Transmit_FS+0x48>)
 8006e2a:	f7fe fd12 	bl	8005852 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006e2e:	4805      	ldr	r0, [pc, #20]	; (8006e44 <CDC_Transmit_FS+0x48>)
 8006e30:	f7fe fd46 	bl	80058c0 <USBD_CDC_TransmitPacket>
 8006e34:	4603      	mov	r3, r0
 8006e36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	20000550 	.word	0x20000550

08006e48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	4613      	mov	r3, r2
 8006e54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006e5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	371c      	adds	r7, #28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
	...

08006e6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	4603      	mov	r3, r0
 8006e74:	6039      	str	r1, [r7, #0]
 8006e76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2212      	movs	r2, #18
 8006e7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e7e:	4b03      	ldr	r3, [pc, #12]	; (8006e8c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	2000014c 	.word	0x2000014c

08006e90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	4603      	mov	r3, r0
 8006e98:	6039      	str	r1, [r7, #0]
 8006e9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2204      	movs	r2, #4
 8006ea0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006ea2:	4b03      	ldr	r3, [pc, #12]	; (8006eb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	20000160 	.word	0x20000160

08006eb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	4603      	mov	r3, r0
 8006ebc:	6039      	str	r1, [r7, #0]
 8006ebe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ec0:	79fb      	ldrb	r3, [r7, #7]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d105      	bne.n	8006ed2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	4907      	ldr	r1, [pc, #28]	; (8006ee8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006eca:	4808      	ldr	r0, [pc, #32]	; (8006eec <USBD_FS_ProductStrDescriptor+0x38>)
 8006ecc:	f7ff fddb 	bl	8006a86 <USBD_GetString>
 8006ed0:	e004      	b.n	8006edc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	4904      	ldr	r1, [pc, #16]	; (8006ee8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ed6:	4805      	ldr	r0, [pc, #20]	; (8006eec <USBD_FS_ProductStrDescriptor+0x38>)
 8006ed8:	f7ff fdd5 	bl	8006a86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006edc:	4b02      	ldr	r3, [pc, #8]	; (8006ee8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20001820 	.word	0x20001820
 8006eec:	08008120 	.word	0x08008120

08006ef0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	6039      	str	r1, [r7, #0]
 8006efa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	4904      	ldr	r1, [pc, #16]	; (8006f10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f00:	4804      	ldr	r0, [pc, #16]	; (8006f14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f02:	f7ff fdc0 	bl	8006a86 <USBD_GetString>
  return USBD_StrDesc;
 8006f06:	4b02      	ldr	r3, [pc, #8]	; (8006f10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	20001820 	.word	0x20001820
 8006f14:	08008138 	.word	0x08008138

08006f18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	6039      	str	r1, [r7, #0]
 8006f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	221a      	movs	r2, #26
 8006f28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f2a:	f000 f843 	bl	8006fb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f2e:	4b02      	ldr	r3, [pc, #8]	; (8006f38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	20000164 	.word	0x20000164

08006f3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	4603      	mov	r3, r0
 8006f44:	6039      	str	r1, [r7, #0]
 8006f46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d105      	bne.n	8006f5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	4907      	ldr	r1, [pc, #28]	; (8006f70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f52:	4808      	ldr	r0, [pc, #32]	; (8006f74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f54:	f7ff fd97 	bl	8006a86 <USBD_GetString>
 8006f58:	e004      	b.n	8006f64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	4904      	ldr	r1, [pc, #16]	; (8006f70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f5e:	4805      	ldr	r0, [pc, #20]	; (8006f74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f60:	f7ff fd91 	bl	8006a86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f64:	4b02      	ldr	r3, [pc, #8]	; (8006f70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20001820 	.word	0x20001820
 8006f74:	0800814c 	.word	0x0800814c

08006f78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	4603      	mov	r3, r0
 8006f80:	6039      	str	r1, [r7, #0]
 8006f82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f84:	79fb      	ldrb	r3, [r7, #7]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d105      	bne.n	8006f96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	4907      	ldr	r1, [pc, #28]	; (8006fac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f8e:	4808      	ldr	r0, [pc, #32]	; (8006fb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f90:	f7ff fd79 	bl	8006a86 <USBD_GetString>
 8006f94:	e004      	b.n	8006fa0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	4904      	ldr	r1, [pc, #16]	; (8006fac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f9a:	4805      	ldr	r0, [pc, #20]	; (8006fb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f9c:	f7ff fd73 	bl	8006a86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fa0:	4b02      	ldr	r3, [pc, #8]	; (8006fac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20001820 	.word	0x20001820
 8006fb0:	08008158 	.word	0x08008158

08006fb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006fba:	4b0f      	ldr	r3, [pc, #60]	; (8006ff8 <Get_SerialNum+0x44>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006fc0:	4b0e      	ldr	r3, [pc, #56]	; (8006ffc <Get_SerialNum+0x48>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006fc6:	4b0e      	ldr	r3, [pc, #56]	; (8007000 <Get_SerialNum+0x4c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d009      	beq.n	8006fee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006fda:	2208      	movs	r2, #8
 8006fdc:	4909      	ldr	r1, [pc, #36]	; (8007004 <Get_SerialNum+0x50>)
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 f814 	bl	800700c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006fe4:	2204      	movs	r2, #4
 8006fe6:	4908      	ldr	r1, [pc, #32]	; (8007008 <Get_SerialNum+0x54>)
 8006fe8:	68b8      	ldr	r0, [r7, #8]
 8006fea:	f000 f80f 	bl	800700c <IntToUnicode>
  }
}
 8006fee:	bf00      	nop
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	1fff7a10 	.word	0x1fff7a10
 8006ffc:	1fff7a14 	.word	0x1fff7a14
 8007000:	1fff7a18 	.word	0x1fff7a18
 8007004:	20000166 	.word	0x20000166
 8007008:	20000176 	.word	0x20000176

0800700c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	4613      	mov	r3, r2
 8007018:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800701a:	2300      	movs	r3, #0
 800701c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800701e:	2300      	movs	r3, #0
 8007020:	75fb      	strb	r3, [r7, #23]
 8007022:	e027      	b.n	8007074 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	0f1b      	lsrs	r3, r3, #28
 8007028:	2b09      	cmp	r3, #9
 800702a:	d80b      	bhi.n	8007044 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	0f1b      	lsrs	r3, r3, #28
 8007030:	b2da      	uxtb	r2, r3
 8007032:	7dfb      	ldrb	r3, [r7, #23]
 8007034:	005b      	lsls	r3, r3, #1
 8007036:	4619      	mov	r1, r3
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	440b      	add	r3, r1
 800703c:	3230      	adds	r2, #48	; 0x30
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	e00a      	b.n	800705a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	0f1b      	lsrs	r3, r3, #28
 8007048:	b2da      	uxtb	r2, r3
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	4619      	mov	r1, r3
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	440b      	add	r3, r1
 8007054:	3237      	adds	r2, #55	; 0x37
 8007056:	b2d2      	uxtb	r2, r2
 8007058:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	011b      	lsls	r3, r3, #4
 800705e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007060:	7dfb      	ldrb	r3, [r7, #23]
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	3301      	adds	r3, #1
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	4413      	add	r3, r2
 800706a:	2200      	movs	r2, #0
 800706c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800706e:	7dfb      	ldrb	r3, [r7, #23]
 8007070:	3301      	adds	r3, #1
 8007072:	75fb      	strb	r3, [r7, #23]
 8007074:	7dfa      	ldrb	r2, [r7, #23]
 8007076:	79fb      	ldrb	r3, [r7, #7]
 8007078:	429a      	cmp	r2, r3
 800707a:	d3d3      	bcc.n	8007024 <IntToUnicode+0x18>
  }
}
 800707c:	bf00      	nop
 800707e:	bf00      	nop
 8007080:	371c      	adds	r7, #28
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
	...

0800708c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08a      	sub	sp, #40	; 0x28
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007094:	f107 0314 	add.w	r3, r7, #20
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	605a      	str	r2, [r3, #4]
 800709e:	609a      	str	r2, [r3, #8]
 80070a0:	60da      	str	r2, [r3, #12]
 80070a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070ac:	d13a      	bne.n	8007124 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070ae:	2300      	movs	r3, #0
 80070b0:	613b      	str	r3, [r7, #16]
 80070b2:	4b1e      	ldr	r3, [pc, #120]	; (800712c <HAL_PCD_MspInit+0xa0>)
 80070b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b6:	4a1d      	ldr	r2, [pc, #116]	; (800712c <HAL_PCD_MspInit+0xa0>)
 80070b8:	f043 0301 	orr.w	r3, r3, #1
 80070bc:	6313      	str	r3, [r2, #48]	; 0x30
 80070be:	4b1b      	ldr	r3, [pc, #108]	; (800712c <HAL_PCD_MspInit+0xa0>)
 80070c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	613b      	str	r3, [r7, #16]
 80070c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80070ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80070ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070d0:	2302      	movs	r3, #2
 80070d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d4:	2300      	movs	r3, #0
 80070d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070d8:	2303      	movs	r3, #3
 80070da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80070dc:	230a      	movs	r3, #10
 80070de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070e0:	f107 0314 	add.w	r3, r7, #20
 80070e4:	4619      	mov	r1, r3
 80070e6:	4812      	ldr	r0, [pc, #72]	; (8007130 <HAL_PCD_MspInit+0xa4>)
 80070e8:	f7fa f848 	bl	800117c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80070ec:	4b0f      	ldr	r3, [pc, #60]	; (800712c <HAL_PCD_MspInit+0xa0>)
 80070ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f0:	4a0e      	ldr	r2, [pc, #56]	; (800712c <HAL_PCD_MspInit+0xa0>)
 80070f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f6:	6353      	str	r3, [r2, #52]	; 0x34
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	4b0b      	ldr	r3, [pc, #44]	; (800712c <HAL_PCD_MspInit+0xa0>)
 80070fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007100:	4a0a      	ldr	r2, [pc, #40]	; (800712c <HAL_PCD_MspInit+0xa0>)
 8007102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007106:	6453      	str	r3, [r2, #68]	; 0x44
 8007108:	4b08      	ldr	r3, [pc, #32]	; (800712c <HAL_PCD_MspInit+0xa0>)
 800710a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007114:	2200      	movs	r2, #0
 8007116:	2100      	movs	r1, #0
 8007118:	2043      	movs	r0, #67	; 0x43
 800711a:	f7f9 fff8 	bl	800110e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800711e:	2043      	movs	r0, #67	; 0x43
 8007120:	f7fa f811 	bl	8001146 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007124:	bf00      	nop
 8007126:	3728      	adds	r7, #40	; 0x28
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	40023800 	.word	0x40023800
 8007130:	40020000 	.word	0x40020000

08007134 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007148:	4619      	mov	r1, r3
 800714a:	4610      	mov	r0, r2
 800714c:	f7fe fcb4 	bl	8005ab8 <USBD_LL_SetupStage>
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800716a:	78fa      	ldrb	r2, [r7, #3]
 800716c:	6879      	ldr	r1, [r7, #4]
 800716e:	4613      	mov	r3, r2
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	1a9b      	subs	r3, r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	440b      	add	r3, r1
 8007178:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	78fb      	ldrb	r3, [r7, #3]
 8007180:	4619      	mov	r1, r3
 8007182:	f7fe fcee 	bl	8005b62 <USBD_LL_DataOutStage>
}
 8007186:	bf00      	nop
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b082      	sub	sp, #8
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	460b      	mov	r3, r1
 8007198:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80071a0:	78fa      	ldrb	r2, [r7, #3]
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	4613      	mov	r3, r2
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	1a9b      	subs	r3, r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	440b      	add	r3, r1
 80071ae:	3348      	adds	r3, #72	; 0x48
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	78fb      	ldrb	r3, [r7, #3]
 80071b4:	4619      	mov	r1, r3
 80071b6:	f7fe fd37 	bl	8005c28 <USBD_LL_DataInStage>
}
 80071ba:	bf00      	nop
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fe fe4b 	bl	8005e6c <USBD_LL_SOF>
}
 80071d6:	bf00      	nop
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80071e6:	2301      	movs	r3, #1
 80071e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d001      	beq.n	80071f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80071f2:	f7f9 fb73 	bl	80008dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071fc:	7bfa      	ldrb	r2, [r7, #15]
 80071fe:	4611      	mov	r1, r2
 8007200:	4618      	mov	r0, r3
 8007202:	f7fe fdf5 	bl	8005df0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800720c:	4618      	mov	r0, r3
 800720e:	f7fe fda1 	bl	8005d54 <USBD_LL_Reset>
}
 8007212:	bf00      	nop
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
	...

0800721c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe fdf0 	bl	8005e10 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6812      	ldr	r2, [r2, #0]
 800723e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007242:	f043 0301 	orr.w	r3, r3, #1
 8007246:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d005      	beq.n	800725c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007250:	4b04      	ldr	r3, [pc, #16]	; (8007264 <HAL_PCD_SuspendCallback+0x48>)
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	4a03      	ldr	r2, [pc, #12]	; (8007264 <HAL_PCD_SuspendCallback+0x48>)
 8007256:	f043 0306 	orr.w	r3, r3, #6
 800725a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800725c:	bf00      	nop
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	e000ed00 	.word	0xe000ed00

08007268 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007276:	4618      	mov	r0, r3
 8007278:	f7fe fde0 	bl	8005e3c <USBD_LL_Resume>
}
 800727c:	bf00      	nop
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	460b      	mov	r3, r1
 800728e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007296:	78fa      	ldrb	r2, [r7, #3]
 8007298:	4611      	mov	r1, r2
 800729a:	4618      	mov	r0, r3
 800729c:	f7fe fe2e 	bl	8005efc <USBD_LL_IsoOUTIncomplete>
}
 80072a0:	bf00      	nop
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072ba:	78fa      	ldrb	r2, [r7, #3]
 80072bc:	4611      	mov	r1, r2
 80072be:	4618      	mov	r0, r3
 80072c0:	f7fe fdf6 	bl	8005eb0 <USBD_LL_IsoINIncomplete>
}
 80072c4:	bf00      	nop
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fe fe34 	bl	8005f48 <USBD_LL_DevConnected>
}
 80072e0:	bf00      	nop
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fe fe31 	bl	8005f5e <USBD_LL_DevDisconnected>
}
 80072fc:	bf00      	nop
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d13c      	bne.n	800738e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007314:	4a20      	ldr	r2, [pc, #128]	; (8007398 <USBD_LL_Init+0x94>)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a1e      	ldr	r2, [pc, #120]	; (8007398 <USBD_LL_Init+0x94>)
 8007320:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007324:	4b1c      	ldr	r3, [pc, #112]	; (8007398 <USBD_LL_Init+0x94>)
 8007326:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800732a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800732c:	4b1a      	ldr	r3, [pc, #104]	; (8007398 <USBD_LL_Init+0x94>)
 800732e:	2204      	movs	r2, #4
 8007330:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007332:	4b19      	ldr	r3, [pc, #100]	; (8007398 <USBD_LL_Init+0x94>)
 8007334:	2202      	movs	r2, #2
 8007336:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007338:	4b17      	ldr	r3, [pc, #92]	; (8007398 <USBD_LL_Init+0x94>)
 800733a:	2200      	movs	r2, #0
 800733c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800733e:	4b16      	ldr	r3, [pc, #88]	; (8007398 <USBD_LL_Init+0x94>)
 8007340:	2202      	movs	r2, #2
 8007342:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007344:	4b14      	ldr	r3, [pc, #80]	; (8007398 <USBD_LL_Init+0x94>)
 8007346:	2200      	movs	r2, #0
 8007348:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800734a:	4b13      	ldr	r3, [pc, #76]	; (8007398 <USBD_LL_Init+0x94>)
 800734c:	2200      	movs	r2, #0
 800734e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007350:	4b11      	ldr	r3, [pc, #68]	; (8007398 <USBD_LL_Init+0x94>)
 8007352:	2200      	movs	r2, #0
 8007354:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007356:	4b10      	ldr	r3, [pc, #64]	; (8007398 <USBD_LL_Init+0x94>)
 8007358:	2200      	movs	r2, #0
 800735a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800735c:	4b0e      	ldr	r3, [pc, #56]	; (8007398 <USBD_LL_Init+0x94>)
 800735e:	2200      	movs	r2, #0
 8007360:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007362:	480d      	ldr	r0, [pc, #52]	; (8007398 <USBD_LL_Init+0x94>)
 8007364:	f7fa f88e 	bl	8001484 <HAL_PCD_Init>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800736e:	f7f9 fab5 	bl	80008dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007372:	2180      	movs	r1, #128	; 0x80
 8007374:	4808      	ldr	r0, [pc, #32]	; (8007398 <USBD_LL_Init+0x94>)
 8007376:	f7fb f9ec 	bl	8002752 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800737a:	2240      	movs	r2, #64	; 0x40
 800737c:	2100      	movs	r1, #0
 800737e:	4806      	ldr	r0, [pc, #24]	; (8007398 <USBD_LL_Init+0x94>)
 8007380:	f7fb f9a0 	bl	80026c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007384:	2280      	movs	r2, #128	; 0x80
 8007386:	2101      	movs	r1, #1
 8007388:	4803      	ldr	r0, [pc, #12]	; (8007398 <USBD_LL_Init+0x94>)
 800738a:	f7fb f99b 	bl	80026c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	20001a20 	.word	0x20001a20

0800739c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fa f983 	bl	80016be <HAL_PCD_Start>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 f942 	bl	8007648 <USBD_Get_USB_Status>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	4608      	mov	r0, r1
 80073dc:	4611      	mov	r1, r2
 80073de:	461a      	mov	r2, r3
 80073e0:	4603      	mov	r3, r0
 80073e2:	70fb      	strb	r3, [r7, #3]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70bb      	strb	r3, [r7, #2]
 80073e8:	4613      	mov	r3, r2
 80073ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80073fa:	78bb      	ldrb	r3, [r7, #2]
 80073fc:	883a      	ldrh	r2, [r7, #0]
 80073fe:	78f9      	ldrb	r1, [r7, #3]
 8007400:	f7fa fd67 	bl	8001ed2 <HAL_PCD_EP_Open>
 8007404:	4603      	mov	r3, r0
 8007406:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	4618      	mov	r0, r3
 800740c:	f000 f91c 	bl	8007648 <USBD_Get_USB_Status>
 8007410:	4603      	mov	r3, r0
 8007412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007414:	7bbb      	ldrb	r3, [r7, #14]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	460b      	mov	r3, r1
 8007428:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007438:	78fa      	ldrb	r2, [r7, #3]
 800743a:	4611      	mov	r1, r2
 800743c:	4618      	mov	r0, r3
 800743e:	f7fa fdb0 	bl	8001fa2 <HAL_PCD_EP_Close>
 8007442:	4603      	mov	r3, r0
 8007444:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	4618      	mov	r0, r3
 800744a:	f000 f8fd 	bl	8007648 <USBD_Get_USB_Status>
 800744e:	4603      	mov	r3, r0
 8007450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007452:	7bbb      	ldrb	r3, [r7, #14]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007468:	2300      	movs	r3, #0
 800746a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007476:	78fa      	ldrb	r2, [r7, #3]
 8007478:	4611      	mov	r1, r2
 800747a:	4618      	mov	r0, r3
 800747c:	f7fa fe88 	bl	8002190 <HAL_PCD_EP_SetStall>
 8007480:	4603      	mov	r3, r0
 8007482:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	4618      	mov	r0, r3
 8007488:	f000 f8de 	bl	8007648 <USBD_Get_USB_Status>
 800748c:	4603      	mov	r3, r0
 800748e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007490:	7bbb      	ldrb	r3, [r7, #14]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	460b      	mov	r3, r1
 80074a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074b4:	78fa      	ldrb	r2, [r7, #3]
 80074b6:	4611      	mov	r1, r2
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fa fecd 	bl	8002258 <HAL_PCD_EP_ClrStall>
 80074be:	4603      	mov	r3, r0
 80074c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 f8bf 	bl	8007648 <USBD_Get_USB_Status>
 80074ca:	4603      	mov	r3, r0
 80074cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	460b      	mov	r3, r1
 80074e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80074ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	da0b      	bge.n	800750c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80074f4:	78fb      	ldrb	r3, [r7, #3]
 80074f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074fa:	68f9      	ldr	r1, [r7, #12]
 80074fc:	4613      	mov	r3, r2
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	1a9b      	subs	r3, r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	440b      	add	r3, r1
 8007506:	333e      	adds	r3, #62	; 0x3e
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	e00b      	b.n	8007524 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800750c:	78fb      	ldrb	r3, [r7, #3]
 800750e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007512:	68f9      	ldr	r1, [r7, #12]
 8007514:	4613      	mov	r3, r2
 8007516:	00db      	lsls	r3, r3, #3
 8007518:	1a9b      	subs	r3, r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	440b      	add	r3, r1
 800751e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007522:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007524:	4618      	mov	r0, r3
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	460b      	mov	r3, r1
 800753a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007540:	2300      	movs	r3, #0
 8007542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800754a:	78fa      	ldrb	r2, [r7, #3]
 800754c:	4611      	mov	r1, r2
 800754e:	4618      	mov	r0, r3
 8007550:	f7fa fc9a 	bl	8001e88 <HAL_PCD_SetAddress>
 8007554:	4603      	mov	r3, r0
 8007556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007558:	7bfb      	ldrb	r3, [r7, #15]
 800755a:	4618      	mov	r0, r3
 800755c:	f000 f874 	bl	8007648 <USBD_Get_USB_Status>
 8007560:	4603      	mov	r3, r0
 8007562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007564:	7bbb      	ldrb	r3, [r7, #14]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b086      	sub	sp, #24
 8007572:	af00      	add	r7, sp, #0
 8007574:	60f8      	str	r0, [r7, #12]
 8007576:	607a      	str	r2, [r7, #4]
 8007578:	603b      	str	r3, [r7, #0]
 800757a:	460b      	mov	r3, r1
 800757c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800758c:	7af9      	ldrb	r1, [r7, #11]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	f7fa fdb3 	bl	80020fc <HAL_PCD_EP_Transmit>
 8007596:	4603      	mov	r3, r0
 8007598:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	4618      	mov	r0, r3
 800759e:	f000 f853 	bl	8007648 <USBD_Get_USB_Status>
 80075a2:	4603      	mov	r3, r0
 80075a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3718      	adds	r7, #24
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	607a      	str	r2, [r7, #4]
 80075ba:	603b      	str	r3, [r7, #0]
 80075bc:	460b      	mov	r3, r1
 80075be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075c0:	2300      	movs	r3, #0
 80075c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075c4:	2300      	movs	r3, #0
 80075c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80075ce:	7af9      	ldrb	r1, [r7, #11]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	f7fa fd2f 	bl	8002036 <HAL_PCD_EP_Receive>
 80075d8:	4603      	mov	r3, r0
 80075da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075dc:	7dfb      	ldrb	r3, [r7, #23]
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 f832 	bl	8007648 <USBD_Get_USB_Status>
 80075e4:	4603      	mov	r3, r0
 80075e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b082      	sub	sp, #8
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	460b      	mov	r3, r1
 80075fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007604:	78fa      	ldrb	r2, [r7, #3]
 8007606:	4611      	mov	r1, r2
 8007608:	4618      	mov	r0, r3
 800760a:	f7fa fd5f 	bl	80020cc <HAL_PCD_EP_GetRxCount>
 800760e:	4603      	mov	r3, r0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007620:	4b03      	ldr	r3, [pc, #12]	; (8007630 <USBD_static_malloc+0x18>)
}
 8007622:	4618      	mov	r0, r3
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	20000210 	.word	0x20000210

08007634 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]

}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	2b03      	cmp	r3, #3
 800765a:	d817      	bhi.n	800768c <USBD_Get_USB_Status+0x44>
 800765c:	a201      	add	r2, pc, #4	; (adr r2, 8007664 <USBD_Get_USB_Status+0x1c>)
 800765e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007662:	bf00      	nop
 8007664:	08007675 	.word	0x08007675
 8007668:	0800767b 	.word	0x0800767b
 800766c:	08007681 	.word	0x08007681
 8007670:	08007687 	.word	0x08007687
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	73fb      	strb	r3, [r7, #15]
    break;
 8007678:	e00b      	b.n	8007692 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800767a:	2303      	movs	r3, #3
 800767c:	73fb      	strb	r3, [r7, #15]
    break;
 800767e:	e008      	b.n	8007692 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007680:	2301      	movs	r3, #1
 8007682:	73fb      	strb	r3, [r7, #15]
    break;
 8007684:	e005      	b.n	8007692 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007686:	2303      	movs	r3, #3
 8007688:	73fb      	strb	r3, [r7, #15]
    break;
 800768a:	e002      	b.n	8007692 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800768c:	2303      	movs	r3, #3
 800768e:	73fb      	strb	r3, [r7, #15]
    break;
 8007690:	bf00      	nop
  }
  return usb_status;
 8007692:	7bfb      	ldrb	r3, [r7, #15]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <__errno>:
 80076a0:	4b01      	ldr	r3, [pc, #4]	; (80076a8 <__errno+0x8>)
 80076a2:	6818      	ldr	r0, [r3, #0]
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	20000180 	.word	0x20000180

080076ac <__libc_init_array>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	4d0d      	ldr	r5, [pc, #52]	; (80076e4 <__libc_init_array+0x38>)
 80076b0:	4c0d      	ldr	r4, [pc, #52]	; (80076e8 <__libc_init_array+0x3c>)
 80076b2:	1b64      	subs	r4, r4, r5
 80076b4:	10a4      	asrs	r4, r4, #2
 80076b6:	2600      	movs	r6, #0
 80076b8:	42a6      	cmp	r6, r4
 80076ba:	d109      	bne.n	80076d0 <__libc_init_array+0x24>
 80076bc:	4d0b      	ldr	r5, [pc, #44]	; (80076ec <__libc_init_array+0x40>)
 80076be:	4c0c      	ldr	r4, [pc, #48]	; (80076f0 <__libc_init_array+0x44>)
 80076c0:	f000 fcfe 	bl	80080c0 <_init>
 80076c4:	1b64      	subs	r4, r4, r5
 80076c6:	10a4      	asrs	r4, r4, #2
 80076c8:	2600      	movs	r6, #0
 80076ca:	42a6      	cmp	r6, r4
 80076cc:	d105      	bne.n	80076da <__libc_init_array+0x2e>
 80076ce:	bd70      	pop	{r4, r5, r6, pc}
 80076d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d4:	4798      	blx	r3
 80076d6:	3601      	adds	r6, #1
 80076d8:	e7ee      	b.n	80076b8 <__libc_init_array+0xc>
 80076da:	f855 3b04 	ldr.w	r3, [r5], #4
 80076de:	4798      	blx	r3
 80076e0:	3601      	adds	r6, #1
 80076e2:	e7f2      	b.n	80076ca <__libc_init_array+0x1e>
 80076e4:	080082b4 	.word	0x080082b4
 80076e8:	080082b4 	.word	0x080082b4
 80076ec:	080082b4 	.word	0x080082b4
 80076f0:	080082b8 	.word	0x080082b8

080076f4 <memset>:
 80076f4:	4402      	add	r2, r0
 80076f6:	4603      	mov	r3, r0
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d100      	bne.n	80076fe <memset+0xa>
 80076fc:	4770      	bx	lr
 80076fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007702:	e7f9      	b.n	80076f8 <memset+0x4>

08007704 <siprintf>:
 8007704:	b40e      	push	{r1, r2, r3}
 8007706:	b500      	push	{lr}
 8007708:	b09c      	sub	sp, #112	; 0x70
 800770a:	ab1d      	add	r3, sp, #116	; 0x74
 800770c:	9002      	str	r0, [sp, #8]
 800770e:	9006      	str	r0, [sp, #24]
 8007710:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007714:	4809      	ldr	r0, [pc, #36]	; (800773c <siprintf+0x38>)
 8007716:	9107      	str	r1, [sp, #28]
 8007718:	9104      	str	r1, [sp, #16]
 800771a:	4909      	ldr	r1, [pc, #36]	; (8007740 <siprintf+0x3c>)
 800771c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007720:	9105      	str	r1, [sp, #20]
 8007722:	6800      	ldr	r0, [r0, #0]
 8007724:	9301      	str	r3, [sp, #4]
 8007726:	a902      	add	r1, sp, #8
 8007728:	f000 f918 	bl	800795c <_svfiprintf_r>
 800772c:	9b02      	ldr	r3, [sp, #8]
 800772e:	2200      	movs	r2, #0
 8007730:	701a      	strb	r2, [r3, #0]
 8007732:	b01c      	add	sp, #112	; 0x70
 8007734:	f85d eb04 	ldr.w	lr, [sp], #4
 8007738:	b003      	add	sp, #12
 800773a:	4770      	bx	lr
 800773c:	20000180 	.word	0x20000180
 8007740:	ffff0208 	.word	0xffff0208

08007744 <strchr>:
 8007744:	b2c9      	uxtb	r1, r1
 8007746:	4603      	mov	r3, r0
 8007748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800774c:	b11a      	cbz	r2, 8007756 <strchr+0x12>
 800774e:	428a      	cmp	r2, r1
 8007750:	d1f9      	bne.n	8007746 <strchr+0x2>
 8007752:	4618      	mov	r0, r3
 8007754:	4770      	bx	lr
 8007756:	2900      	cmp	r1, #0
 8007758:	bf18      	it	ne
 800775a:	2300      	movne	r3, #0
 800775c:	e7f9      	b.n	8007752 <strchr+0xe>

0800775e <strlcpy>:
 800775e:	b510      	push	{r4, lr}
 8007760:	460b      	mov	r3, r1
 8007762:	b162      	cbz	r2, 800777e <strlcpy+0x20>
 8007764:	3a01      	subs	r2, #1
 8007766:	d008      	beq.n	800777a <strlcpy+0x1c>
 8007768:	f813 4b01 	ldrb.w	r4, [r3], #1
 800776c:	f800 4b01 	strb.w	r4, [r0], #1
 8007770:	2c00      	cmp	r4, #0
 8007772:	d1f7      	bne.n	8007764 <strlcpy+0x6>
 8007774:	1a58      	subs	r0, r3, r1
 8007776:	3801      	subs	r0, #1
 8007778:	bd10      	pop	{r4, pc}
 800777a:	2200      	movs	r2, #0
 800777c:	7002      	strb	r2, [r0, #0]
 800777e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007782:	2a00      	cmp	r2, #0
 8007784:	d1fb      	bne.n	800777e <strlcpy+0x20>
 8007786:	e7f5      	b.n	8007774 <strlcpy+0x16>

08007788 <_strtol_l.isra.0>:
 8007788:	2b01      	cmp	r3, #1
 800778a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800778e:	d001      	beq.n	8007794 <_strtol_l.isra.0+0xc>
 8007790:	2b24      	cmp	r3, #36	; 0x24
 8007792:	d906      	bls.n	80077a2 <_strtol_l.isra.0+0x1a>
 8007794:	f7ff ff84 	bl	80076a0 <__errno>
 8007798:	2316      	movs	r3, #22
 800779a:	6003      	str	r3, [r0, #0]
 800779c:	2000      	movs	r0, #0
 800779e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a2:	4f3a      	ldr	r7, [pc, #232]	; (800788c <_strtol_l.isra.0+0x104>)
 80077a4:	468e      	mov	lr, r1
 80077a6:	4676      	mov	r6, lr
 80077a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80077ac:	5de5      	ldrb	r5, [r4, r7]
 80077ae:	f015 0508 	ands.w	r5, r5, #8
 80077b2:	d1f8      	bne.n	80077a6 <_strtol_l.isra.0+0x1e>
 80077b4:	2c2d      	cmp	r4, #45	; 0x2d
 80077b6:	d134      	bne.n	8007822 <_strtol_l.isra.0+0x9a>
 80077b8:	f89e 4000 	ldrb.w	r4, [lr]
 80077bc:	f04f 0801 	mov.w	r8, #1
 80077c0:	f106 0e02 	add.w	lr, r6, #2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d05c      	beq.n	8007882 <_strtol_l.isra.0+0xfa>
 80077c8:	2b10      	cmp	r3, #16
 80077ca:	d10c      	bne.n	80077e6 <_strtol_l.isra.0+0x5e>
 80077cc:	2c30      	cmp	r4, #48	; 0x30
 80077ce:	d10a      	bne.n	80077e6 <_strtol_l.isra.0+0x5e>
 80077d0:	f89e 4000 	ldrb.w	r4, [lr]
 80077d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80077d8:	2c58      	cmp	r4, #88	; 0x58
 80077da:	d14d      	bne.n	8007878 <_strtol_l.isra.0+0xf0>
 80077dc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80077e0:	2310      	movs	r3, #16
 80077e2:	f10e 0e02 	add.w	lr, lr, #2
 80077e6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80077ea:	f10c 3cff 	add.w	ip, ip, #4294967295
 80077ee:	2600      	movs	r6, #0
 80077f0:	fbbc f9f3 	udiv	r9, ip, r3
 80077f4:	4635      	mov	r5, r6
 80077f6:	fb03 ca19 	mls	sl, r3, r9, ip
 80077fa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80077fe:	2f09      	cmp	r7, #9
 8007800:	d818      	bhi.n	8007834 <_strtol_l.isra.0+0xac>
 8007802:	463c      	mov	r4, r7
 8007804:	42a3      	cmp	r3, r4
 8007806:	dd24      	ble.n	8007852 <_strtol_l.isra.0+0xca>
 8007808:	2e00      	cmp	r6, #0
 800780a:	db1f      	blt.n	800784c <_strtol_l.isra.0+0xc4>
 800780c:	45a9      	cmp	r9, r5
 800780e:	d31d      	bcc.n	800784c <_strtol_l.isra.0+0xc4>
 8007810:	d101      	bne.n	8007816 <_strtol_l.isra.0+0x8e>
 8007812:	45a2      	cmp	sl, r4
 8007814:	db1a      	blt.n	800784c <_strtol_l.isra.0+0xc4>
 8007816:	fb05 4503 	mla	r5, r5, r3, r4
 800781a:	2601      	movs	r6, #1
 800781c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007820:	e7eb      	b.n	80077fa <_strtol_l.isra.0+0x72>
 8007822:	2c2b      	cmp	r4, #43	; 0x2b
 8007824:	bf08      	it	eq
 8007826:	f89e 4000 	ldrbeq.w	r4, [lr]
 800782a:	46a8      	mov	r8, r5
 800782c:	bf08      	it	eq
 800782e:	f106 0e02 	addeq.w	lr, r6, #2
 8007832:	e7c7      	b.n	80077c4 <_strtol_l.isra.0+0x3c>
 8007834:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007838:	2f19      	cmp	r7, #25
 800783a:	d801      	bhi.n	8007840 <_strtol_l.isra.0+0xb8>
 800783c:	3c37      	subs	r4, #55	; 0x37
 800783e:	e7e1      	b.n	8007804 <_strtol_l.isra.0+0x7c>
 8007840:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007844:	2f19      	cmp	r7, #25
 8007846:	d804      	bhi.n	8007852 <_strtol_l.isra.0+0xca>
 8007848:	3c57      	subs	r4, #87	; 0x57
 800784a:	e7db      	b.n	8007804 <_strtol_l.isra.0+0x7c>
 800784c:	f04f 36ff 	mov.w	r6, #4294967295
 8007850:	e7e4      	b.n	800781c <_strtol_l.isra.0+0x94>
 8007852:	2e00      	cmp	r6, #0
 8007854:	da05      	bge.n	8007862 <_strtol_l.isra.0+0xda>
 8007856:	2322      	movs	r3, #34	; 0x22
 8007858:	6003      	str	r3, [r0, #0]
 800785a:	4665      	mov	r5, ip
 800785c:	b942      	cbnz	r2, 8007870 <_strtol_l.isra.0+0xe8>
 800785e:	4628      	mov	r0, r5
 8007860:	e79d      	b.n	800779e <_strtol_l.isra.0+0x16>
 8007862:	f1b8 0f00 	cmp.w	r8, #0
 8007866:	d000      	beq.n	800786a <_strtol_l.isra.0+0xe2>
 8007868:	426d      	negs	r5, r5
 800786a:	2a00      	cmp	r2, #0
 800786c:	d0f7      	beq.n	800785e <_strtol_l.isra.0+0xd6>
 800786e:	b10e      	cbz	r6, 8007874 <_strtol_l.isra.0+0xec>
 8007870:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007874:	6011      	str	r1, [r2, #0]
 8007876:	e7f2      	b.n	800785e <_strtol_l.isra.0+0xd6>
 8007878:	2430      	movs	r4, #48	; 0x30
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1b3      	bne.n	80077e6 <_strtol_l.isra.0+0x5e>
 800787e:	2308      	movs	r3, #8
 8007880:	e7b1      	b.n	80077e6 <_strtol_l.isra.0+0x5e>
 8007882:	2c30      	cmp	r4, #48	; 0x30
 8007884:	d0a4      	beq.n	80077d0 <_strtol_l.isra.0+0x48>
 8007886:	230a      	movs	r3, #10
 8007888:	e7ad      	b.n	80077e6 <_strtol_l.isra.0+0x5e>
 800788a:	bf00      	nop
 800788c:	08008179 	.word	0x08008179

08007890 <strtol>:
 8007890:	4613      	mov	r3, r2
 8007892:	460a      	mov	r2, r1
 8007894:	4601      	mov	r1, r0
 8007896:	4802      	ldr	r0, [pc, #8]	; (80078a0 <strtol+0x10>)
 8007898:	6800      	ldr	r0, [r0, #0]
 800789a:	f7ff bf75 	b.w	8007788 <_strtol_l.isra.0>
 800789e:	bf00      	nop
 80078a0:	20000180 	.word	0x20000180

080078a4 <__ssputs_r>:
 80078a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a8:	688e      	ldr	r6, [r1, #8]
 80078aa:	429e      	cmp	r6, r3
 80078ac:	4682      	mov	sl, r0
 80078ae:	460c      	mov	r4, r1
 80078b0:	4690      	mov	r8, r2
 80078b2:	461f      	mov	r7, r3
 80078b4:	d838      	bhi.n	8007928 <__ssputs_r+0x84>
 80078b6:	898a      	ldrh	r2, [r1, #12]
 80078b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078bc:	d032      	beq.n	8007924 <__ssputs_r+0x80>
 80078be:	6825      	ldr	r5, [r4, #0]
 80078c0:	6909      	ldr	r1, [r1, #16]
 80078c2:	eba5 0901 	sub.w	r9, r5, r1
 80078c6:	6965      	ldr	r5, [r4, #20]
 80078c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078d0:	3301      	adds	r3, #1
 80078d2:	444b      	add	r3, r9
 80078d4:	106d      	asrs	r5, r5, #1
 80078d6:	429d      	cmp	r5, r3
 80078d8:	bf38      	it	cc
 80078da:	461d      	movcc	r5, r3
 80078dc:	0553      	lsls	r3, r2, #21
 80078de:	d531      	bpl.n	8007944 <__ssputs_r+0xa0>
 80078e0:	4629      	mov	r1, r5
 80078e2:	f000 fb47 	bl	8007f74 <_malloc_r>
 80078e6:	4606      	mov	r6, r0
 80078e8:	b950      	cbnz	r0, 8007900 <__ssputs_r+0x5c>
 80078ea:	230c      	movs	r3, #12
 80078ec:	f8ca 3000 	str.w	r3, [sl]
 80078f0:	89a3      	ldrh	r3, [r4, #12]
 80078f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078f6:	81a3      	strh	r3, [r4, #12]
 80078f8:	f04f 30ff 	mov.w	r0, #4294967295
 80078fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007900:	6921      	ldr	r1, [r4, #16]
 8007902:	464a      	mov	r2, r9
 8007904:	f000 fabe 	bl	8007e84 <memcpy>
 8007908:	89a3      	ldrh	r3, [r4, #12]
 800790a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800790e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007912:	81a3      	strh	r3, [r4, #12]
 8007914:	6126      	str	r6, [r4, #16]
 8007916:	6165      	str	r5, [r4, #20]
 8007918:	444e      	add	r6, r9
 800791a:	eba5 0509 	sub.w	r5, r5, r9
 800791e:	6026      	str	r6, [r4, #0]
 8007920:	60a5      	str	r5, [r4, #8]
 8007922:	463e      	mov	r6, r7
 8007924:	42be      	cmp	r6, r7
 8007926:	d900      	bls.n	800792a <__ssputs_r+0x86>
 8007928:	463e      	mov	r6, r7
 800792a:	4632      	mov	r2, r6
 800792c:	6820      	ldr	r0, [r4, #0]
 800792e:	4641      	mov	r1, r8
 8007930:	f000 fab6 	bl	8007ea0 <memmove>
 8007934:	68a3      	ldr	r3, [r4, #8]
 8007936:	6822      	ldr	r2, [r4, #0]
 8007938:	1b9b      	subs	r3, r3, r6
 800793a:	4432      	add	r2, r6
 800793c:	60a3      	str	r3, [r4, #8]
 800793e:	6022      	str	r2, [r4, #0]
 8007940:	2000      	movs	r0, #0
 8007942:	e7db      	b.n	80078fc <__ssputs_r+0x58>
 8007944:	462a      	mov	r2, r5
 8007946:	f000 fb6f 	bl	8008028 <_realloc_r>
 800794a:	4606      	mov	r6, r0
 800794c:	2800      	cmp	r0, #0
 800794e:	d1e1      	bne.n	8007914 <__ssputs_r+0x70>
 8007950:	6921      	ldr	r1, [r4, #16]
 8007952:	4650      	mov	r0, sl
 8007954:	f000 fabe 	bl	8007ed4 <_free_r>
 8007958:	e7c7      	b.n	80078ea <__ssputs_r+0x46>
	...

0800795c <_svfiprintf_r>:
 800795c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007960:	4698      	mov	r8, r3
 8007962:	898b      	ldrh	r3, [r1, #12]
 8007964:	061b      	lsls	r3, r3, #24
 8007966:	b09d      	sub	sp, #116	; 0x74
 8007968:	4607      	mov	r7, r0
 800796a:	460d      	mov	r5, r1
 800796c:	4614      	mov	r4, r2
 800796e:	d50e      	bpl.n	800798e <_svfiprintf_r+0x32>
 8007970:	690b      	ldr	r3, [r1, #16]
 8007972:	b963      	cbnz	r3, 800798e <_svfiprintf_r+0x32>
 8007974:	2140      	movs	r1, #64	; 0x40
 8007976:	f000 fafd 	bl	8007f74 <_malloc_r>
 800797a:	6028      	str	r0, [r5, #0]
 800797c:	6128      	str	r0, [r5, #16]
 800797e:	b920      	cbnz	r0, 800798a <_svfiprintf_r+0x2e>
 8007980:	230c      	movs	r3, #12
 8007982:	603b      	str	r3, [r7, #0]
 8007984:	f04f 30ff 	mov.w	r0, #4294967295
 8007988:	e0d1      	b.n	8007b2e <_svfiprintf_r+0x1d2>
 800798a:	2340      	movs	r3, #64	; 0x40
 800798c:	616b      	str	r3, [r5, #20]
 800798e:	2300      	movs	r3, #0
 8007990:	9309      	str	r3, [sp, #36]	; 0x24
 8007992:	2320      	movs	r3, #32
 8007994:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007998:	f8cd 800c 	str.w	r8, [sp, #12]
 800799c:	2330      	movs	r3, #48	; 0x30
 800799e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b48 <_svfiprintf_r+0x1ec>
 80079a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079a6:	f04f 0901 	mov.w	r9, #1
 80079aa:	4623      	mov	r3, r4
 80079ac:	469a      	mov	sl, r3
 80079ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079b2:	b10a      	cbz	r2, 80079b8 <_svfiprintf_r+0x5c>
 80079b4:	2a25      	cmp	r2, #37	; 0x25
 80079b6:	d1f9      	bne.n	80079ac <_svfiprintf_r+0x50>
 80079b8:	ebba 0b04 	subs.w	fp, sl, r4
 80079bc:	d00b      	beq.n	80079d6 <_svfiprintf_r+0x7a>
 80079be:	465b      	mov	r3, fp
 80079c0:	4622      	mov	r2, r4
 80079c2:	4629      	mov	r1, r5
 80079c4:	4638      	mov	r0, r7
 80079c6:	f7ff ff6d 	bl	80078a4 <__ssputs_r>
 80079ca:	3001      	adds	r0, #1
 80079cc:	f000 80aa 	beq.w	8007b24 <_svfiprintf_r+0x1c8>
 80079d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079d2:	445a      	add	r2, fp
 80079d4:	9209      	str	r2, [sp, #36]	; 0x24
 80079d6:	f89a 3000 	ldrb.w	r3, [sl]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 80a2 	beq.w	8007b24 <_svfiprintf_r+0x1c8>
 80079e0:	2300      	movs	r3, #0
 80079e2:	f04f 32ff 	mov.w	r2, #4294967295
 80079e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079ea:	f10a 0a01 	add.w	sl, sl, #1
 80079ee:	9304      	str	r3, [sp, #16]
 80079f0:	9307      	str	r3, [sp, #28]
 80079f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079f6:	931a      	str	r3, [sp, #104]	; 0x68
 80079f8:	4654      	mov	r4, sl
 80079fa:	2205      	movs	r2, #5
 80079fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a00:	4851      	ldr	r0, [pc, #324]	; (8007b48 <_svfiprintf_r+0x1ec>)
 8007a02:	f7f8 fbf5 	bl	80001f0 <memchr>
 8007a06:	9a04      	ldr	r2, [sp, #16]
 8007a08:	b9d8      	cbnz	r0, 8007a42 <_svfiprintf_r+0xe6>
 8007a0a:	06d0      	lsls	r0, r2, #27
 8007a0c:	bf44      	itt	mi
 8007a0e:	2320      	movmi	r3, #32
 8007a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a14:	0711      	lsls	r1, r2, #28
 8007a16:	bf44      	itt	mi
 8007a18:	232b      	movmi	r3, #43	; 0x2b
 8007a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a22:	2b2a      	cmp	r3, #42	; 0x2a
 8007a24:	d015      	beq.n	8007a52 <_svfiprintf_r+0xf6>
 8007a26:	9a07      	ldr	r2, [sp, #28]
 8007a28:	4654      	mov	r4, sl
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	f04f 0c0a 	mov.w	ip, #10
 8007a30:	4621      	mov	r1, r4
 8007a32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a36:	3b30      	subs	r3, #48	; 0x30
 8007a38:	2b09      	cmp	r3, #9
 8007a3a:	d94e      	bls.n	8007ada <_svfiprintf_r+0x17e>
 8007a3c:	b1b0      	cbz	r0, 8007a6c <_svfiprintf_r+0x110>
 8007a3e:	9207      	str	r2, [sp, #28]
 8007a40:	e014      	b.n	8007a6c <_svfiprintf_r+0x110>
 8007a42:	eba0 0308 	sub.w	r3, r0, r8
 8007a46:	fa09 f303 	lsl.w	r3, r9, r3
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	9304      	str	r3, [sp, #16]
 8007a4e:	46a2      	mov	sl, r4
 8007a50:	e7d2      	b.n	80079f8 <_svfiprintf_r+0x9c>
 8007a52:	9b03      	ldr	r3, [sp, #12]
 8007a54:	1d19      	adds	r1, r3, #4
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	9103      	str	r1, [sp, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	bfbb      	ittet	lt
 8007a5e:	425b      	neglt	r3, r3
 8007a60:	f042 0202 	orrlt.w	r2, r2, #2
 8007a64:	9307      	strge	r3, [sp, #28]
 8007a66:	9307      	strlt	r3, [sp, #28]
 8007a68:	bfb8      	it	lt
 8007a6a:	9204      	strlt	r2, [sp, #16]
 8007a6c:	7823      	ldrb	r3, [r4, #0]
 8007a6e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a70:	d10c      	bne.n	8007a8c <_svfiprintf_r+0x130>
 8007a72:	7863      	ldrb	r3, [r4, #1]
 8007a74:	2b2a      	cmp	r3, #42	; 0x2a
 8007a76:	d135      	bne.n	8007ae4 <_svfiprintf_r+0x188>
 8007a78:	9b03      	ldr	r3, [sp, #12]
 8007a7a:	1d1a      	adds	r2, r3, #4
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	9203      	str	r2, [sp, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	bfb8      	it	lt
 8007a84:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a88:	3402      	adds	r4, #2
 8007a8a:	9305      	str	r3, [sp, #20]
 8007a8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b58 <_svfiprintf_r+0x1fc>
 8007a90:	7821      	ldrb	r1, [r4, #0]
 8007a92:	2203      	movs	r2, #3
 8007a94:	4650      	mov	r0, sl
 8007a96:	f7f8 fbab 	bl	80001f0 <memchr>
 8007a9a:	b140      	cbz	r0, 8007aae <_svfiprintf_r+0x152>
 8007a9c:	2340      	movs	r3, #64	; 0x40
 8007a9e:	eba0 000a 	sub.w	r0, r0, sl
 8007aa2:	fa03 f000 	lsl.w	r0, r3, r0
 8007aa6:	9b04      	ldr	r3, [sp, #16]
 8007aa8:	4303      	orrs	r3, r0
 8007aaa:	3401      	adds	r4, #1
 8007aac:	9304      	str	r3, [sp, #16]
 8007aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab2:	4826      	ldr	r0, [pc, #152]	; (8007b4c <_svfiprintf_r+0x1f0>)
 8007ab4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ab8:	2206      	movs	r2, #6
 8007aba:	f7f8 fb99 	bl	80001f0 <memchr>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d038      	beq.n	8007b34 <_svfiprintf_r+0x1d8>
 8007ac2:	4b23      	ldr	r3, [pc, #140]	; (8007b50 <_svfiprintf_r+0x1f4>)
 8007ac4:	bb1b      	cbnz	r3, 8007b0e <_svfiprintf_r+0x1b2>
 8007ac6:	9b03      	ldr	r3, [sp, #12]
 8007ac8:	3307      	adds	r3, #7
 8007aca:	f023 0307 	bic.w	r3, r3, #7
 8007ace:	3308      	adds	r3, #8
 8007ad0:	9303      	str	r3, [sp, #12]
 8007ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad4:	4433      	add	r3, r6
 8007ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad8:	e767      	b.n	80079aa <_svfiprintf_r+0x4e>
 8007ada:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ade:	460c      	mov	r4, r1
 8007ae0:	2001      	movs	r0, #1
 8007ae2:	e7a5      	b.n	8007a30 <_svfiprintf_r+0xd4>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	3401      	adds	r4, #1
 8007ae8:	9305      	str	r3, [sp, #20]
 8007aea:	4619      	mov	r1, r3
 8007aec:	f04f 0c0a 	mov.w	ip, #10
 8007af0:	4620      	mov	r0, r4
 8007af2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007af6:	3a30      	subs	r2, #48	; 0x30
 8007af8:	2a09      	cmp	r2, #9
 8007afa:	d903      	bls.n	8007b04 <_svfiprintf_r+0x1a8>
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d0c5      	beq.n	8007a8c <_svfiprintf_r+0x130>
 8007b00:	9105      	str	r1, [sp, #20]
 8007b02:	e7c3      	b.n	8007a8c <_svfiprintf_r+0x130>
 8007b04:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b08:	4604      	mov	r4, r0
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e7f0      	b.n	8007af0 <_svfiprintf_r+0x194>
 8007b0e:	ab03      	add	r3, sp, #12
 8007b10:	9300      	str	r3, [sp, #0]
 8007b12:	462a      	mov	r2, r5
 8007b14:	4b0f      	ldr	r3, [pc, #60]	; (8007b54 <_svfiprintf_r+0x1f8>)
 8007b16:	a904      	add	r1, sp, #16
 8007b18:	4638      	mov	r0, r7
 8007b1a:	f3af 8000 	nop.w
 8007b1e:	1c42      	adds	r2, r0, #1
 8007b20:	4606      	mov	r6, r0
 8007b22:	d1d6      	bne.n	8007ad2 <_svfiprintf_r+0x176>
 8007b24:	89ab      	ldrh	r3, [r5, #12]
 8007b26:	065b      	lsls	r3, r3, #25
 8007b28:	f53f af2c 	bmi.w	8007984 <_svfiprintf_r+0x28>
 8007b2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b2e:	b01d      	add	sp, #116	; 0x74
 8007b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b34:	ab03      	add	r3, sp, #12
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	462a      	mov	r2, r5
 8007b3a:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <_svfiprintf_r+0x1f8>)
 8007b3c:	a904      	add	r1, sp, #16
 8007b3e:	4638      	mov	r0, r7
 8007b40:	f000 f87a 	bl	8007c38 <_printf_i>
 8007b44:	e7eb      	b.n	8007b1e <_svfiprintf_r+0x1c2>
 8007b46:	bf00      	nop
 8007b48:	08008279 	.word	0x08008279
 8007b4c:	08008283 	.word	0x08008283
 8007b50:	00000000 	.word	0x00000000
 8007b54:	080078a5 	.word	0x080078a5
 8007b58:	0800827f 	.word	0x0800827f

08007b5c <_printf_common>:
 8007b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b60:	4616      	mov	r6, r2
 8007b62:	4699      	mov	r9, r3
 8007b64:	688a      	ldr	r2, [r1, #8]
 8007b66:	690b      	ldr	r3, [r1, #16]
 8007b68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	bfb8      	it	lt
 8007b70:	4613      	movlt	r3, r2
 8007b72:	6033      	str	r3, [r6, #0]
 8007b74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b78:	4607      	mov	r7, r0
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	b10a      	cbz	r2, 8007b82 <_printf_common+0x26>
 8007b7e:	3301      	adds	r3, #1
 8007b80:	6033      	str	r3, [r6, #0]
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	0699      	lsls	r1, r3, #26
 8007b86:	bf42      	ittt	mi
 8007b88:	6833      	ldrmi	r3, [r6, #0]
 8007b8a:	3302      	addmi	r3, #2
 8007b8c:	6033      	strmi	r3, [r6, #0]
 8007b8e:	6825      	ldr	r5, [r4, #0]
 8007b90:	f015 0506 	ands.w	r5, r5, #6
 8007b94:	d106      	bne.n	8007ba4 <_printf_common+0x48>
 8007b96:	f104 0a19 	add.w	sl, r4, #25
 8007b9a:	68e3      	ldr	r3, [r4, #12]
 8007b9c:	6832      	ldr	r2, [r6, #0]
 8007b9e:	1a9b      	subs	r3, r3, r2
 8007ba0:	42ab      	cmp	r3, r5
 8007ba2:	dc26      	bgt.n	8007bf2 <_printf_common+0x96>
 8007ba4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ba8:	1e13      	subs	r3, r2, #0
 8007baa:	6822      	ldr	r2, [r4, #0]
 8007bac:	bf18      	it	ne
 8007bae:	2301      	movne	r3, #1
 8007bb0:	0692      	lsls	r2, r2, #26
 8007bb2:	d42b      	bmi.n	8007c0c <_printf_common+0xb0>
 8007bb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bb8:	4649      	mov	r1, r9
 8007bba:	4638      	mov	r0, r7
 8007bbc:	47c0      	blx	r8
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	d01e      	beq.n	8007c00 <_printf_common+0xa4>
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	68e5      	ldr	r5, [r4, #12]
 8007bc6:	6832      	ldr	r2, [r6, #0]
 8007bc8:	f003 0306 	and.w	r3, r3, #6
 8007bcc:	2b04      	cmp	r3, #4
 8007bce:	bf08      	it	eq
 8007bd0:	1aad      	subeq	r5, r5, r2
 8007bd2:	68a3      	ldr	r3, [r4, #8]
 8007bd4:	6922      	ldr	r2, [r4, #16]
 8007bd6:	bf0c      	ite	eq
 8007bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bdc:	2500      	movne	r5, #0
 8007bde:	4293      	cmp	r3, r2
 8007be0:	bfc4      	itt	gt
 8007be2:	1a9b      	subgt	r3, r3, r2
 8007be4:	18ed      	addgt	r5, r5, r3
 8007be6:	2600      	movs	r6, #0
 8007be8:	341a      	adds	r4, #26
 8007bea:	42b5      	cmp	r5, r6
 8007bec:	d11a      	bne.n	8007c24 <_printf_common+0xc8>
 8007bee:	2000      	movs	r0, #0
 8007bf0:	e008      	b.n	8007c04 <_printf_common+0xa8>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	4652      	mov	r2, sl
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	47c0      	blx	r8
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	d103      	bne.n	8007c08 <_printf_common+0xac>
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295
 8007c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c08:	3501      	adds	r5, #1
 8007c0a:	e7c6      	b.n	8007b9a <_printf_common+0x3e>
 8007c0c:	18e1      	adds	r1, r4, r3
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	2030      	movs	r0, #48	; 0x30
 8007c12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c16:	4422      	add	r2, r4
 8007c18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c20:	3302      	adds	r3, #2
 8007c22:	e7c7      	b.n	8007bb4 <_printf_common+0x58>
 8007c24:	2301      	movs	r3, #1
 8007c26:	4622      	mov	r2, r4
 8007c28:	4649      	mov	r1, r9
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	47c0      	blx	r8
 8007c2e:	3001      	adds	r0, #1
 8007c30:	d0e6      	beq.n	8007c00 <_printf_common+0xa4>
 8007c32:	3601      	adds	r6, #1
 8007c34:	e7d9      	b.n	8007bea <_printf_common+0x8e>
	...

08007c38 <_printf_i>:
 8007c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	4691      	mov	r9, r2
 8007c40:	7e27      	ldrb	r7, [r4, #24]
 8007c42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c44:	2f78      	cmp	r7, #120	; 0x78
 8007c46:	4680      	mov	r8, r0
 8007c48:	469a      	mov	sl, r3
 8007c4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c4e:	d807      	bhi.n	8007c60 <_printf_i+0x28>
 8007c50:	2f62      	cmp	r7, #98	; 0x62
 8007c52:	d80a      	bhi.n	8007c6a <_printf_i+0x32>
 8007c54:	2f00      	cmp	r7, #0
 8007c56:	f000 80d8 	beq.w	8007e0a <_printf_i+0x1d2>
 8007c5a:	2f58      	cmp	r7, #88	; 0x58
 8007c5c:	f000 80a3 	beq.w	8007da6 <_printf_i+0x16e>
 8007c60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c68:	e03a      	b.n	8007ce0 <_printf_i+0xa8>
 8007c6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c6e:	2b15      	cmp	r3, #21
 8007c70:	d8f6      	bhi.n	8007c60 <_printf_i+0x28>
 8007c72:	a001      	add	r0, pc, #4	; (adr r0, 8007c78 <_printf_i+0x40>)
 8007c74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007c78:	08007cd1 	.word	0x08007cd1
 8007c7c:	08007ce5 	.word	0x08007ce5
 8007c80:	08007c61 	.word	0x08007c61
 8007c84:	08007c61 	.word	0x08007c61
 8007c88:	08007c61 	.word	0x08007c61
 8007c8c:	08007c61 	.word	0x08007c61
 8007c90:	08007ce5 	.word	0x08007ce5
 8007c94:	08007c61 	.word	0x08007c61
 8007c98:	08007c61 	.word	0x08007c61
 8007c9c:	08007c61 	.word	0x08007c61
 8007ca0:	08007c61 	.word	0x08007c61
 8007ca4:	08007df1 	.word	0x08007df1
 8007ca8:	08007d15 	.word	0x08007d15
 8007cac:	08007dd3 	.word	0x08007dd3
 8007cb0:	08007c61 	.word	0x08007c61
 8007cb4:	08007c61 	.word	0x08007c61
 8007cb8:	08007e13 	.word	0x08007e13
 8007cbc:	08007c61 	.word	0x08007c61
 8007cc0:	08007d15 	.word	0x08007d15
 8007cc4:	08007c61 	.word	0x08007c61
 8007cc8:	08007c61 	.word	0x08007c61
 8007ccc:	08007ddb 	.word	0x08007ddb
 8007cd0:	680b      	ldr	r3, [r1, #0]
 8007cd2:	1d1a      	adds	r2, r3, #4
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	600a      	str	r2, [r1, #0]
 8007cd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007cdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e0a3      	b.n	8007e2c <_printf_i+0x1f4>
 8007ce4:	6825      	ldr	r5, [r4, #0]
 8007ce6:	6808      	ldr	r0, [r1, #0]
 8007ce8:	062e      	lsls	r6, r5, #24
 8007cea:	f100 0304 	add.w	r3, r0, #4
 8007cee:	d50a      	bpl.n	8007d06 <_printf_i+0xce>
 8007cf0:	6805      	ldr	r5, [r0, #0]
 8007cf2:	600b      	str	r3, [r1, #0]
 8007cf4:	2d00      	cmp	r5, #0
 8007cf6:	da03      	bge.n	8007d00 <_printf_i+0xc8>
 8007cf8:	232d      	movs	r3, #45	; 0x2d
 8007cfa:	426d      	negs	r5, r5
 8007cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d00:	485e      	ldr	r0, [pc, #376]	; (8007e7c <_printf_i+0x244>)
 8007d02:	230a      	movs	r3, #10
 8007d04:	e019      	b.n	8007d3a <_printf_i+0x102>
 8007d06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007d0a:	6805      	ldr	r5, [r0, #0]
 8007d0c:	600b      	str	r3, [r1, #0]
 8007d0e:	bf18      	it	ne
 8007d10:	b22d      	sxthne	r5, r5
 8007d12:	e7ef      	b.n	8007cf4 <_printf_i+0xbc>
 8007d14:	680b      	ldr	r3, [r1, #0]
 8007d16:	6825      	ldr	r5, [r4, #0]
 8007d18:	1d18      	adds	r0, r3, #4
 8007d1a:	6008      	str	r0, [r1, #0]
 8007d1c:	0628      	lsls	r0, r5, #24
 8007d1e:	d501      	bpl.n	8007d24 <_printf_i+0xec>
 8007d20:	681d      	ldr	r5, [r3, #0]
 8007d22:	e002      	b.n	8007d2a <_printf_i+0xf2>
 8007d24:	0669      	lsls	r1, r5, #25
 8007d26:	d5fb      	bpl.n	8007d20 <_printf_i+0xe8>
 8007d28:	881d      	ldrh	r5, [r3, #0]
 8007d2a:	4854      	ldr	r0, [pc, #336]	; (8007e7c <_printf_i+0x244>)
 8007d2c:	2f6f      	cmp	r7, #111	; 0x6f
 8007d2e:	bf0c      	ite	eq
 8007d30:	2308      	moveq	r3, #8
 8007d32:	230a      	movne	r3, #10
 8007d34:	2100      	movs	r1, #0
 8007d36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d3a:	6866      	ldr	r6, [r4, #4]
 8007d3c:	60a6      	str	r6, [r4, #8]
 8007d3e:	2e00      	cmp	r6, #0
 8007d40:	bfa2      	ittt	ge
 8007d42:	6821      	ldrge	r1, [r4, #0]
 8007d44:	f021 0104 	bicge.w	r1, r1, #4
 8007d48:	6021      	strge	r1, [r4, #0]
 8007d4a:	b90d      	cbnz	r5, 8007d50 <_printf_i+0x118>
 8007d4c:	2e00      	cmp	r6, #0
 8007d4e:	d04d      	beq.n	8007dec <_printf_i+0x1b4>
 8007d50:	4616      	mov	r6, r2
 8007d52:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d56:	fb03 5711 	mls	r7, r3, r1, r5
 8007d5a:	5dc7      	ldrb	r7, [r0, r7]
 8007d5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d60:	462f      	mov	r7, r5
 8007d62:	42bb      	cmp	r3, r7
 8007d64:	460d      	mov	r5, r1
 8007d66:	d9f4      	bls.n	8007d52 <_printf_i+0x11a>
 8007d68:	2b08      	cmp	r3, #8
 8007d6a:	d10b      	bne.n	8007d84 <_printf_i+0x14c>
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	07df      	lsls	r7, r3, #31
 8007d70:	d508      	bpl.n	8007d84 <_printf_i+0x14c>
 8007d72:	6923      	ldr	r3, [r4, #16]
 8007d74:	6861      	ldr	r1, [r4, #4]
 8007d76:	4299      	cmp	r1, r3
 8007d78:	bfde      	ittt	le
 8007d7a:	2330      	movle	r3, #48	; 0x30
 8007d7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d84:	1b92      	subs	r2, r2, r6
 8007d86:	6122      	str	r2, [r4, #16]
 8007d88:	f8cd a000 	str.w	sl, [sp]
 8007d8c:	464b      	mov	r3, r9
 8007d8e:	aa03      	add	r2, sp, #12
 8007d90:	4621      	mov	r1, r4
 8007d92:	4640      	mov	r0, r8
 8007d94:	f7ff fee2 	bl	8007b5c <_printf_common>
 8007d98:	3001      	adds	r0, #1
 8007d9a:	d14c      	bne.n	8007e36 <_printf_i+0x1fe>
 8007d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007da0:	b004      	add	sp, #16
 8007da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da6:	4835      	ldr	r0, [pc, #212]	; (8007e7c <_printf_i+0x244>)
 8007da8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	680e      	ldr	r6, [r1, #0]
 8007db0:	061f      	lsls	r7, r3, #24
 8007db2:	f856 5b04 	ldr.w	r5, [r6], #4
 8007db6:	600e      	str	r6, [r1, #0]
 8007db8:	d514      	bpl.n	8007de4 <_printf_i+0x1ac>
 8007dba:	07d9      	lsls	r1, r3, #31
 8007dbc:	bf44      	itt	mi
 8007dbe:	f043 0320 	orrmi.w	r3, r3, #32
 8007dc2:	6023      	strmi	r3, [r4, #0]
 8007dc4:	b91d      	cbnz	r5, 8007dce <_printf_i+0x196>
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	f023 0320 	bic.w	r3, r3, #32
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	2310      	movs	r3, #16
 8007dd0:	e7b0      	b.n	8007d34 <_printf_i+0xfc>
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	f043 0320 	orr.w	r3, r3, #32
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	2378      	movs	r3, #120	; 0x78
 8007ddc:	4828      	ldr	r0, [pc, #160]	; (8007e80 <_printf_i+0x248>)
 8007dde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007de2:	e7e3      	b.n	8007dac <_printf_i+0x174>
 8007de4:	065e      	lsls	r6, r3, #25
 8007de6:	bf48      	it	mi
 8007de8:	b2ad      	uxthmi	r5, r5
 8007dea:	e7e6      	b.n	8007dba <_printf_i+0x182>
 8007dec:	4616      	mov	r6, r2
 8007dee:	e7bb      	b.n	8007d68 <_printf_i+0x130>
 8007df0:	680b      	ldr	r3, [r1, #0]
 8007df2:	6826      	ldr	r6, [r4, #0]
 8007df4:	6960      	ldr	r0, [r4, #20]
 8007df6:	1d1d      	adds	r5, r3, #4
 8007df8:	600d      	str	r5, [r1, #0]
 8007dfa:	0635      	lsls	r5, r6, #24
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	d501      	bpl.n	8007e04 <_printf_i+0x1cc>
 8007e00:	6018      	str	r0, [r3, #0]
 8007e02:	e002      	b.n	8007e0a <_printf_i+0x1d2>
 8007e04:	0671      	lsls	r1, r6, #25
 8007e06:	d5fb      	bpl.n	8007e00 <_printf_i+0x1c8>
 8007e08:	8018      	strh	r0, [r3, #0]
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	6123      	str	r3, [r4, #16]
 8007e0e:	4616      	mov	r6, r2
 8007e10:	e7ba      	b.n	8007d88 <_printf_i+0x150>
 8007e12:	680b      	ldr	r3, [r1, #0]
 8007e14:	1d1a      	adds	r2, r3, #4
 8007e16:	600a      	str	r2, [r1, #0]
 8007e18:	681e      	ldr	r6, [r3, #0]
 8007e1a:	6862      	ldr	r2, [r4, #4]
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f7f8 f9e6 	bl	80001f0 <memchr>
 8007e24:	b108      	cbz	r0, 8007e2a <_printf_i+0x1f2>
 8007e26:	1b80      	subs	r0, r0, r6
 8007e28:	6060      	str	r0, [r4, #4]
 8007e2a:	6863      	ldr	r3, [r4, #4]
 8007e2c:	6123      	str	r3, [r4, #16]
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e34:	e7a8      	b.n	8007d88 <_printf_i+0x150>
 8007e36:	6923      	ldr	r3, [r4, #16]
 8007e38:	4632      	mov	r2, r6
 8007e3a:	4649      	mov	r1, r9
 8007e3c:	4640      	mov	r0, r8
 8007e3e:	47d0      	blx	sl
 8007e40:	3001      	adds	r0, #1
 8007e42:	d0ab      	beq.n	8007d9c <_printf_i+0x164>
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	079b      	lsls	r3, r3, #30
 8007e48:	d413      	bmi.n	8007e72 <_printf_i+0x23a>
 8007e4a:	68e0      	ldr	r0, [r4, #12]
 8007e4c:	9b03      	ldr	r3, [sp, #12]
 8007e4e:	4298      	cmp	r0, r3
 8007e50:	bfb8      	it	lt
 8007e52:	4618      	movlt	r0, r3
 8007e54:	e7a4      	b.n	8007da0 <_printf_i+0x168>
 8007e56:	2301      	movs	r3, #1
 8007e58:	4632      	mov	r2, r6
 8007e5a:	4649      	mov	r1, r9
 8007e5c:	4640      	mov	r0, r8
 8007e5e:	47d0      	blx	sl
 8007e60:	3001      	adds	r0, #1
 8007e62:	d09b      	beq.n	8007d9c <_printf_i+0x164>
 8007e64:	3501      	adds	r5, #1
 8007e66:	68e3      	ldr	r3, [r4, #12]
 8007e68:	9903      	ldr	r1, [sp, #12]
 8007e6a:	1a5b      	subs	r3, r3, r1
 8007e6c:	42ab      	cmp	r3, r5
 8007e6e:	dcf2      	bgt.n	8007e56 <_printf_i+0x21e>
 8007e70:	e7eb      	b.n	8007e4a <_printf_i+0x212>
 8007e72:	2500      	movs	r5, #0
 8007e74:	f104 0619 	add.w	r6, r4, #25
 8007e78:	e7f5      	b.n	8007e66 <_printf_i+0x22e>
 8007e7a:	bf00      	nop
 8007e7c:	0800828a 	.word	0x0800828a
 8007e80:	0800829b 	.word	0x0800829b

08007e84 <memcpy>:
 8007e84:	440a      	add	r2, r1
 8007e86:	4291      	cmp	r1, r2
 8007e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e8c:	d100      	bne.n	8007e90 <memcpy+0xc>
 8007e8e:	4770      	bx	lr
 8007e90:	b510      	push	{r4, lr}
 8007e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e9a:	4291      	cmp	r1, r2
 8007e9c:	d1f9      	bne.n	8007e92 <memcpy+0xe>
 8007e9e:	bd10      	pop	{r4, pc}

08007ea0 <memmove>:
 8007ea0:	4288      	cmp	r0, r1
 8007ea2:	b510      	push	{r4, lr}
 8007ea4:	eb01 0402 	add.w	r4, r1, r2
 8007ea8:	d902      	bls.n	8007eb0 <memmove+0x10>
 8007eaa:	4284      	cmp	r4, r0
 8007eac:	4623      	mov	r3, r4
 8007eae:	d807      	bhi.n	8007ec0 <memmove+0x20>
 8007eb0:	1e43      	subs	r3, r0, #1
 8007eb2:	42a1      	cmp	r1, r4
 8007eb4:	d008      	beq.n	8007ec8 <memmove+0x28>
 8007eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007eba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ebe:	e7f8      	b.n	8007eb2 <memmove+0x12>
 8007ec0:	4402      	add	r2, r0
 8007ec2:	4601      	mov	r1, r0
 8007ec4:	428a      	cmp	r2, r1
 8007ec6:	d100      	bne.n	8007eca <memmove+0x2a>
 8007ec8:	bd10      	pop	{r4, pc}
 8007eca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ece:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ed2:	e7f7      	b.n	8007ec4 <memmove+0x24>

08007ed4 <_free_r>:
 8007ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ed6:	2900      	cmp	r1, #0
 8007ed8:	d048      	beq.n	8007f6c <_free_r+0x98>
 8007eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ede:	9001      	str	r0, [sp, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f1a1 0404 	sub.w	r4, r1, #4
 8007ee6:	bfb8      	it	lt
 8007ee8:	18e4      	addlt	r4, r4, r3
 8007eea:	f000 f8d3 	bl	8008094 <__malloc_lock>
 8007eee:	4a20      	ldr	r2, [pc, #128]	; (8007f70 <_free_r+0x9c>)
 8007ef0:	9801      	ldr	r0, [sp, #4]
 8007ef2:	6813      	ldr	r3, [r2, #0]
 8007ef4:	4615      	mov	r5, r2
 8007ef6:	b933      	cbnz	r3, 8007f06 <_free_r+0x32>
 8007ef8:	6063      	str	r3, [r4, #4]
 8007efa:	6014      	str	r4, [r2, #0]
 8007efc:	b003      	add	sp, #12
 8007efe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f02:	f000 b8cd 	b.w	80080a0 <__malloc_unlock>
 8007f06:	42a3      	cmp	r3, r4
 8007f08:	d90b      	bls.n	8007f22 <_free_r+0x4e>
 8007f0a:	6821      	ldr	r1, [r4, #0]
 8007f0c:	1862      	adds	r2, r4, r1
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	bf04      	itt	eq
 8007f12:	681a      	ldreq	r2, [r3, #0]
 8007f14:	685b      	ldreq	r3, [r3, #4]
 8007f16:	6063      	str	r3, [r4, #4]
 8007f18:	bf04      	itt	eq
 8007f1a:	1852      	addeq	r2, r2, r1
 8007f1c:	6022      	streq	r2, [r4, #0]
 8007f1e:	602c      	str	r4, [r5, #0]
 8007f20:	e7ec      	b.n	8007efc <_free_r+0x28>
 8007f22:	461a      	mov	r2, r3
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	b10b      	cbz	r3, 8007f2c <_free_r+0x58>
 8007f28:	42a3      	cmp	r3, r4
 8007f2a:	d9fa      	bls.n	8007f22 <_free_r+0x4e>
 8007f2c:	6811      	ldr	r1, [r2, #0]
 8007f2e:	1855      	adds	r5, r2, r1
 8007f30:	42a5      	cmp	r5, r4
 8007f32:	d10b      	bne.n	8007f4c <_free_r+0x78>
 8007f34:	6824      	ldr	r4, [r4, #0]
 8007f36:	4421      	add	r1, r4
 8007f38:	1854      	adds	r4, r2, r1
 8007f3a:	42a3      	cmp	r3, r4
 8007f3c:	6011      	str	r1, [r2, #0]
 8007f3e:	d1dd      	bne.n	8007efc <_free_r+0x28>
 8007f40:	681c      	ldr	r4, [r3, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	6053      	str	r3, [r2, #4]
 8007f46:	4421      	add	r1, r4
 8007f48:	6011      	str	r1, [r2, #0]
 8007f4a:	e7d7      	b.n	8007efc <_free_r+0x28>
 8007f4c:	d902      	bls.n	8007f54 <_free_r+0x80>
 8007f4e:	230c      	movs	r3, #12
 8007f50:	6003      	str	r3, [r0, #0]
 8007f52:	e7d3      	b.n	8007efc <_free_r+0x28>
 8007f54:	6825      	ldr	r5, [r4, #0]
 8007f56:	1961      	adds	r1, r4, r5
 8007f58:	428b      	cmp	r3, r1
 8007f5a:	bf04      	itt	eq
 8007f5c:	6819      	ldreq	r1, [r3, #0]
 8007f5e:	685b      	ldreq	r3, [r3, #4]
 8007f60:	6063      	str	r3, [r4, #4]
 8007f62:	bf04      	itt	eq
 8007f64:	1949      	addeq	r1, r1, r5
 8007f66:	6021      	streq	r1, [r4, #0]
 8007f68:	6054      	str	r4, [r2, #4]
 8007f6a:	e7c7      	b.n	8007efc <_free_r+0x28>
 8007f6c:	b003      	add	sp, #12
 8007f6e:	bd30      	pop	{r4, r5, pc}
 8007f70:	20000430 	.word	0x20000430

08007f74 <_malloc_r>:
 8007f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f76:	1ccd      	adds	r5, r1, #3
 8007f78:	f025 0503 	bic.w	r5, r5, #3
 8007f7c:	3508      	adds	r5, #8
 8007f7e:	2d0c      	cmp	r5, #12
 8007f80:	bf38      	it	cc
 8007f82:	250c      	movcc	r5, #12
 8007f84:	2d00      	cmp	r5, #0
 8007f86:	4606      	mov	r6, r0
 8007f88:	db01      	blt.n	8007f8e <_malloc_r+0x1a>
 8007f8a:	42a9      	cmp	r1, r5
 8007f8c:	d903      	bls.n	8007f96 <_malloc_r+0x22>
 8007f8e:	230c      	movs	r3, #12
 8007f90:	6033      	str	r3, [r6, #0]
 8007f92:	2000      	movs	r0, #0
 8007f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f96:	f000 f87d 	bl	8008094 <__malloc_lock>
 8007f9a:	4921      	ldr	r1, [pc, #132]	; (8008020 <_malloc_r+0xac>)
 8007f9c:	680a      	ldr	r2, [r1, #0]
 8007f9e:	4614      	mov	r4, r2
 8007fa0:	b99c      	cbnz	r4, 8007fca <_malloc_r+0x56>
 8007fa2:	4f20      	ldr	r7, [pc, #128]	; (8008024 <_malloc_r+0xb0>)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	b923      	cbnz	r3, 8007fb2 <_malloc_r+0x3e>
 8007fa8:	4621      	mov	r1, r4
 8007faa:	4630      	mov	r0, r6
 8007fac:	f000 f862 	bl	8008074 <_sbrk_r>
 8007fb0:	6038      	str	r0, [r7, #0]
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	f000 f85d 	bl	8008074 <_sbrk_r>
 8007fba:	1c43      	adds	r3, r0, #1
 8007fbc:	d123      	bne.n	8008006 <_malloc_r+0x92>
 8007fbe:	230c      	movs	r3, #12
 8007fc0:	6033      	str	r3, [r6, #0]
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	f000 f86c 	bl	80080a0 <__malloc_unlock>
 8007fc8:	e7e3      	b.n	8007f92 <_malloc_r+0x1e>
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	1b5b      	subs	r3, r3, r5
 8007fce:	d417      	bmi.n	8008000 <_malloc_r+0x8c>
 8007fd0:	2b0b      	cmp	r3, #11
 8007fd2:	d903      	bls.n	8007fdc <_malloc_r+0x68>
 8007fd4:	6023      	str	r3, [r4, #0]
 8007fd6:	441c      	add	r4, r3
 8007fd8:	6025      	str	r5, [r4, #0]
 8007fda:	e004      	b.n	8007fe6 <_malloc_r+0x72>
 8007fdc:	6863      	ldr	r3, [r4, #4]
 8007fde:	42a2      	cmp	r2, r4
 8007fe0:	bf0c      	ite	eq
 8007fe2:	600b      	streq	r3, [r1, #0]
 8007fe4:	6053      	strne	r3, [r2, #4]
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	f000 f85a 	bl	80080a0 <__malloc_unlock>
 8007fec:	f104 000b 	add.w	r0, r4, #11
 8007ff0:	1d23      	adds	r3, r4, #4
 8007ff2:	f020 0007 	bic.w	r0, r0, #7
 8007ff6:	1ac2      	subs	r2, r0, r3
 8007ff8:	d0cc      	beq.n	8007f94 <_malloc_r+0x20>
 8007ffa:	1a1b      	subs	r3, r3, r0
 8007ffc:	50a3      	str	r3, [r4, r2]
 8007ffe:	e7c9      	b.n	8007f94 <_malloc_r+0x20>
 8008000:	4622      	mov	r2, r4
 8008002:	6864      	ldr	r4, [r4, #4]
 8008004:	e7cc      	b.n	8007fa0 <_malloc_r+0x2c>
 8008006:	1cc4      	adds	r4, r0, #3
 8008008:	f024 0403 	bic.w	r4, r4, #3
 800800c:	42a0      	cmp	r0, r4
 800800e:	d0e3      	beq.n	8007fd8 <_malloc_r+0x64>
 8008010:	1a21      	subs	r1, r4, r0
 8008012:	4630      	mov	r0, r6
 8008014:	f000 f82e 	bl	8008074 <_sbrk_r>
 8008018:	3001      	adds	r0, #1
 800801a:	d1dd      	bne.n	8007fd8 <_malloc_r+0x64>
 800801c:	e7cf      	b.n	8007fbe <_malloc_r+0x4a>
 800801e:	bf00      	nop
 8008020:	20000430 	.word	0x20000430
 8008024:	20000434 	.word	0x20000434

08008028 <_realloc_r>:
 8008028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802a:	4607      	mov	r7, r0
 800802c:	4614      	mov	r4, r2
 800802e:	460e      	mov	r6, r1
 8008030:	b921      	cbnz	r1, 800803c <_realloc_r+0x14>
 8008032:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008036:	4611      	mov	r1, r2
 8008038:	f7ff bf9c 	b.w	8007f74 <_malloc_r>
 800803c:	b922      	cbnz	r2, 8008048 <_realloc_r+0x20>
 800803e:	f7ff ff49 	bl	8007ed4 <_free_r>
 8008042:	4625      	mov	r5, r4
 8008044:	4628      	mov	r0, r5
 8008046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008048:	f000 f830 	bl	80080ac <_malloc_usable_size_r>
 800804c:	42a0      	cmp	r0, r4
 800804e:	d20f      	bcs.n	8008070 <_realloc_r+0x48>
 8008050:	4621      	mov	r1, r4
 8008052:	4638      	mov	r0, r7
 8008054:	f7ff ff8e 	bl	8007f74 <_malloc_r>
 8008058:	4605      	mov	r5, r0
 800805a:	2800      	cmp	r0, #0
 800805c:	d0f2      	beq.n	8008044 <_realloc_r+0x1c>
 800805e:	4631      	mov	r1, r6
 8008060:	4622      	mov	r2, r4
 8008062:	f7ff ff0f 	bl	8007e84 <memcpy>
 8008066:	4631      	mov	r1, r6
 8008068:	4638      	mov	r0, r7
 800806a:	f7ff ff33 	bl	8007ed4 <_free_r>
 800806e:	e7e9      	b.n	8008044 <_realloc_r+0x1c>
 8008070:	4635      	mov	r5, r6
 8008072:	e7e7      	b.n	8008044 <_realloc_r+0x1c>

08008074 <_sbrk_r>:
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	4d06      	ldr	r5, [pc, #24]	; (8008090 <_sbrk_r+0x1c>)
 8008078:	2300      	movs	r3, #0
 800807a:	4604      	mov	r4, r0
 800807c:	4608      	mov	r0, r1
 800807e:	602b      	str	r3, [r5, #0]
 8008080:	f7f8 fcc0 	bl	8000a04 <_sbrk>
 8008084:	1c43      	adds	r3, r0, #1
 8008086:	d102      	bne.n	800808e <_sbrk_r+0x1a>
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	b103      	cbz	r3, 800808e <_sbrk_r+0x1a>
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	bd38      	pop	{r3, r4, r5, pc}
 8008090:	20001e28 	.word	0x20001e28

08008094 <__malloc_lock>:
 8008094:	4801      	ldr	r0, [pc, #4]	; (800809c <__malloc_lock+0x8>)
 8008096:	f000 b811 	b.w	80080bc <__retarget_lock_acquire_recursive>
 800809a:	bf00      	nop
 800809c:	20001e30 	.word	0x20001e30

080080a0 <__malloc_unlock>:
 80080a0:	4801      	ldr	r0, [pc, #4]	; (80080a8 <__malloc_unlock+0x8>)
 80080a2:	f000 b80c 	b.w	80080be <__retarget_lock_release_recursive>
 80080a6:	bf00      	nop
 80080a8:	20001e30 	.word	0x20001e30

080080ac <_malloc_usable_size_r>:
 80080ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080b0:	1f18      	subs	r0, r3, #4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	bfbc      	itt	lt
 80080b6:	580b      	ldrlt	r3, [r1, r0]
 80080b8:	18c0      	addlt	r0, r0, r3
 80080ba:	4770      	bx	lr

080080bc <__retarget_lock_acquire_recursive>:
 80080bc:	4770      	bx	lr

080080be <__retarget_lock_release_recursive>:
 80080be:	4770      	bx	lr

080080c0 <_init>:
 80080c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c2:	bf00      	nop
 80080c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080c6:	bc08      	pop	{r3}
 80080c8:	469e      	mov	lr, r3
 80080ca:	4770      	bx	lr

080080cc <_fini>:
 80080cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ce:	bf00      	nop
 80080d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080d2:	bc08      	pop	{r3}
 80080d4:	469e      	mov	lr, r3
 80080d6:	4770      	bx	lr
