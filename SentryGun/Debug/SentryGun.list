
SentryGun.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000886c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08008a0c  08008a0c  00018a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c38  08008c38  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008c38  08008c38  00018c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c40  08008c40  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c40  08008c40  00018c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c44  08008c44  00018c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f64  200001e8  08008e2c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000214c  08008e2c  0002214c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b072  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dbd  00000000  00000000  0003b286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  0003f048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  000401c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a21a  00000000  00000000  00041190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b3a  00000000  00000000  0005b3aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090a9d  00000000  00000000  00071ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102981  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bd4  00000000  00000000  001029d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080089f4 	.word	0x080089f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	080089f4 	.word	0x080089f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_frsub>:
 8000290:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__addsf3>
 8000296:	bf00      	nop

08000298 <__aeabi_fsub>:
 8000298:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800029c <__addsf3>:
 800029c:	0042      	lsls	r2, r0, #1
 800029e:	bf1f      	itttt	ne
 80002a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002a4:	ea92 0f03 	teqne	r2, r3
 80002a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002b0:	d06a      	beq.n	8000388 <__addsf3+0xec>
 80002b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ba:	bfc1      	itttt	gt
 80002bc:	18d2      	addgt	r2, r2, r3
 80002be:	4041      	eorgt	r1, r0
 80002c0:	4048      	eorgt	r0, r1
 80002c2:	4041      	eorgt	r1, r0
 80002c4:	bfb8      	it	lt
 80002c6:	425b      	neglt	r3, r3
 80002c8:	2b19      	cmp	r3, #25
 80002ca:	bf88      	it	hi
 80002cc:	4770      	bxhi	lr
 80002ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002da:	bf18      	it	ne
 80002dc:	4240      	negne	r0, r0
 80002de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002ea:	bf18      	it	ne
 80002ec:	4249      	negne	r1, r1
 80002ee:	ea92 0f03 	teq	r2, r3
 80002f2:	d03f      	beq.n	8000374 <__addsf3+0xd8>
 80002f4:	f1a2 0201 	sub.w	r2, r2, #1
 80002f8:	fa41 fc03 	asr.w	ip, r1, r3
 80002fc:	eb10 000c 	adds.w	r0, r0, ip
 8000300:	f1c3 0320 	rsb	r3, r3, #32
 8000304:	fa01 f103 	lsl.w	r1, r1, r3
 8000308:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__addsf3+0x78>
 800030e:	4249      	negs	r1, r1
 8000310:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000314:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000318:	d313      	bcc.n	8000342 <__addsf3+0xa6>
 800031a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800031e:	d306      	bcc.n	800032e <__addsf3+0x92>
 8000320:	0840      	lsrs	r0, r0, #1
 8000322:	ea4f 0131 	mov.w	r1, r1, rrx
 8000326:	f102 0201 	add.w	r2, r2, #1
 800032a:	2afe      	cmp	r2, #254	; 0xfe
 800032c:	d251      	bcs.n	80003d2 <__addsf3+0x136>
 800032e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000332:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000336:	bf08      	it	eq
 8000338:	f020 0001 	biceq.w	r0, r0, #1
 800033c:	ea40 0003 	orr.w	r0, r0, r3
 8000340:	4770      	bx	lr
 8000342:	0049      	lsls	r1, r1, #1
 8000344:	eb40 0000 	adc.w	r0, r0, r0
 8000348:	3a01      	subs	r2, #1
 800034a:	bf28      	it	cs
 800034c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000350:	d2ed      	bcs.n	800032e <__addsf3+0x92>
 8000352:	fab0 fc80 	clz	ip, r0
 8000356:	f1ac 0c08 	sub.w	ip, ip, #8
 800035a:	ebb2 020c 	subs.w	r2, r2, ip
 800035e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000362:	bfaa      	itet	ge
 8000364:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000368:	4252      	neglt	r2, r2
 800036a:	4318      	orrge	r0, r3
 800036c:	bfbc      	itt	lt
 800036e:	40d0      	lsrlt	r0, r2
 8000370:	4318      	orrlt	r0, r3
 8000372:	4770      	bx	lr
 8000374:	f092 0f00 	teq	r2, #0
 8000378:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800037c:	bf06      	itte	eq
 800037e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000382:	3201      	addeq	r2, #1
 8000384:	3b01      	subne	r3, #1
 8000386:	e7b5      	b.n	80002f4 <__addsf3+0x58>
 8000388:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800038c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000390:	bf18      	it	ne
 8000392:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000396:	d021      	beq.n	80003dc <__addsf3+0x140>
 8000398:	ea92 0f03 	teq	r2, r3
 800039c:	d004      	beq.n	80003a8 <__addsf3+0x10c>
 800039e:	f092 0f00 	teq	r2, #0
 80003a2:	bf08      	it	eq
 80003a4:	4608      	moveq	r0, r1
 80003a6:	4770      	bx	lr
 80003a8:	ea90 0f01 	teq	r0, r1
 80003ac:	bf1c      	itt	ne
 80003ae:	2000      	movne	r0, #0
 80003b0:	4770      	bxne	lr
 80003b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003b6:	d104      	bne.n	80003c2 <__addsf3+0x126>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	bf28      	it	cs
 80003bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003c0:	4770      	bx	lr
 80003c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003c6:	bf3c      	itt	cc
 80003c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003cc:	4770      	bxcc	lr
 80003ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003da:	4770      	bx	lr
 80003dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003e0:	bf16      	itet	ne
 80003e2:	4608      	movne	r0, r1
 80003e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003e8:	4601      	movne	r1, r0
 80003ea:	0242      	lsls	r2, r0, #9
 80003ec:	bf06      	itte	eq
 80003ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003f2:	ea90 0f01 	teqeq	r0, r1
 80003f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003fa:	4770      	bx	lr

080003fc <__aeabi_ui2f>:
 80003fc:	f04f 0300 	mov.w	r3, #0
 8000400:	e004      	b.n	800040c <__aeabi_i2f+0x8>
 8000402:	bf00      	nop

08000404 <__aeabi_i2f>:
 8000404:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	ea5f 0c00 	movs.w	ip, r0
 8000410:	bf08      	it	eq
 8000412:	4770      	bxeq	lr
 8000414:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000418:	4601      	mov	r1, r0
 800041a:	f04f 0000 	mov.w	r0, #0
 800041e:	e01c      	b.n	800045a <__aeabi_l2f+0x2a>

08000420 <__aeabi_ul2f>:
 8000420:	ea50 0201 	orrs.w	r2, r0, r1
 8000424:	bf08      	it	eq
 8000426:	4770      	bxeq	lr
 8000428:	f04f 0300 	mov.w	r3, #0
 800042c:	e00a      	b.n	8000444 <__aeabi_l2f+0x14>
 800042e:	bf00      	nop

08000430 <__aeabi_l2f>:
 8000430:	ea50 0201 	orrs.w	r2, r0, r1
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800043c:	d502      	bpl.n	8000444 <__aeabi_l2f+0x14>
 800043e:	4240      	negs	r0, r0
 8000440:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000444:	ea5f 0c01 	movs.w	ip, r1
 8000448:	bf02      	ittt	eq
 800044a:	4684      	moveq	ip, r0
 800044c:	4601      	moveq	r1, r0
 800044e:	2000      	moveq	r0, #0
 8000450:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000454:	bf08      	it	eq
 8000456:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800045a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800045e:	fabc f28c 	clz	r2, ip
 8000462:	3a08      	subs	r2, #8
 8000464:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000468:	db10      	blt.n	800048c <__aeabi_l2f+0x5c>
 800046a:	fa01 fc02 	lsl.w	ip, r1, r2
 800046e:	4463      	add	r3, ip
 8000470:	fa00 fc02 	lsl.w	ip, r0, r2
 8000474:	f1c2 0220 	rsb	r2, r2, #32
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800047c:	fa20 f202 	lsr.w	r2, r0, r2
 8000480:	eb43 0002 	adc.w	r0, r3, r2
 8000484:	bf08      	it	eq
 8000486:	f020 0001 	biceq.w	r0, r0, #1
 800048a:	4770      	bx	lr
 800048c:	f102 0220 	add.w	r2, r2, #32
 8000490:	fa01 fc02 	lsl.w	ip, r1, r2
 8000494:	f1c2 0220 	rsb	r2, r2, #32
 8000498:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800049c:	fa21 f202 	lsr.w	r2, r1, r2
 80004a0:	eb43 0002 	adc.w	r0, r3, r2
 80004a4:	bf08      	it	eq
 80004a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004aa:	4770      	bx	lr

080004ac <__aeabi_uldivmod>:
 80004ac:	b953      	cbnz	r3, 80004c4 <__aeabi_uldivmod+0x18>
 80004ae:	b94a      	cbnz	r2, 80004c4 <__aeabi_uldivmod+0x18>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	bf08      	it	eq
 80004b4:	2800      	cmpeq	r0, #0
 80004b6:	bf1c      	itt	ne
 80004b8:	f04f 31ff 	movne.w	r1, #4294967295
 80004bc:	f04f 30ff 	movne.w	r0, #4294967295
 80004c0:	f000 b96e 	b.w	80007a0 <__aeabi_idiv0>
 80004c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80004c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004cc:	f000 f806 	bl	80004dc <__udivmoddi4>
 80004d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004d8:	b004      	add	sp, #16
 80004da:	4770      	bx	lr

080004dc <__udivmoddi4>:
 80004dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004e0:	9d08      	ldr	r5, [sp, #32]
 80004e2:	4604      	mov	r4, r0
 80004e4:	468c      	mov	ip, r1
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	f040 8083 	bne.w	80005f2 <__udivmoddi4+0x116>
 80004ec:	428a      	cmp	r2, r1
 80004ee:	4617      	mov	r7, r2
 80004f0:	d947      	bls.n	8000582 <__udivmoddi4+0xa6>
 80004f2:	fab2 f282 	clz	r2, r2
 80004f6:	b142      	cbz	r2, 800050a <__udivmoddi4+0x2e>
 80004f8:	f1c2 0020 	rsb	r0, r2, #32
 80004fc:	fa24 f000 	lsr.w	r0, r4, r0
 8000500:	4091      	lsls	r1, r2
 8000502:	4097      	lsls	r7, r2
 8000504:	ea40 0c01 	orr.w	ip, r0, r1
 8000508:	4094      	lsls	r4, r2
 800050a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800050e:	0c23      	lsrs	r3, r4, #16
 8000510:	fbbc f6f8 	udiv	r6, ip, r8
 8000514:	fa1f fe87 	uxth.w	lr, r7
 8000518:	fb08 c116 	mls	r1, r8, r6, ip
 800051c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000520:	fb06 f10e 	mul.w	r1, r6, lr
 8000524:	4299      	cmp	r1, r3
 8000526:	d909      	bls.n	800053c <__udivmoddi4+0x60>
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	f106 30ff 	add.w	r0, r6, #4294967295
 800052e:	f080 8119 	bcs.w	8000764 <__udivmoddi4+0x288>
 8000532:	4299      	cmp	r1, r3
 8000534:	f240 8116 	bls.w	8000764 <__udivmoddi4+0x288>
 8000538:	3e02      	subs	r6, #2
 800053a:	443b      	add	r3, r7
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3310 	mls	r3, r8, r0, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000550:	45a6      	cmp	lr, r4
 8000552:	d909      	bls.n	8000568 <__udivmoddi4+0x8c>
 8000554:	193c      	adds	r4, r7, r4
 8000556:	f100 33ff 	add.w	r3, r0, #4294967295
 800055a:	f080 8105 	bcs.w	8000768 <__udivmoddi4+0x28c>
 800055e:	45a6      	cmp	lr, r4
 8000560:	f240 8102 	bls.w	8000768 <__udivmoddi4+0x28c>
 8000564:	3802      	subs	r0, #2
 8000566:	443c      	add	r4, r7
 8000568:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800056c:	eba4 040e 	sub.w	r4, r4, lr
 8000570:	2600      	movs	r6, #0
 8000572:	b11d      	cbz	r5, 800057c <__udivmoddi4+0xa0>
 8000574:	40d4      	lsrs	r4, r2
 8000576:	2300      	movs	r3, #0
 8000578:	e9c5 4300 	strd	r4, r3, [r5]
 800057c:	4631      	mov	r1, r6
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	b902      	cbnz	r2, 8000586 <__udivmoddi4+0xaa>
 8000584:	deff      	udf	#255	; 0xff
 8000586:	fab2 f282 	clz	r2, r2
 800058a:	2a00      	cmp	r2, #0
 800058c:	d150      	bne.n	8000630 <__udivmoddi4+0x154>
 800058e:	1bcb      	subs	r3, r1, r7
 8000590:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000594:	fa1f f887 	uxth.w	r8, r7
 8000598:	2601      	movs	r6, #1
 800059a:	fbb3 fcfe 	udiv	ip, r3, lr
 800059e:	0c21      	lsrs	r1, r4, #16
 80005a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80005a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a8:	fb08 f30c 	mul.w	r3, r8, ip
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d907      	bls.n	80005c0 <__udivmoddi4+0xe4>
 80005b0:	1879      	adds	r1, r7, r1
 80005b2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80005b6:	d202      	bcs.n	80005be <__udivmoddi4+0xe2>
 80005b8:	428b      	cmp	r3, r1
 80005ba:	f200 80e9 	bhi.w	8000790 <__udivmoddi4+0x2b4>
 80005be:	4684      	mov	ip, r0
 80005c0:	1ac9      	subs	r1, r1, r3
 80005c2:	b2a3      	uxth	r3, r4
 80005c4:	fbb1 f0fe 	udiv	r0, r1, lr
 80005c8:	fb0e 1110 	mls	r1, lr, r0, r1
 80005cc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80005d0:	fb08 f800 	mul.w	r8, r8, r0
 80005d4:	45a0      	cmp	r8, r4
 80005d6:	d907      	bls.n	80005e8 <__udivmoddi4+0x10c>
 80005d8:	193c      	adds	r4, r7, r4
 80005da:	f100 33ff 	add.w	r3, r0, #4294967295
 80005de:	d202      	bcs.n	80005e6 <__udivmoddi4+0x10a>
 80005e0:	45a0      	cmp	r8, r4
 80005e2:	f200 80d9 	bhi.w	8000798 <__udivmoddi4+0x2bc>
 80005e6:	4618      	mov	r0, r3
 80005e8:	eba4 0408 	sub.w	r4, r4, r8
 80005ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005f0:	e7bf      	b.n	8000572 <__udivmoddi4+0x96>
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d909      	bls.n	800060a <__udivmoddi4+0x12e>
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	f000 80b1 	beq.w	800075e <__udivmoddi4+0x282>
 80005fc:	2600      	movs	r6, #0
 80005fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000602:	4630      	mov	r0, r6
 8000604:	4631      	mov	r1, r6
 8000606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060a:	fab3 f683 	clz	r6, r3
 800060e:	2e00      	cmp	r6, #0
 8000610:	d14a      	bne.n	80006a8 <__udivmoddi4+0x1cc>
 8000612:	428b      	cmp	r3, r1
 8000614:	d302      	bcc.n	800061c <__udivmoddi4+0x140>
 8000616:	4282      	cmp	r2, r0
 8000618:	f200 80b8 	bhi.w	800078c <__udivmoddi4+0x2b0>
 800061c:	1a84      	subs	r4, r0, r2
 800061e:	eb61 0103 	sbc.w	r1, r1, r3
 8000622:	2001      	movs	r0, #1
 8000624:	468c      	mov	ip, r1
 8000626:	2d00      	cmp	r5, #0
 8000628:	d0a8      	beq.n	800057c <__udivmoddi4+0xa0>
 800062a:	e9c5 4c00 	strd	r4, ip, [r5]
 800062e:	e7a5      	b.n	800057c <__udivmoddi4+0xa0>
 8000630:	f1c2 0320 	rsb	r3, r2, #32
 8000634:	fa20 f603 	lsr.w	r6, r0, r3
 8000638:	4097      	lsls	r7, r2
 800063a:	fa01 f002 	lsl.w	r0, r1, r2
 800063e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000642:	40d9      	lsrs	r1, r3
 8000644:	4330      	orrs	r0, r6
 8000646:	0c03      	lsrs	r3, r0, #16
 8000648:	fbb1 f6fe 	udiv	r6, r1, lr
 800064c:	fa1f f887 	uxth.w	r8, r7
 8000650:	fb0e 1116 	mls	r1, lr, r6, r1
 8000654:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000658:	fb06 f108 	mul.w	r1, r6, r8
 800065c:	4299      	cmp	r1, r3
 800065e:	fa04 f402 	lsl.w	r4, r4, r2
 8000662:	d909      	bls.n	8000678 <__udivmoddi4+0x19c>
 8000664:	18fb      	adds	r3, r7, r3
 8000666:	f106 3cff 	add.w	ip, r6, #4294967295
 800066a:	f080 808d 	bcs.w	8000788 <__udivmoddi4+0x2ac>
 800066e:	4299      	cmp	r1, r3
 8000670:	f240 808a 	bls.w	8000788 <__udivmoddi4+0x2ac>
 8000674:	3e02      	subs	r6, #2
 8000676:	443b      	add	r3, r7
 8000678:	1a5b      	subs	r3, r3, r1
 800067a:	b281      	uxth	r1, r0
 800067c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000680:	fb0e 3310 	mls	r3, lr, r0, r3
 8000684:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000688:	fb00 f308 	mul.w	r3, r0, r8
 800068c:	428b      	cmp	r3, r1
 800068e:	d907      	bls.n	80006a0 <__udivmoddi4+0x1c4>
 8000690:	1879      	adds	r1, r7, r1
 8000692:	f100 3cff 	add.w	ip, r0, #4294967295
 8000696:	d273      	bcs.n	8000780 <__udivmoddi4+0x2a4>
 8000698:	428b      	cmp	r3, r1
 800069a:	d971      	bls.n	8000780 <__udivmoddi4+0x2a4>
 800069c:	3802      	subs	r0, #2
 800069e:	4439      	add	r1, r7
 80006a0:	1acb      	subs	r3, r1, r3
 80006a2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80006a6:	e778      	b.n	800059a <__udivmoddi4+0xbe>
 80006a8:	f1c6 0c20 	rsb	ip, r6, #32
 80006ac:	fa03 f406 	lsl.w	r4, r3, r6
 80006b0:	fa22 f30c 	lsr.w	r3, r2, ip
 80006b4:	431c      	orrs	r4, r3
 80006b6:	fa20 f70c 	lsr.w	r7, r0, ip
 80006ba:	fa01 f306 	lsl.w	r3, r1, r6
 80006be:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80006c2:	fa21 f10c 	lsr.w	r1, r1, ip
 80006c6:	431f      	orrs	r7, r3
 80006c8:	0c3b      	lsrs	r3, r7, #16
 80006ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80006ce:	fa1f f884 	uxth.w	r8, r4
 80006d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80006d6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80006da:	fb09 fa08 	mul.w	sl, r9, r8
 80006de:	458a      	cmp	sl, r1
 80006e0:	fa02 f206 	lsl.w	r2, r2, r6
 80006e4:	fa00 f306 	lsl.w	r3, r0, r6
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0x220>
 80006ea:	1861      	adds	r1, r4, r1
 80006ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80006f0:	d248      	bcs.n	8000784 <__udivmoddi4+0x2a8>
 80006f2:	458a      	cmp	sl, r1
 80006f4:	d946      	bls.n	8000784 <__udivmoddi4+0x2a8>
 80006f6:	f1a9 0902 	sub.w	r9, r9, #2
 80006fa:	4421      	add	r1, r4
 80006fc:	eba1 010a 	sub.w	r1, r1, sl
 8000700:	b2bf      	uxth	r7, r7
 8000702:	fbb1 f0fe 	udiv	r0, r1, lr
 8000706:	fb0e 1110 	mls	r1, lr, r0, r1
 800070a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800070e:	fb00 f808 	mul.w	r8, r0, r8
 8000712:	45b8      	cmp	r8, r7
 8000714:	d907      	bls.n	8000726 <__udivmoddi4+0x24a>
 8000716:	19e7      	adds	r7, r4, r7
 8000718:	f100 31ff 	add.w	r1, r0, #4294967295
 800071c:	d22e      	bcs.n	800077c <__udivmoddi4+0x2a0>
 800071e:	45b8      	cmp	r8, r7
 8000720:	d92c      	bls.n	800077c <__udivmoddi4+0x2a0>
 8000722:	3802      	subs	r0, #2
 8000724:	4427      	add	r7, r4
 8000726:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800072a:	eba7 0708 	sub.w	r7, r7, r8
 800072e:	fba0 8902 	umull	r8, r9, r0, r2
 8000732:	454f      	cmp	r7, r9
 8000734:	46c6      	mov	lr, r8
 8000736:	4649      	mov	r1, r9
 8000738:	d31a      	bcc.n	8000770 <__udivmoddi4+0x294>
 800073a:	d017      	beq.n	800076c <__udivmoddi4+0x290>
 800073c:	b15d      	cbz	r5, 8000756 <__udivmoddi4+0x27a>
 800073e:	ebb3 020e 	subs.w	r2, r3, lr
 8000742:	eb67 0701 	sbc.w	r7, r7, r1
 8000746:	fa07 fc0c 	lsl.w	ip, r7, ip
 800074a:	40f2      	lsrs	r2, r6
 800074c:	ea4c 0202 	orr.w	r2, ip, r2
 8000750:	40f7      	lsrs	r7, r6
 8000752:	e9c5 2700 	strd	r2, r7, [r5]
 8000756:	2600      	movs	r6, #0
 8000758:	4631      	mov	r1, r6
 800075a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075e:	462e      	mov	r6, r5
 8000760:	4628      	mov	r0, r5
 8000762:	e70b      	b.n	800057c <__udivmoddi4+0xa0>
 8000764:	4606      	mov	r6, r0
 8000766:	e6e9      	b.n	800053c <__udivmoddi4+0x60>
 8000768:	4618      	mov	r0, r3
 800076a:	e6fd      	b.n	8000568 <__udivmoddi4+0x8c>
 800076c:	4543      	cmp	r3, r8
 800076e:	d2e5      	bcs.n	800073c <__udivmoddi4+0x260>
 8000770:	ebb8 0e02 	subs.w	lr, r8, r2
 8000774:	eb69 0104 	sbc.w	r1, r9, r4
 8000778:	3801      	subs	r0, #1
 800077a:	e7df      	b.n	800073c <__udivmoddi4+0x260>
 800077c:	4608      	mov	r0, r1
 800077e:	e7d2      	b.n	8000726 <__udivmoddi4+0x24a>
 8000780:	4660      	mov	r0, ip
 8000782:	e78d      	b.n	80006a0 <__udivmoddi4+0x1c4>
 8000784:	4681      	mov	r9, r0
 8000786:	e7b9      	b.n	80006fc <__udivmoddi4+0x220>
 8000788:	4666      	mov	r6, ip
 800078a:	e775      	b.n	8000678 <__udivmoddi4+0x19c>
 800078c:	4630      	mov	r0, r6
 800078e:	e74a      	b.n	8000626 <__udivmoddi4+0x14a>
 8000790:	f1ac 0c02 	sub.w	ip, ip, #2
 8000794:	4439      	add	r1, r7
 8000796:	e713      	b.n	80005c0 <__udivmoddi4+0xe4>
 8000798:	3802      	subs	r0, #2
 800079a:	443c      	add	r4, r7
 800079c:	e724      	b.n	80005e8 <__udivmoddi4+0x10c>
 800079e:	bf00      	nop

080007a0 <__aeabi_idiv0>:
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop

080007a4 <L298N_5AD_set_motor>:
 *      Author: strka
 */
#include "main.h"


void L298N_5AD_set_motor(motor_str *m,TIM_HandleTypeDef *tim){
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
 80007ae:	f107 0318 	add.w	r3, r7, #24
 80007b2:	60fb      	str	r3, [r7, #12]
	if(m->motorDirection == Direct){
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d109      	bne.n	80007d2 <L298N_5AD_set_motor+0x2e>
		__HAL_TIM_SetCompare(tim, TIM_CHANNEL_1, m->actual_PWM);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	691a      	ldr	r2, [r3, #16]
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(tim, TIM_CHANNEL_2, 0);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2200      	movs	r2, #0
 80007ce:	639a      	str	r2, [r3, #56]	; 0x38
	}

void L298N_5AD_set_motor_Breake(motor_str *m,TIM_HandleTypeDef *tim){
		__HAL_TIM_SetCompare(tim, TIM_CHANNEL_ALL, 999);
	}
}
 80007d0:	e00e      	b.n	80007f0 <L298N_5AD_set_motor+0x4c>
	}else if(m->motorDirection == Reverse){
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 80007d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007dc:	d108      	bne.n	80007f0 <L298N_5AD_set_motor+0x4c>
		__HAL_TIM_SetCompare(tim, TIM_CHANNEL_2, m->actual_PWM);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	691a      	ldr	r2, [r3, #16]
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SetCompare(tim, TIM_CHANNEL_1, 0);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2200      	movs	r2, #0
 80007ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007f0:	bf00      	nop
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <L298N_5AD_init>:
void L298N_5AD_init(TIM_HandleTypeDef *tim){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

	HAL_TIMEx_PWMN_Start(tim, TIM_CHANNEL_ALL);
 8000804:	213c      	movs	r1, #60	; 0x3c
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f003 fd5c 	bl	80042c4 <HAL_TIMEx_PWMN_Start>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <motor_update_count>:
 *  Created on: 24 lut 2022
 *      Author: strka
 */
#include "main.h"

void motor_update_count(motor_str *m, TIM_HandleTypeDef *tim) {
 8000814:	b4b0      	push	{r4, r5, r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]

	int LastTimerCounter = 0; //uint16_t
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
	int TimerDif = __HAL_TIM_GET_COUNTER(tim) - LastTimerCounter;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	60bb      	str	r3, [r7, #8]
	if (TimerDif >= 4 || TimerDif <= -4) {
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	2b03      	cmp	r3, #3
 8000832:	dc03      	bgt.n	800083c <motor_update_count+0x28>
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	f113 0f03 	cmn.w	r3, #3
 800083a:	da17      	bge.n	800086c <motor_update_count+0x58>
		TimerDif /= 4;
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	2b00      	cmp	r3, #0
 8000840:	da00      	bge.n	8000844 <motor_update_count+0x30>
 8000842:	3303      	adds	r3, #3
 8000844:	109b      	asrs	r3, r3, #2
 8000846:	60bb      	str	r3, [r7, #8]
		m->pulse_count += (int8_t) TimerDif;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b25a      	sxtb	r2, r3
 8000854:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000858:	1884      	adds	r4, r0, r2
 800085a:	eb41 0503 	adc.w	r5, r1, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	e9c3 4500 	strd	r4, r5, [r3]
		LastTimerCounter = __HAL_TIM_GET_COUNTER(tim);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800086a:	60fb      	str	r3, [r7, #12]
	}
}
 800086c:	bf00      	nop
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bcb0      	pop	{r4, r5, r7}
 8000874:	4770      	bx	lr

08000876 <PID_Init>:
 */

#include "main.h"
#include <math.h>
void PID_Init(motor_str *m, float kp_init, float ki_init, float kd_init,
		int min, int max) {
 8000876:	b480      	push	{r7}
 8000878:	b087      	sub	sp, #28
 800087a:	af00      	add	r7, sp, #0
 800087c:	6178      	str	r0, [r7, #20]
 800087e:	ed87 0a04 	vstr	s0, [r7, #16]
 8000882:	edc7 0a03 	vstr	s1, [r7, #12]
 8000886:	ed87 1a02 	vstr	s2, [r7, #8]
 800088a:	6079      	str	r1, [r7, #4]
 800088c:	603a      	str	r2, [r7, #0]
	m->kp = kp_init;
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	615a      	str	r2, [r3, #20]
	m->ki = ki_init;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	61da      	str	r2, [r3, #28]
	m->kd = kd_init;
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	68ba      	ldr	r2, [r7, #8]
 800089e:	619a      	str	r2, [r3, #24]
	m->min = min;
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	621a      	str	r2, [r3, #32]
	m->max = max;
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	625a      	str	r2, [r3, #36]	; 0x24
	m->motorDirection = Direct;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	2201      	movs	r2, #1
 80008b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80008b4:	bf00      	nop
 80008b6:	371c      	adds	r7, #28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <PID_calculate>:

void PID_calculate(motor_str *m) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	ed2d 8b02 	vpush	{d8}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	float previousError;  //for calculating the derivative (edot)
	float errorIntegral; //integral error
	float deltaTime;  //time difference
	float errorValue;  //error
	float edot; //derivative (de/dt)
	float currentTime = HAL_GetTick();
 80008cc:	f000 fede 	bl	800168c <HAL_GetTick>
 80008d0:	ee07 0a90 	vmov	s15, r0
 80008d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	deltaTime = (currentTime - previousTime) / 10e6;
 80008dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80008e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80008e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008e8:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8000a18 <PID_calculate+0x158>
 80008ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008f0:	edc7 7a07 	vstr	s15, [r7, #28]
	previousTime = currentTime;
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	623b      	str	r3, [r7, #32]
	errorValue = (float) m->pulse_count - (float) m->set_target;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	f7ff fd95 	bl	8000430 <__aeabi_l2f>
 8000906:	ee08 0a10 	vmov	s16, r0
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000910:	4610      	mov	r0, r2
 8000912:	4619      	mov	r1, r3
 8000914:	f7ff fd8c 	bl	8000430 <__aeabi_l2f>
 8000918:	ee07 0a90 	vmov	s15, r0
 800091c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000920:	edc7 7a06 	vstr	s15, [r7, #24]
	edot = (errorValue - previousError) / deltaTime;
 8000924:	ed97 7a06 	vldr	s14, [r7, #24]
 8000928:	edd7 7a05 	vldr	s15, [r7, #20]
 800092c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000930:	ed97 7a07 	vldr	s14, [r7, #28]
 8000934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000938:	edc7 7a04 	vstr	s15, [r7, #16]
	errorIntegral = errorIntegral + errorValue + deltaTime;
 800093c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000940:	edd7 7a06 	vldr	s15, [r7, #24]
 8000944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000948:	ed97 7a07 	vldr	s14, [r7, #28]
 800094c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000950:	edc7 7a03 	vstr	s15, [r7, #12]
	float controlSignal = (m->kp * errorValue) + (m->kd * edot)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	ed93 7a05 	vldr	s14, [r3, #20]
 800095a:	edd7 7a06 	vldr	s15, [r7, #24]
 800095e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	edd3 6a06 	vldr	s13, [r3, #24]
 8000968:	edd7 7a04 	vldr	s15, [r7, #16]
 800096c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000970:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (m->ki * errorIntegral);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	edd3 6a07 	vldr	s13, [r3, #28]
 800097a:	edd7 7a03 	vldr	s15, [r7, #12]
 800097e:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float controlSignal = (m->kp * errorValue) + (m->kd * edot)
 8000982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000986:	edc7 7a02 	vstr	s15, [r7, #8]

	if ((int)controlSignal < 0) //negative value: CCW
 800098a:	edd7 7a02 	vldr	s15, [r7, #8]
 800098e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000992:	ee17 3a90 	vmov	r3, s15
 8000996:	2b00      	cmp	r3, #0
 8000998:	da04      	bge.n	80009a4 <PID_calculate+0xe4>
		m->motorDirection = -1;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	22ff      	movs	r2, #255	; 0xff
 800099e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80009a2:	e00b      	b.n	80009bc <PID_calculate+0xfc>
	else if ((int)controlSignal > 0) //positive: CW
 80009a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80009a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009ac:	ee17 3a90 	vmov	r3, s15
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	dd03      	ble.n	80009bc <PID_calculate+0xfc>
		m->motorDirection = 1;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2201      	movs	r2, #1
 80009b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	m->actual_PWM = (int) fabs(controlSignal);
 80009bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80009c0:	eef0 7ae7 	vabs.f32	s15, s15
 80009c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009c8:	ee17 2a90 	vmov	r2, s15
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	611a      	str	r2, [r3, #16]
	if (m->actual_PWM > m->max)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	691a      	ldr	r2, [r3, #16]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d8:	429a      	cmp	r2, r3
 80009da:	dd04      	ble.n	80009e6 <PID_calculate+0x126>
		m->actual_PWM = m->max;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	611a      	str	r2, [r3, #16]
 80009e4:	e010      	b.n	8000a08 <PID_calculate+0x148>
	else if (m->actual_PWM < m->min && errorValue != 0)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	691a      	ldr	r2, [r3, #16]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6a1b      	ldr	r3, [r3, #32]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	da0a      	bge.n	8000a08 <PID_calculate+0x148>
 80009f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80009f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80009fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009fe:	d003      	beq.n	8000a08 <PID_calculate+0x148>
		m->actual_PWM = m->min;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6a1a      	ldr	r2, [r3, #32]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	611a      	str	r2, [r3, #16]

	previousError = errorValue;
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	617b      	str	r3, [r7, #20]
}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	; 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	ecbd 8b02 	vpop	{d8}
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	4b189680 	.word	0x4b189680

08000a1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b29      	ldr	r3, [pc, #164]	; (8000adc <MX_GPIO_Init+0xc0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a28      	ldr	r2, [pc, #160]	; (8000adc <MX_GPIO_Init+0xc0>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b26      	ldr	r3, [pc, #152]	; (8000adc <MX_GPIO_Init+0xc0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b22      	ldr	r3, [pc, #136]	; (8000adc <MX_GPIO_Init+0xc0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a21      	ldr	r2, [pc, #132]	; (8000adc <MX_GPIO_Init+0xc0>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <MX_GPIO_Init+0xc0>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_GPIO_Init+0xc0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a1a      	ldr	r2, [pc, #104]	; (8000adc <MX_GPIO_Init+0xc0>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_GPIO_Init+0xc0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_GPIO_Init+0xc0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a13      	ldr	r2, [pc, #76]	; (8000adc <MX_GPIO_Init+0xc0>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_GPIO_Init+0xc0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = M2KY_010B_Pin|M2KY_010A_Pin;
 8000aa2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480a      	ldr	r0, [pc, #40]	; (8000ae0 <MX_GPIO_Init+0xc4>)
 8000ab8:	f000 ff2a 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = M1KY_010B_Pin|M1KY_010A_Pin;
 8000abc:	2330      	movs	r3, #48	; 0x30
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_GPIO_Init+0xc8>)
 8000ad0:	f000 ff1e 	bl	8001910 <HAL_GPIO_Init>

}
 8000ad4:	bf00      	nop
 8000ad6:	3728      	adds	r7, #40	; 0x28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aea:	b087      	sub	sp, #28
 8000aec:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aee:	f000 fd67 	bl	80015c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af2:	f000 f8a5 	bl	8000c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af6:	f7ff ff91 	bl	8000a1c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000afa:	f006 fd3f 	bl	800757c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000afe:	f000 fa63 	bl	8000fc8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b02:	f000 fab9 	bl	8001078 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b06:	f000 fb1b 	bl	8001140 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b0a:	f000 fb6d 	bl	80011e8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	L298N_5AD_init(&htim2); //motor init
 8000b0e:	483f      	ldr	r0, [pc, #252]	; (8000c0c <main+0x124>)
 8000b10:	f7ff fe74 	bl	80007fc <L298N_5AD_init>
	L298N_5AD_init(&htim4); //motor init
 8000b14:	483e      	ldr	r0, [pc, #248]	; (8000c10 <main+0x128>)
 8000b16:	f7ff fe71 	bl	80007fc <L298N_5AD_init>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000b1a:	213c      	movs	r1, #60	; 0x3c
 8000b1c:	483d      	ldr	r0, [pc, #244]	; (8000c14 <main+0x12c>)
 8000b1e:	f002 ff14 	bl	800394a <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000b22:	213c      	movs	r1, #60	; 0x3c
 8000b24:	483c      	ldr	r0, [pc, #240]	; (8000c18 <main+0x130>)
 8000b26:	f002 ff10 	bl	800394a <HAL_TIM_Encoder_Start>
	PID_Init(&motorA, MOTOR_A_Kp, MOTOR_A_Ki, MOTOR_A_Kd, 0, 999); //enter values kp,ki,kd into PID contoller
 8000b2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b2e:	2100      	movs	r1, #0
 8000b30:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8000c1c <main+0x134>
 8000b34:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8000c20 <main+0x138>
 8000b38:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8000c24 <main+0x13c>
 8000b3c:	483a      	ldr	r0, [pc, #232]	; (8000c28 <main+0x140>)
 8000b3e:	f7ff fe9a 	bl	8000876 <PID_Init>
	PID_Init(&motorB, MOTOR_A_Kp, MOTOR_A_Ki, MOTOR_A_Kd, 0, 999); //enter values kp,ki,kd into PID contoller
 8000b42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b46:	2100      	movs	r1, #0
 8000b48:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8000c1c <main+0x134>
 8000b4c:	eddf 0a34 	vldr	s1, [pc, #208]	; 8000c20 <main+0x138>
 8000b50:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8000c24 <main+0x13c>
 8000b54:	4835      	ldr	r0, [pc, #212]	; (8000c2c <main+0x144>)
 8000b56:	f7ff fe8e 	bl	8000876 <PID_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		motor_update_count(&motorA,&htim1); // tick counting encoder for motor A
 8000b5a:	492e      	ldr	r1, [pc, #184]	; (8000c14 <main+0x12c>)
 8000b5c:	4832      	ldr	r0, [pc, #200]	; (8000c28 <main+0x140>)
 8000b5e:	f7ff fe59 	bl	8000814 <motor_update_count>
		motor_update_count(&motorB,&htim3); // tick counting encoder for motor B
 8000b62:	492d      	ldr	r1, [pc, #180]	; (8000c18 <main+0x130>)
 8000b64:	4831      	ldr	r0, [pc, #196]	; (8000c2c <main+0x144>)
 8000b66:	f7ff fe55 	bl	8000814 <motor_update_count>
		receive_usb_message(&target_Xaxis, &target_Yaxis); //recive message form CDC USB
 8000b6a:	4931      	ldr	r1, [pc, #196]	; (8000c30 <main+0x148>)
 8000b6c:	4831      	ldr	r0, [pc, #196]	; (8000c34 <main+0x14c>)
 8000b6e:	f000 f8cf 	bl	8000d10 <receive_usb_message>
		PID_calculate(&motorA); // pid calculate algorithm for motor A
 8000b72:	482d      	ldr	r0, [pc, #180]	; (8000c28 <main+0x140>)
 8000b74:	f7ff fea4 	bl	80008c0 <PID_calculate>
		PID_calculate(&motorB); // pid calculate algorithm for motor B
 8000b78:	482c      	ldr	r0, [pc, #176]	; (8000c2c <main+0x144>)
 8000b7a:	f7ff fea1 	bl	80008c0 <PID_calculate>
		L298N_5AD_set_motor(&motorA,&htim2); // set PWM motor A
 8000b7e:	4923      	ldr	r1, [pc, #140]	; (8000c0c <main+0x124>)
 8000b80:	4829      	ldr	r0, [pc, #164]	; (8000c28 <main+0x140>)
 8000b82:	f7ff fe0f 	bl	80007a4 <L298N_5AD_set_motor>
		L298N_5AD_set_motor(&motorA,&htim4); // set pwm motor B
 8000b86:	4922      	ldr	r1, [pc, #136]	; (8000c10 <main+0x128>)
 8000b88:	4827      	ldr	r0, [pc, #156]	; (8000c28 <main+0x140>)
 8000b8a:	f7ff fe0b 	bl	80007a4 <L298N_5AD_set_motor>
		motorA.set_target = target_Xaxis; //
 8000b8e:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <main+0x14c>)
 8000b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b94:	4924      	ldr	r1, [pc, #144]	; (8000c28 <main+0x140>)
 8000b96:	e9c1 2302 	strd	r2, r3, [r1, #8]
		motorB.set_target = target_Yaxis;
 8000b9a:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <main+0x148>)
 8000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba0:	4922      	ldr	r1, [pc, #136]	; (8000c2c <main+0x144>)
 8000ba2:	e9c1 2302 	strd	r2, r3, [r1, #8]
		sprintf(message, "EC(A):%d PWM(A):%d Target(A):%d Direction(A):%d\n\rEC(B):%d PWM(B):%d Target(B):%d Direction(B):%d\n\r",(int) motorA.pulse_count, (int) motorA.actual_PWM, (int)motorA.set_target,(int) motorA.motorDirection,(int) motorB.pulse_count, (int) motorB.actual_PWM, (int)motorB.set_target,(int) motorB.motorDirection);
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <main+0x140>)
 8000ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bac:	4694      	mov	ip, r2
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <main+0x140>)
 8000bb0:	6918      	ldr	r0, [r3, #16]
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <main+0x140>)
 8000bb4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000bb8:	4614      	mov	r4, r2
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <main+0x140>)
 8000bbc:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 8000bc0:	461d      	mov	r5, r3
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <main+0x144>)
 8000bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc8:	4616      	mov	r6, r2
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <main+0x144>)
 8000bcc:	6919      	ldr	r1, [r3, #16]
 8000bce:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <main+0x144>)
 8000bd0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <main+0x144>)
 8000bd6:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 8000bda:	9305      	str	r3, [sp, #20]
 8000bdc:	9204      	str	r2, [sp, #16]
 8000bde:	9103      	str	r1, [sp, #12]
 8000be0:	9602      	str	r6, [sp, #8]
 8000be2:	9501      	str	r5, [sp, #4]
 8000be4:	9400      	str	r4, [sp, #0]
 8000be6:	4603      	mov	r3, r0
 8000be8:	4662      	mov	r2, ip
 8000bea:	4913      	ldr	r1, [pc, #76]	; (8000c38 <main+0x150>)
 8000bec:	4813      	ldr	r0, [pc, #76]	; (8000c3c <main+0x154>)
 8000bee:	f007 fa23 	bl	8008038 <siprintf>
		CDC_Transmit_FS(message, strlen(message));
 8000bf2:	4812      	ldr	r0, [pc, #72]	; (8000c3c <main+0x154>)
 8000bf4:	f7ff faf4 	bl	80001e0 <strlen>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480f      	ldr	r0, [pc, #60]	; (8000c3c <main+0x154>)
 8000bfe:	f006 fd97 	bl	8007730 <CDC_Transmit_FS>
		//sprintf(message, "EC(B):%d PWM(B):%d Target(B):%d Direction(B):%d\n\r",(int) motorB.pulse_count, (int) motorB.actual_PWM, (int)motorB.set_target,(int) motorB.motorDirection);
		//CDC_Transmit_FS(message, strlen(message));
		HAL_Delay(100);
 8000c02:	2064      	movs	r0, #100	; 0x64
 8000c04:	f000 fd4e 	bl	80016a4 <HAL_Delay>
	while (1) {
 8000c08:	e7a7      	b.n	8000b5a <main+0x72>
 8000c0a:	bf00      	nop
 8000c0c:	20000818 	.word	0x20000818
 8000c10:	20000740 	.word	0x20000740
 8000c14:	200007d0 	.word	0x200007d0
 8000c18:	20000788 	.word	0x20000788
 8000c1c:	3e4ccccd 	.word	0x3e4ccccd
 8000c20:	3dcccccd 	.word	0x3dcccccd
 8000c24:	3f99999a 	.word	0x3f99999a
 8000c28:	20000440 	.word	0x20000440
 8000c2c:	20000710 	.word	0x20000710
 8000c30:	20000700 	.word	0x20000700
 8000c34:	20000478 	.word	0x20000478
 8000c38:	08008a0c 	.word	0x08008a0c
 8000c3c:	20000480 	.word	0x20000480

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b094      	sub	sp, #80	; 0x50
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0320 	add.w	r3, r7, #32
 8000c4a:	2230      	movs	r2, #48	; 0x30
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f007 f9ea 	bl	8008028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <SystemClock_Config+0xc8>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	4a26      	ldr	r2, [pc, #152]	; (8000d08 <SystemClock_Config+0xc8>)
 8000c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c72:	6413      	str	r3, [r2, #64]	; 0x40
 8000c74:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <SystemClock_Config+0xc8>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <SystemClock_Config+0xcc>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a20      	ldr	r2, [pc, #128]	; (8000d0c <SystemClock_Config+0xcc>)
 8000c8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <SystemClock_Config+0xcc>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000caa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000cb0:	2319      	movs	r3, #25
 8000cb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000cb4:	23c0      	movs	r3, #192	; 0xc0
 8000cb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc0:	f107 0320 	add.w	r3, r7, #32
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 f92b 	bl	8002f20 <HAL_RCC_OscConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cd0:	f000 f894 	bl	8000dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	2103      	movs	r1, #3
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f002 fb8d 	bl	8003410 <HAL_RCC_ClockConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cfc:	f000 f87e 	bl	8000dfc <Error_Handler>
  }
}
 8000d00:	bf00      	nop
 8000d02:	3750      	adds	r7, #80	; 0x50
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40007000 	.word	0x40007000

08000d10 <receive_usb_message>:

/* USER CODE BEGIN 4 */
void receive_usb_message(long long int *x, int *y) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af02      	add	r7, sp, #8
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	if (ReceivedDataFlag == 1) {
 8000d1a:	4b2e      	ldr	r3, [pc, #184]	; (8000dd4 <receive_usb_message+0xc4>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d153      	bne.n	8000dca <receive_usb_message+0xba>
		ReceivedDataFlag = 0;
 8000d22:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <receive_usb_message+0xc4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
		if (ReceivedData[0] == 'X' && strstr(ReceivedData, "Y")) {
 8000d28:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <receive_usb_message+0xc8>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b58      	cmp	r3, #88	; 0x58
 8000d2e:	d129      	bne.n	8000d84 <receive_usb_message+0x74>
 8000d30:	2159      	movs	r1, #89	; 0x59
 8000d32:	4829      	ldr	r0, [pc, #164]	; (8000dd8 <receive_usb_message+0xc8>)
 8000d34:	f007 f9a0 	bl	8008078 <strchr>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d022      	beq.n	8000d84 <receive_usb_message+0x74>
			*x = strtol(ReceivedData + 1, &endXarg, 10);
 8000d3e:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <receive_usb_message+0xcc>)
 8000d40:	220a      	movs	r2, #10
 8000d42:	4927      	ldr	r1, [pc, #156]	; (8000de0 <receive_usb_message+0xd0>)
 8000d44:	4618      	mov	r0, r3
 8000d46:	f007 fa3d 	bl	80081c4 <strtol>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	e9c1 2300 	strd	r2, r3, [r1]
			*y = strtol(endXarg + 1, NULL, 10);
 8000d58:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <receive_usb_message+0xd0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	220a      	movs	r2, #10
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f007 fa2e 	bl	80081c4 <strtol>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	601a      	str	r2, [r3, #0]
			sprintf(message, "OK X=%d Y=%d\n\r", *x, *y);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d74:	6839      	ldr	r1, [r7, #0]
 8000d76:	6809      	ldr	r1, [r1, #0]
 8000d78:	9100      	str	r1, [sp, #0]
 8000d7a:	491a      	ldr	r1, [pc, #104]	; (8000de4 <receive_usb_message+0xd4>)
 8000d7c:	481a      	ldr	r0, [pc, #104]	; (8000de8 <receive_usb_message+0xd8>)
 8000d7e:	f007 f95b 	bl	8008038 <siprintf>
 8000d82:	e01a      	b.n	8000dba <receive_usb_message+0xaa>
		} else if (ReceivedData[0] == 'C') {
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <receive_usb_message+0xc8>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b43      	cmp	r3, #67	; 0x43
 8000d8a:	d104      	bne.n	8000d96 <receive_usb_message+0x86>
			//calibrate motor function not added yet
			sprintf(message, "Calibration in progress...");
 8000d8c:	4917      	ldr	r1, [pc, #92]	; (8000dec <receive_usb_message+0xdc>)
 8000d8e:	4816      	ldr	r0, [pc, #88]	; (8000de8 <receive_usb_message+0xd8>)
 8000d90:	f007 f952 	bl	8008038 <siprintf>
 8000d94:	e011      	b.n	8000dba <receive_usb_message+0xaa>
		} else if (ReceivedData[0] == 'F') {
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <receive_usb_message+0xc8>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b46      	cmp	r3, #70	; 0x46
 8000d9c:	d109      	bne.n	8000db2 <receive_usb_message+0xa2>
			FireFlag++;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <receive_usb_message+0xe0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <receive_usb_message+0xe0>)
 8000da6:	6013      	str	r3, [r2, #0]
			sprintf(message, "OK");
 8000da8:	4912      	ldr	r1, [pc, #72]	; (8000df4 <receive_usb_message+0xe4>)
 8000daa:	480f      	ldr	r0, [pc, #60]	; (8000de8 <receive_usb_message+0xd8>)
 8000dac:	f007 f944 	bl	8008038 <siprintf>
 8000db0:	e003      	b.n	8000dba <receive_usb_message+0xaa>
		} else {
			sprintf(message, "BAD_SYNTAX!");
 8000db2:	4911      	ldr	r1, [pc, #68]	; (8000df8 <receive_usb_message+0xe8>)
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <receive_usb_message+0xd8>)
 8000db6:	f007 f93f 	bl	8008038 <siprintf>
		}
		CDC_Transmit_FS(message, strlen(message));
 8000dba:	480b      	ldr	r0, [pc, #44]	; (8000de8 <receive_usb_message+0xd8>)
 8000dbc:	f7ff fa10 	bl	80001e0 <strlen>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4808      	ldr	r0, [pc, #32]	; (8000de8 <receive_usb_message+0xd8>)
 8000dc6:	f006 fcb3 	bl	8007730 <CDC_Transmit_FS>
	}
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000204 	.word	0x20000204
 8000dd8:	200006d8 	.word	0x200006d8
 8000ddc:	200006d9 	.word	0x200006d9
 8000de0:	20000438 	.word	0x20000438
 8000de4:	08008a70 	.word	0x08008a70
 8000de8:	20000480 	.word	0x20000480
 8000dec:	08008a80 	.word	0x08008a80
 8000df0:	20000470 	.word	0x20000470
 8000df4:	08008a9c 	.word	0x08008a9c
 8000df8:	08008aa0 	.word	0x08008aa0

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000e5c:	e7fe      	b.n	8000e5c <NMI_Handler+0x4>

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea4:	f000 fbde 	bl	8001664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000eb2:	f002 fdd8 	bl	8003a66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200007d0 	.word	0x200007d0

08000ec0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ec6:	f002 fdce 	bl	8003a66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200007d0 	.word	0x200007d0

08000ed4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000eda:	f002 fdc4 	bl	8003a66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200007d0 	.word	0x200007d0

08000ee8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <TIM1_CC_IRQHandler+0x10>)
 8000eee:	f002 fdba 	bl	8003a66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200007d0 	.word	0x200007d0

08000efc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <TIM2_IRQHandler+0x10>)
 8000f02:	f002 fdb0 	bl	8003a66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000818 	.word	0x20000818

08000f10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <TIM3_IRQHandler+0x10>)
 8000f16:	f002 fda6 	bl	8003a66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000788 	.word	0x20000788

08000f24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <OTG_FS_IRQHandler+0x10>)
 8000f2a:	f000 ffc5 	bl	8001eb8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20001d34 	.word	0x20001d34

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f68:	f007 f834 	bl	8007fd4 <__errno>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	220c      	movs	r2, #12
 8000f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	e009      	b.n	8000f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <_sbrk+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20020000 	.word	0x20020000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	20000208 	.word	0x20000208
 8000fa0:	20002150 	.word	0x20002150

08000fa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <SystemInit+0x20>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <SystemInit+0x20>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08c      	sub	sp, #48	; 0x30
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2224      	movs	r2, #36	; 0x24
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f007 f826 	bl	8008028 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <MX_TIM1_Init+0xa8>)
 8000fe6:	4a23      	ldr	r2, [pc, #140]	; (8001074 <MX_TIM1_Init+0xac>)
 8000fe8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <MX_TIM1_Init+0xa8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_TIM1_Init+0xa8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ff6:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <MX_TIM1_Init+0xa8>)
 8000ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_TIM1_Init+0xa8>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_TIM1_Init+0xa8>)
 8001006:	2200      	movs	r2, #0
 8001008:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_TIM1_Init+0xa8>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001010:	2301      	movs	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001018:	2301      	movs	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001020:	230f      	movs	r3, #15
 8001022:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001028:	2301      	movs	r3, #1
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001030:	230f      	movs	r3, #15
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	4619      	mov	r1, r3
 800103a:	480d      	ldr	r0, [pc, #52]	; (8001070 <MX_TIM1_Init+0xa8>)
 800103c:	f002 fbdf 	bl	80037fe <HAL_TIM_Encoder_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001046:	f7ff fed9 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <MX_TIM1_Init+0xa8>)
 8001058:	f003 f9e0 	bl	800441c <HAL_TIMEx_MasterConfigSynchronization>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001062:	f7ff fecb 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	3730      	adds	r7, #48	; 0x30
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200007d0 	.word	0x200007d0
 8001074:	40010000 	.word	0x40010000

08001078 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]
 8001096:	615a      	str	r2, [r3, #20]
 8001098:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800109a:	4b28      	ldr	r3, [pc, #160]	; (800113c <MX_TIM2_Init+0xc4>)
 800109c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5-1;
 80010a2:	4b26      	ldr	r3, [pc, #152]	; (800113c <MX_TIM2_Init+0xc4>)
 80010a4:	2204      	movs	r2, #4
 80010a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <MX_TIM2_Init+0xc4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80010ae:	4b23      	ldr	r3, [pc, #140]	; (800113c <MX_TIM2_Init+0xc4>)
 80010b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <MX_TIM2_Init+0xc4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <MX_TIM2_Init+0xc4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010c2:	481e      	ldr	r0, [pc, #120]	; (800113c <MX_TIM2_Init+0xc4>)
 80010c4:	f002 fb4c 	bl	8003760 <HAL_TIM_PWM_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80010ce:	f7ff fe95 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010da:	f107 0320 	add.w	r3, r7, #32
 80010de:	4619      	mov	r1, r3
 80010e0:	4816      	ldr	r0, [pc, #88]	; (800113c <MX_TIM2_Init+0xc4>)
 80010e2:	f003 f99b 	bl	800441c <HAL_TIMEx_MasterConfigSynchronization>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80010ec:	f7ff fe86 	bl	8000dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f0:	2360      	movs	r3, #96	; 0x60
 80010f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2200      	movs	r2, #0
 8001104:	4619      	mov	r1, r3
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <MX_TIM2_Init+0xc4>)
 8001108:	f002 fdb6 	bl	8003c78 <HAL_TIM_PWM_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001112:	f7ff fe73 	bl	8000dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2204      	movs	r2, #4
 800111a:	4619      	mov	r1, r3
 800111c:	4807      	ldr	r0, [pc, #28]	; (800113c <MX_TIM2_Init+0xc4>)
 800111e:	f002 fdab 	bl	8003c78 <HAL_TIM_PWM_ConfigChannel>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001128:	f7ff fe68 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800112c:	4803      	ldr	r0, [pc, #12]	; (800113c <MX_TIM2_Init+0xc4>)
 800112e:	f000 f99f 	bl	8001470 <HAL_TIM_MspPostInit>

}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	; 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000818 	.word	0x20000818

08001140 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08c      	sub	sp, #48	; 0x30
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	2224      	movs	r2, #36	; 0x24
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f006 ff6a 	bl	8008028 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800115c:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <MX_TIM3_Init+0xa0>)
 800115e:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <MX_TIM3_Init+0xa4>)
 8001160:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <MX_TIM3_Init+0xa0>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <MX_TIM3_Init+0xa0>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <MX_TIM3_Init+0xa0>)
 8001170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001174:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_TIM3_Init+0xa0>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_TIM3_Init+0xa0>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001182:	2303      	movs	r3, #3
 8001184:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800118a:	2301      	movs	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800119a:	2301      	movs	r3, #1
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	4619      	mov	r1, r3
 80011ac:	480c      	ldr	r0, [pc, #48]	; (80011e0 <MX_TIM3_Init+0xa0>)
 80011ae:	f002 fb26 	bl	80037fe <HAL_TIM_Encoder_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80011b8:	f7ff fe20 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_TIM3_Init+0xa0>)
 80011ca:	f003 f927 	bl	800441c <HAL_TIMEx_MasterConfigSynchronization>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80011d4:	f7ff fe12 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	3730      	adds	r7, #48	; 0x30
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000788 	.word	0x20000788
 80011e4:	40000400 	.word	0x40000400

080011e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ee:	f107 0320 	add.w	r3, r7, #32
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
 8001206:	615a      	str	r2, [r3, #20]
 8001208:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800120a:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <MX_TIM4_Init+0xc0>)
 800120c:	4a27      	ldr	r2, [pc, #156]	; (80012ac <MX_TIM4_Init+0xc4>)
 800120e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5-1;
 8001210:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <MX_TIM4_Init+0xc0>)
 8001212:	2204      	movs	r2, #4
 8001214:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <MX_TIM4_Init+0xc0>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800121c:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <MX_TIM4_Init+0xc0>)
 800121e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001222:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001224:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <MX_TIM4_Init+0xc0>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <MX_TIM4_Init+0xc0>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001230:	481d      	ldr	r0, [pc, #116]	; (80012a8 <MX_TIM4_Init+0xc0>)
 8001232:	f002 fa95 	bl	8003760 <HAL_TIM_PWM_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800123c:	f7ff fdde 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001248:	f107 0320 	add.w	r3, r7, #32
 800124c:	4619      	mov	r1, r3
 800124e:	4816      	ldr	r0, [pc, #88]	; (80012a8 <MX_TIM4_Init+0xc0>)
 8001250:	f003 f8e4 	bl	800441c <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800125a:	f7ff fdcf 	bl	8000dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800125e:	2360      	movs	r3, #96	; 0x60
 8001260:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2200      	movs	r2, #0
 8001272:	4619      	mov	r1, r3
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <MX_TIM4_Init+0xc0>)
 8001276:	f002 fcff 	bl	8003c78 <HAL_TIM_PWM_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001280:	f7ff fdbc 	bl	8000dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2204      	movs	r2, #4
 8001288:	4619      	mov	r1, r3
 800128a:	4807      	ldr	r0, [pc, #28]	; (80012a8 <MX_TIM4_Init+0xc0>)
 800128c:	f002 fcf4 	bl	8003c78 <HAL_TIM_PWM_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001296:	f7ff fdb1 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800129a:	4803      	ldr	r0, [pc, #12]	; (80012a8 <MX_TIM4_Init+0xc0>)
 800129c:	f000 f8e8 	bl	8001470 <HAL_TIM_MspPostInit>

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000740 	.word	0x20000740
 80012ac:	40000800 	.word	0x40000800

080012b0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	; 0x30
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a46      	ldr	r2, [pc, #280]	; (80013e8 <HAL_TIM_Encoder_MspInit+0x138>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d14d      	bne.n	800136e <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	4b45      	ldr	r3, [pc, #276]	; (80013ec <HAL_TIM_Encoder_MspInit+0x13c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a44      	ldr	r2, [pc, #272]	; (80013ec <HAL_TIM_Encoder_MspInit+0x13c>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b42      	ldr	r3, [pc, #264]	; (80013ec <HAL_TIM_Encoder_MspInit+0x13c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	4b3e      	ldr	r3, [pc, #248]	; (80013ec <HAL_TIM_Encoder_MspInit+0x13c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a3d      	ldr	r2, [pc, #244]	; (80013ec <HAL_TIM_Encoder_MspInit+0x13c>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M1E_OUT_A_Pin|M1E_OUT_B_Pin;
 800130a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800131c:	2301      	movs	r3, #1
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	4832      	ldr	r0, [pc, #200]	; (80013f0 <HAL_TIM_Encoder_MspInit+0x140>)
 8001328:	f000 faf2 	bl	8001910 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	2018      	movs	r0, #24
 8001332:	f000 fab6 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001336:	2018      	movs	r0, #24
 8001338:	f000 facf 	bl	80018da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	210f      	movs	r1, #15
 8001340:	2019      	movs	r0, #25
 8001342:	f000 faae 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001346:	2019      	movs	r0, #25
 8001348:	f000 fac7 	bl	80018da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800134c:	2200      	movs	r2, #0
 800134e:	2100      	movs	r1, #0
 8001350:	201a      	movs	r0, #26
 8001352:	f000 faa6 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001356:	201a      	movs	r0, #26
 8001358:	f000 fabf 	bl	80018da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2100      	movs	r1, #0
 8001360:	201b      	movs	r0, #27
 8001362:	f000 fa9e 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001366:	201b      	movs	r0, #27
 8001368:	f000 fab7 	bl	80018da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800136c:	e038      	b.n	80013e0 <HAL_TIM_Encoder_MspInit+0x130>
  else if(tim_encoderHandle->Instance==TIM3)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a20      	ldr	r2, [pc, #128]	; (80013f4 <HAL_TIM_Encoder_MspInit+0x144>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d133      	bne.n	80013e0 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <HAL_TIM_Encoder_MspInit+0x13c>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	4a1a      	ldr	r2, [pc, #104]	; (80013ec <HAL_TIM_Encoder_MspInit+0x13c>)
 8001382:	f043 0302 	orr.w	r3, r3, #2
 8001386:	6413      	str	r3, [r2, #64]	; 0x40
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <HAL_TIM_Encoder_MspInit+0x13c>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <HAL_TIM_Encoder_MspInit+0x13c>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	4a13      	ldr	r2, [pc, #76]	; (80013ec <HAL_TIM_Encoder_MspInit+0x13c>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6313      	str	r3, [r2, #48]	; 0x30
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_TIM_Encoder_MspInit+0x13c>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M2E_OUT_A_Pin|M2E_OUT_B_Pin;
 80013b0:	23c0      	movs	r3, #192	; 0xc0
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013c0:	2302      	movs	r3, #2
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	4809      	ldr	r0, [pc, #36]	; (80013f0 <HAL_TIM_Encoder_MspInit+0x140>)
 80013cc:	f000 faa0 	bl	8001910 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	201d      	movs	r0, #29
 80013d6:	f000 fa64 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013da:	201d      	movs	r0, #29
 80013dc:	f000 fa7d 	bl	80018da <HAL_NVIC_EnableIRQ>
}
 80013e0:	bf00      	nop
 80013e2:	3730      	adds	r7, #48	; 0x30
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40010000 	.word	0x40010000
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40000400 	.word	0x40000400

080013f8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001408:	d116      	bne.n	8001438 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_TIM_PWM_MspInit+0x70>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a15      	ldr	r2, [pc, #84]	; (8001468 <HAL_TIM_PWM_MspInit+0x70>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <HAL_TIM_PWM_MspInit+0x70>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	201c      	movs	r0, #28
 800142c:	f000 fa39 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001430:	201c      	movs	r0, #28
 8001432:	f000 fa52 	bl	80018da <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001436:	e012      	b.n	800145e <HAL_TIM_PWM_MspInit+0x66>
  else if(tim_pwmHandle->Instance==TIM4)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <HAL_TIM_PWM_MspInit+0x74>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d10d      	bne.n	800145e <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_TIM_PWM_MspInit+0x70>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_TIM_PWM_MspInit+0x70>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_TIM_PWM_MspInit+0x70>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
}
 800145e:	bf00      	nop
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40000800 	.word	0x40000800

08001470 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001490:	d13c      	bne.n	800150c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b31      	ldr	r3, [pc, #196]	; (800155c <HAL_TIM_MspPostInit+0xec>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a30      	ldr	r2, [pc, #192]	; (800155c <HAL_TIM_MspPostInit+0xec>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b2e      	ldr	r3, [pc, #184]	; (800155c <HAL_TIM_MspPostInit+0xec>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b2a      	ldr	r3, [pc, #168]	; (800155c <HAL_TIM_MspPostInit+0xec>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a29      	ldr	r2, [pc, #164]	; (800155c <HAL_TIM_MspPostInit+0xec>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b27      	ldr	r3, [pc, #156]	; (800155c <HAL_TIM_MspPostInit+0xec>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M1PWM_Direct_Pin;
 80014ca:	2320      	movs	r3, #32
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014da:	2301      	movs	r3, #1
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1PWM_Direct_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	481e      	ldr	r0, [pc, #120]	; (8001560 <HAL_TIM_MspPostInit+0xf0>)
 80014e6:	f000 fa13 	bl	8001910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1PWM_Reverse_Pin;
 80014ea:	2308      	movs	r3, #8
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014fa:	2301      	movs	r3, #1
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1PWM_Reverse_GPIO_Port, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	4817      	ldr	r0, [pc, #92]	; (8001564 <HAL_TIM_MspPostInit+0xf4>)
 8001506:	f000 fa03 	bl	8001910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800150a:	e022      	b.n	8001552 <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM4)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a15      	ldr	r2, [pc, #84]	; (8001568 <HAL_TIM_MspPostInit+0xf8>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d11d      	bne.n	8001552 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_TIM_MspPostInit+0xec>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a0f      	ldr	r2, [pc, #60]	; (800155c <HAL_TIM_MspPostInit+0xec>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <HAL_TIM_MspPostInit+0xec>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M2PWM_Direct_Pin|M2PWM_Reverse_Pin;
 8001532:	23c0      	movs	r3, #192	; 0xc0
 8001534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001542:	2302      	movs	r3, #2
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <HAL_TIM_MspPostInit+0xf4>)
 800154e:	f000 f9df 	bl	8001910 <HAL_GPIO_Init>
}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	; 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	40000800 	.word	0x40000800

0800156c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800156c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001570:	480d      	ldr	r0, [pc, #52]	; (80015a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001572:	490e      	ldr	r1, [pc, #56]	; (80015ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001574:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001588:	4c0b      	ldr	r4, [pc, #44]	; (80015b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001596:	f7ff fd05 	bl	8000fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159a:	f006 fd21 	bl	8007fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159e:	f7ff faa3 	bl	8000ae8 <main>
  bx  lr    
 80015a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ac:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80015b0:	08008c48 	.word	0x08008c48
  ldr r2, =_sbss
 80015b4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80015b8:	2000214c 	.word	0x2000214c

080015bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015bc:	e7fe      	b.n	80015bc <ADC_IRQHandler>
	...

080015c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <HAL_Init+0x40>)
 80015ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <HAL_Init+0x40>)
 80015d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_Init+0x40>)
 80015e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e8:	2003      	movs	r0, #3
 80015ea:	f000 f94f 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ee:	200f      	movs	r0, #15
 80015f0:	f000 f808 	bl	8001604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f4:	f7ff fc08 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023c00 	.word	0x40023c00

08001604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_InitTick+0x54>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x58>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161a:	fbb3 f3f1 	udiv	r3, r3, r1
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	4618      	mov	r0, r3
 8001624:	f000 f967 	bl	80018f6 <HAL_SYSTICK_Config>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e00e      	b.n	8001650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b0f      	cmp	r3, #15
 8001636:	d80a      	bhi.n	800164e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001638:	2200      	movs	r2, #0
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	f000 f92f 	bl	80018a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001644:	4a06      	ldr	r2, [pc, #24]	; (8001660 <HAL_InitTick+0x5c>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	e000      	b.n	8001650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000000 	.word	0x20000000
 800165c:	20000008 	.word	0x20000008
 8001660:	20000004 	.word	0x20000004

08001664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_IncTick+0x20>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_IncTick+0x24>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4413      	add	r3, r2
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <HAL_IncTick+0x24>)
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000008 	.word	0x20000008
 8001688:	20000860 	.word	0x20000860

0800168c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return uwTick;
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <HAL_GetTick+0x14>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000860 	.word	0x20000860

080016a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ac:	f7ff ffee 	bl	800168c <HAL_GetTick>
 80016b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016bc:	d005      	beq.n	80016ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_Delay+0x44>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ca:	bf00      	nop
 80016cc:	f7ff ffde 	bl	800168c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d8f7      	bhi.n	80016cc <HAL_Delay+0x28>
  {
  }
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000008 	.word	0x20000008

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	; (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4907      	ldr	r1, [pc, #28]	; (8001788 <__NVIC_EnableIRQ+0x38>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e100 	.word	0xe000e100

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	; (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	; (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f7ff ff8e 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff29 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b4:	f7ff ff3e 	bl	8001734 <__NVIC_GetPriorityGrouping>
 80018b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7ff ff8e 	bl	80017e0 <NVIC_EncodePriority>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff5d 	bl	800178c <__NVIC_SetPriority>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff31 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffa2 	bl	8001848 <SysTick_Config>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
 800192a:	e159      	b.n	8001be0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800192c:	2201      	movs	r2, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	429a      	cmp	r2, r3
 8001946:	f040 8148 	bne.w	8001bda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b01      	cmp	r3, #1
 8001954:	d005      	beq.n	8001962 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800195e:	2b02      	cmp	r3, #2
 8001960:	d130      	bne.n	80019c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	2203      	movs	r2, #3
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001998:	2201      	movs	r2, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 0201 	and.w	r2, r3, #1
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d017      	beq.n	8001a00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d123      	bne.n	8001a54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	08da      	lsrs	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3208      	adds	r2, #8
 8001a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	220f      	movs	r2, #15
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	08da      	lsrs	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3208      	adds	r2, #8
 8001a4e:	69b9      	ldr	r1, [r7, #24]
 8001a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0203 	and.w	r2, r3, #3
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80a2 	beq.w	8001bda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b57      	ldr	r3, [pc, #348]	; (8001bf8 <HAL_GPIO_Init+0x2e8>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	4a56      	ldr	r2, [pc, #344]	; (8001bf8 <HAL_GPIO_Init+0x2e8>)
 8001aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa6:	4b54      	ldr	r3, [pc, #336]	; (8001bf8 <HAL_GPIO_Init+0x2e8>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ab2:	4a52      	ldr	r2, [pc, #328]	; (8001bfc <HAL_GPIO_Init+0x2ec>)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	220f      	movs	r2, #15
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a49      	ldr	r2, [pc, #292]	; (8001c00 <HAL_GPIO_Init+0x2f0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d019      	beq.n	8001b12 <HAL_GPIO_Init+0x202>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a48      	ldr	r2, [pc, #288]	; (8001c04 <HAL_GPIO_Init+0x2f4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d013      	beq.n	8001b0e <HAL_GPIO_Init+0x1fe>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a47      	ldr	r2, [pc, #284]	; (8001c08 <HAL_GPIO_Init+0x2f8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00d      	beq.n	8001b0a <HAL_GPIO_Init+0x1fa>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a46      	ldr	r2, [pc, #280]	; (8001c0c <HAL_GPIO_Init+0x2fc>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d007      	beq.n	8001b06 <HAL_GPIO_Init+0x1f6>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a45      	ldr	r2, [pc, #276]	; (8001c10 <HAL_GPIO_Init+0x300>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_GPIO_Init+0x1f2>
 8001afe:	2304      	movs	r3, #4
 8001b00:	e008      	b.n	8001b14 <HAL_GPIO_Init+0x204>
 8001b02:	2307      	movs	r3, #7
 8001b04:	e006      	b.n	8001b14 <HAL_GPIO_Init+0x204>
 8001b06:	2303      	movs	r3, #3
 8001b08:	e004      	b.n	8001b14 <HAL_GPIO_Init+0x204>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e002      	b.n	8001b14 <HAL_GPIO_Init+0x204>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_GPIO_Init+0x204>
 8001b12:	2300      	movs	r3, #0
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	f002 0203 	and.w	r2, r2, #3
 8001b1a:	0092      	lsls	r2, r2, #2
 8001b1c:	4093      	lsls	r3, r2
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b24:	4935      	ldr	r1, [pc, #212]	; (8001bfc <HAL_GPIO_Init+0x2ec>)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	089b      	lsrs	r3, r3, #2
 8001b2a:	3302      	adds	r3, #2
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b32:	4b38      	ldr	r3, [pc, #224]	; (8001c14 <HAL_GPIO_Init+0x304>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b56:	4a2f      	ldr	r2, [pc, #188]	; (8001c14 <HAL_GPIO_Init+0x304>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_GPIO_Init+0x304>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b80:	4a24      	ldr	r2, [pc, #144]	; (8001c14 <HAL_GPIO_Init+0x304>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b86:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <HAL_GPIO_Init+0x304>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001baa:	4a1a      	ldr	r2, [pc, #104]	; (8001c14 <HAL_GPIO_Init+0x304>)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb0:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_GPIO_Init+0x304>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bd4:	4a0f      	ldr	r2, [pc, #60]	; (8001c14 <HAL_GPIO_Init+0x304>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	61fb      	str	r3, [r7, #28]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	2b0f      	cmp	r3, #15
 8001be4:	f67f aea2 	bls.w	800192c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40013800 	.word	0x40013800
 8001c00:	40020000 	.word	0x40020000
 8001c04:	40020400 	.word	0x40020400
 8001c08:	40020800 	.word	0x40020800
 8001c0c:	40020c00 	.word	0x40020c00
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40013c00 	.word	0x40013c00

08001c18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1a:	b08f      	sub	sp, #60	; 0x3c
 8001c1c:	af0a      	add	r7, sp, #40	; 0x28
 8001c1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e10f      	b.n	8001e4a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d106      	bne.n	8001c4a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f005 febb 	bl	80079c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d102      	bne.n	8001c64 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f002 fd92 	bl	8004792 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	687e      	ldr	r6, [r7, #4]
 8001c76:	466d      	mov	r5, sp
 8001c78:	f106 0410 	add.w	r4, r6, #16
 8001c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c88:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c8c:	1d33      	adds	r3, r6, #4
 8001c8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c90:	6838      	ldr	r0, [r7, #0]
 8001c92:	f002 fc6a 	bl	800456a <USB_CoreInit>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0d0      	b.n	8001e4a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 fd80 	bl	80047b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	e04a      	b.n	8001d50 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	333d      	adds	r3, #61	; 0x3d
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	333c      	adds	r3, #60	; 0x3c
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	b298      	uxth	r0, r3
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	1a9b      	subs	r3, r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3342      	adds	r3, #66	; 0x42
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cfa:	7bfa      	ldrb	r2, [r7, #15]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	333f      	adds	r3, #63	; 0x3f
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3344      	adds	r3, #68	; 0x44
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	1a9b      	subs	r3, r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	3348      	adds	r3, #72	; 0x48
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	1a9b      	subs	r3, r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	3350      	adds	r3, #80	; 0x50
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d3af      	bcc.n	8001cba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
 8001d5e:	e044      	b.n	8001dea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	1a9b      	subs	r3, r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	3301      	adds	r3, #1
 8001de8:	73fb      	strb	r3, [r7, #15]
 8001dea:	7bfa      	ldrb	r2, [r7, #15]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d3b5      	bcc.n	8001d60 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	687e      	ldr	r6, [r7, #4]
 8001dfc:	466d      	mov	r5, sp
 8001dfe:	f106 0410 	add.w	r4, r6, #16
 8001e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e12:	1d33      	adds	r3, r6, #4
 8001e14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e16:	6838      	ldr	r0, [r7, #0]
 8001e18:	f002 fd18 	bl	800484c <USB_DevInit>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2202      	movs	r2, #2
 8001e26:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e00d      	b.n	8001e4a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 fd94 	bl	8005970 <USB_DevDisconnect>

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e52 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_PCD_Start+0x1c>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e020      	b.n	8001eb0 <HAL_PCD_Start+0x5e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d109      	bne.n	8001e92 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d005      	beq.n	8001e92 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f002 fc6a 	bl	8004770 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f003 fd44 	bl	800592e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b08d      	sub	sp, #52	; 0x34
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f003 fe02 	bl	8005ad8 <USB_GetMode>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f040 839d 	bne.w	8002616 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f003 fd66 	bl	80059b2 <USB_ReadInterrupts>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8393 	beq.w	8002614 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f003 fd5d 	bl	80059b2 <USB_ReadInterrupts>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d107      	bne.n	8001f12 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f002 0202 	and.w	r2, r2, #2
 8001f10:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 fd4b 	bl	80059b2 <USB_ReadInterrupts>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d161      	bne.n	8001fea <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	699a      	ldr	r2, [r3, #24]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0210 	bic.w	r2, r2, #16
 8001f34:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	f003 020f 	and.w	r2, r3, #15
 8001f42:	4613      	mov	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	3304      	adds	r3, #4
 8001f54:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	0c5b      	lsrs	r3, r3, #17
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d124      	bne.n	8001fac <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d035      	beq.n	8001fda <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	6a38      	ldr	r0, [r7, #32]
 8001f82:	f003 fb82 	bl	800568a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f92:	441a      	add	r2, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	699a      	ldr	r2, [r3, #24]
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fa4:	441a      	add	r2, r3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	619a      	str	r2, [r3, #24]
 8001faa:	e016      	b.n	8001fda <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	0c5b      	lsrs	r3, r3, #17
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	2b06      	cmp	r3, #6
 8001fb6:	d110      	bne.n	8001fda <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fbe:	2208      	movs	r2, #8
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	6a38      	ldr	r0, [r7, #32]
 8001fc4:	f003 fb61 	bl	800568a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	699a      	ldr	r2, [r3, #24]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fd4:	441a      	add	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699a      	ldr	r2, [r3, #24]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0210 	orr.w	r2, r2, #16
 8001fe8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 fcdf 	bl	80059b2 <USB_ReadInterrupts>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ffa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ffe:	d16e      	bne.n	80020de <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f003 fce5 	bl	80059d8 <USB_ReadDevAllOutEpInterrupt>
 800200e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002010:	e062      	b.n	80020d8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d057      	beq.n	80020cc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f003 fd0a 	bl	8005a40 <USB_ReadDevOutEPInterrupt>
 800202c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00c      	beq.n	8002052 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	4413      	add	r3, r2
 8002040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002044:	461a      	mov	r2, r3
 8002046:	2301      	movs	r3, #1
 8002048:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800204a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 fdb1 	bl	8002bb4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00c      	beq.n	8002076 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	4413      	add	r3, r2
 8002064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002068:	461a      	mov	r2, r3
 800206a:	2308      	movs	r3, #8
 800206c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800206e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 feab 	bl	8002dcc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	015a      	lsls	r2, r3, #5
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	4413      	add	r3, r2
 8002088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800208c:	461a      	mov	r2, r3
 800208e:	2310      	movs	r3, #16
 8002090:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	f003 0320 	and.w	r3, r3, #32
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a8:	461a      	mov	r2, r3
 80020aa:	2320      	movs	r3, #32
 80020ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d009      	beq.n	80020cc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c4:	461a      	mov	r2, r3
 80020c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ca:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	3301      	adds	r3, #1
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d4:	085b      	lsrs	r3, r3, #1
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d199      	bne.n	8002012 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f003 fc65 	bl	80059b2 <USB_ReadInterrupts>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020f2:	f040 80c0 	bne.w	8002276 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 fc86 	bl	8005a0c <USB_ReadDevAllInEpInterrupt>
 8002100:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002106:	e0b2      	b.n	800226e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 80a7 	beq.w	8002262 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f003 fcac 	bl	8005a7c <USB_ReadDevInEPInterrupt>
 8002124:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d057      	beq.n	80021e0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	2201      	movs	r2, #1
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	43db      	mvns	r3, r3
 800214a:	69f9      	ldr	r1, [r7, #28]
 800214c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002150:	4013      	ands	r3, r2
 8002152:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	4413      	add	r3, r2
 800215c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002160:	461a      	mov	r2, r3
 8002162:	2301      	movs	r3, #1
 8002164:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d132      	bne.n	80021d4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	3348      	adds	r3, #72	; 0x48
 800217e:	6819      	ldr	r1, [r3, #0]
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4403      	add	r3, r0
 800218e:	3344      	adds	r3, #68	; 0x44
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4419      	add	r1, r3
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4403      	add	r3, r0
 80021a2:	3348      	adds	r3, #72	; 0x48
 80021a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d113      	bne.n	80021d4 <HAL_PCD_IRQHandler+0x31c>
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	1a9b      	subs	r3, r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	3350      	adds	r3, #80	; 0x50
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d108      	bne.n	80021d4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021cc:	461a      	mov	r2, r3
 80021ce:	2101      	movs	r1, #1
 80021d0:	f003 fcb4 	bl	8005b3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	4619      	mov	r1, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f005 fc71 	bl	8007ac2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021f6:	461a      	mov	r2, r3
 80021f8:	2308      	movs	r3, #8
 80021fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	4413      	add	r3, r2
 800220e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002212:	461a      	mov	r2, r3
 8002214:	2310      	movs	r3, #16
 8002216:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	4413      	add	r3, r2
 800222a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800222e:	461a      	mov	r2, r3
 8002230:	2340      	movs	r3, #64	; 0x40
 8002232:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	4413      	add	r3, r2
 8002246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800224a:	461a      	mov	r2, r3
 800224c:	2302      	movs	r3, #2
 800224e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800225a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fc1b 	bl	8002a98 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	3301      	adds	r3, #1
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226a:	085b      	lsrs	r3, r3, #1
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002270:	2b00      	cmp	r3, #0
 8002272:	f47f af49 	bne.w	8002108 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f003 fb99 	bl	80059b2 <USB_ReadInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800228a:	d122      	bne.n	80022d2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800229a:	f023 0301 	bic.w	r3, r3, #1
 800229e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d108      	bne.n	80022bc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80022b2:	2100      	movs	r1, #0
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 fe27 	bl	8002f08 <HAL_PCDEx_LPM_Callback>
 80022ba:	e002      	b.n	80022c2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f005 fc6d 	bl	8007b9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80022d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 fb6b 	bl	80059b2 <USB_ReadInterrupts>
 80022dc:	4603      	mov	r3, r0
 80022de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022e6:	d112      	bne.n	800230e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d102      	bne.n	80022fe <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f005 fc29 	bl	8007b50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800230c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f003 fb4d 	bl	80059b2 <USB_ReadInterrupts>
 8002318:	4603      	mov	r3, r0
 800231a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800231e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002322:	f040 80c7 	bne.w	80024b4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002334:	f023 0301 	bic.w	r3, r3, #1
 8002338:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2110      	movs	r1, #16
 8002340:	4618      	mov	r0, r3
 8002342:	f002 fbe7 	bl	8004b14 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002346:	2300      	movs	r3, #0
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800234a:	e056      	b.n	80023fa <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800234c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	4413      	add	r3, r2
 8002354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002358:	461a      	mov	r2, r3
 800235a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800235e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	4413      	add	r3, r2
 8002368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002370:	0151      	lsls	r1, r2, #5
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	440a      	add	r2, r1
 8002376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800237a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800237e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	4413      	add	r3, r2
 8002388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002390:	0151      	lsls	r1, r2, #5
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	440a      	add	r2, r1
 8002396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800239a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800239e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ac:	461a      	mov	r2, r3
 80023ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023b2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023c4:	0151      	lsls	r1, r2, #5
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	440a      	add	r2, r1
 80023ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80023d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e4:	0151      	lsls	r1, r2, #5
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	440a      	add	r2, r1
 80023ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023f2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f6:	3301      	adds	r3, #1
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002400:	429a      	cmp	r2, r3
 8002402:	d3a3      	bcc.n	800234c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002412:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002416:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	2b00      	cmp	r3, #0
 800241e:	d016      	beq.n	800244e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002430:	f043 030b 	orr.w	r3, r3, #11
 8002434:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800243e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002446:	f043 030b 	orr.w	r3, r3, #11
 800244a:	6453      	str	r3, [r2, #68]	; 0x44
 800244c:	e015      	b.n	800247a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	69fa      	ldr	r2, [r7, #28]
 8002458:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800245c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002460:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002464:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002474:	f043 030b 	orr.w	r3, r3, #11
 8002478:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002488:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800248c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800249e:	461a      	mov	r2, r3
 80024a0:	f003 fb4c 	bl	8005b3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80024b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 fa7a 	bl	80059b2 <USB_ReadInterrupts>
 80024be:	4603      	mov	r3, r0
 80024c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c8:	d124      	bne.n	8002514 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 fb10 	bl	8005af4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f002 fb78 	bl	8004bce <USB_GetDevSpeed>
 80024de:	4603      	mov	r3, r0
 80024e0:	461a      	mov	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681c      	ldr	r4, [r3, #0]
 80024ea:	f001 f92d 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 80024ee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	4620      	mov	r0, r4
 80024fa:	f002 f897 	bl	800462c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f005 fb07 	bl	8007b12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695a      	ldr	r2, [r3, #20]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002512:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f003 fa4a 	bl	80059b2 <USB_ReadInterrupts>
 800251e:	4603      	mov	r3, r0
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b08      	cmp	r3, #8
 8002526:	d10a      	bne.n	800253e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f005 fae4 	bl	8007af6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f002 0208 	and.w	r2, r2, #8
 800253c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f003 fa35 	bl	80059b2 <USB_ReadInterrupts>
 8002548:	4603      	mov	r3, r0
 800254a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002552:	d10f      	bne.n	8002574 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	b2db      	uxtb	r3, r3
 800255c:	4619      	mov	r1, r3
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f005 fb3c 	bl	8007bdc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002572:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f003 fa1a 	bl	80059b2 <USB_ReadInterrupts>
 800257e:	4603      	mov	r3, r0
 8002580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002584:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002588:	d10f      	bne.n	80025aa <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	b2db      	uxtb	r3, r3
 8002592:	4619      	mov	r1, r3
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f005 fb0f 	bl	8007bb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80025a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 f9ff 	bl	80059b2 <USB_ReadInterrupts>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025be:	d10a      	bne.n	80025d6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f005 fb1d 	bl	8007c00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80025d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 f9e9 	bl	80059b2 <USB_ReadInterrupts>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d115      	bne.n	8002616 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f005 fb0d 	bl	8007c1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	430a      	orrs	r2, r1
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	e000      	b.n	8002616 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002614:	bf00      	nop
    }
  }
}
 8002616:	3734      	adds	r7, #52	; 0x34
 8002618:	46bd      	mov	sp, r7
 800261a:	bd90      	pop	{r4, r7, pc}

0800261c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_PCD_SetAddress+0x1a>
 8002632:	2302      	movs	r3, #2
 8002634:	e013      	b.n	800265e <HAL_PCD_SetAddress+0x42>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	78fa      	ldrb	r2, [r7, #3]
 8002642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f003 f947 	bl	80058e2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	4608      	mov	r0, r1
 8002670:	4611      	mov	r1, r2
 8002672:	461a      	mov	r2, r3
 8002674:	4603      	mov	r3, r0
 8002676:	70fb      	strb	r3, [r7, #3]
 8002678:	460b      	mov	r3, r1
 800267a:	803b      	strh	r3, [r7, #0]
 800267c:	4613      	mov	r3, r2
 800267e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002688:	2b00      	cmp	r3, #0
 800268a:	da0f      	bge.n	80026ac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	f003 020f 	and.w	r2, r3, #15
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	1a9b      	subs	r3, r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	3338      	adds	r3, #56	; 0x38
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	4413      	add	r3, r2
 80026a0:	3304      	adds	r3, #4
 80026a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2201      	movs	r2, #1
 80026a8:	705a      	strb	r2, [r3, #1]
 80026aa:	e00f      	b.n	80026cc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	f003 020f 	and.w	r2, r3, #15
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	3304      	adds	r3, #4
 80026c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026d8:	883a      	ldrh	r2, [r7, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	78ba      	ldrb	r2, [r7, #2]
 80026e2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	785b      	ldrb	r3, [r3, #1]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026f6:	78bb      	ldrb	r3, [r7, #2]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d102      	bne.n	8002702 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_PCD_EP_Open+0xaa>
 800270c:	2302      	movs	r3, #2
 800270e:	e00e      	b.n	800272e <HAL_PCD_EP_Open+0xc8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68f9      	ldr	r1, [r7, #12]
 800271e:	4618      	mov	r0, r3
 8002720:	f002 fa7a 	bl	8004c18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800272c:	7afb      	ldrb	r3, [r7, #11]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002742:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002746:	2b00      	cmp	r3, #0
 8002748:	da0f      	bge.n	800276a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	f003 020f 	and.w	r2, r3, #15
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	3338      	adds	r3, #56	; 0x38
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	3304      	adds	r3, #4
 8002760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	705a      	strb	r2, [r3, #1]
 8002768:	e00f      	b.n	800278a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	f003 020f 	and.w	r2, r3, #15
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4413      	add	r3, r2
 8002780:	3304      	adds	r3, #4
 8002782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	b2da      	uxtb	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_PCD_EP_Close+0x6e>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e00e      	b.n	80027c2 <HAL_PCD_EP_Close+0x8c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68f9      	ldr	r1, [r7, #12]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f002 fab8 	bl	8004d28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b086      	sub	sp, #24
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	460b      	mov	r3, r1
 80027d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027da:	7afb      	ldrb	r3, [r7, #11]
 80027dc:	f003 020f 	and.w	r2, r3, #15
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	3304      	adds	r3, #4
 80027f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2200      	movs	r2, #0
 8002804:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2200      	movs	r2, #0
 800280a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800280c:	7afb      	ldrb	r3, [r7, #11]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	b2da      	uxtb	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d102      	bne.n	8002826 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002826:	7afb      	ldrb	r3, [r7, #11]
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	2b00      	cmp	r3, #0
 800282e:	d109      	bne.n	8002844 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	6979      	ldr	r1, [r7, #20]
 800283e:	f002 fd93 	bl	8005368 <USB_EP0StartXfer>
 8002842:	e008      	b.n	8002856 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	6979      	ldr	r1, [r7, #20]
 8002852:	f002 fb45 	bl	8004ee0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	f003 020f 	and.w	r2, r3, #15
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	460b      	mov	r3, r1
 800289e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028a0:	7afb      	ldrb	r3, [r7, #11]
 80028a2:	f003 020f 	and.w	r2, r3, #15
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	3338      	adds	r3, #56	; 0x38
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	3304      	adds	r3, #4
 80028b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2200      	movs	r2, #0
 80028c8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2201      	movs	r2, #1
 80028ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028d0:	7afb      	ldrb	r3, [r7, #11]
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d102      	bne.n	80028ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028ea:	7afb      	ldrb	r3, [r7, #11]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d109      	bne.n	8002908 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	461a      	mov	r2, r3
 8002900:	6979      	ldr	r1, [r7, #20]
 8002902:	f002 fd31 	bl	8005368 <USB_EP0StartXfer>
 8002906:	e008      	b.n	800291a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	6979      	ldr	r1, [r7, #20]
 8002916:	f002 fae3 	bl	8004ee0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	f003 020f 	and.w	r2, r3, #15
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	429a      	cmp	r2, r3
 800293c:	d901      	bls.n	8002942 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e050      	b.n	80029e4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002942:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002946:	2b00      	cmp	r3, #0
 8002948:	da0f      	bge.n	800296a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	f003 020f 	and.w	r2, r3, #15
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	3338      	adds	r3, #56	; 0x38
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	3304      	adds	r3, #4
 8002960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	705a      	strb	r2, [r3, #1]
 8002968:	e00d      	b.n	8002986 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	3304      	adds	r3, #4
 800297e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	b2da      	uxtb	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_PCD_EP_SetStall+0x82>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e01e      	b.n	80029e4 <HAL_PCD_EP_SetStall+0xc0>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68f9      	ldr	r1, [r7, #12]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f002 fec0 	bl	800573a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	b2d9      	uxtb	r1, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029d4:	461a      	mov	r2, r3
 80029d6:	f003 f8b1 	bl	8005b3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	f003 020f 	and.w	r2, r3, #15
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d901      	bls.n	8002a0a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e042      	b.n	8002a90 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	da0f      	bge.n	8002a32 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	f003 020f 	and.w	r2, r3, #15
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	3338      	adds	r3, #56	; 0x38
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	3304      	adds	r3, #4
 8002a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	705a      	strb	r2, [r3, #1]
 8002a30:	e00f      	b.n	8002a52 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	f003 020f 	and.w	r2, r3, #15
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	3304      	adds	r3, #4
 8002a4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_PCD_EP_ClrStall+0x86>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e00e      	b.n	8002a90 <HAL_PCD_EP_ClrStall+0xa4>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68f9      	ldr	r1, [r7, #12]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f002 fec8 	bl	8005816 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	3338      	adds	r3, #56	; 0x38
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	4413      	add	r3, r2
 8002abc:	3304      	adds	r3, #4
 8002abe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	699a      	ldr	r2, [r3, #24]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d901      	bls.n	8002ad0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e06c      	b.n	8002baa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	695a      	ldr	r2, [r3, #20]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	69fa      	ldr	r2, [r7, #28]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d902      	bls.n	8002aec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	3303      	adds	r3, #3
 8002af0:	089b      	lsrs	r3, r3, #2
 8002af2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002af4:	e02b      	b.n	8002b4e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d902      	bls.n	8002b12 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3303      	adds	r3, #3
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	68d9      	ldr	r1, [r3, #12]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	4603      	mov	r3, r0
 8002b30:	6978      	ldr	r0, [r7, #20]
 8002b32:	f002 fd6c 	bl	800560e <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	441a      	add	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	441a      	add	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d809      	bhi.n	8002b78 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	699a      	ldr	r2, [r3, #24]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d203      	bcs.n	8002b78 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1be      	bne.n	8002af6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d811      	bhi.n	8002ba8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	6939      	ldr	r1, [r7, #16]
 8002ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	333c      	adds	r3, #60	; 0x3c
 8002bcc:	3304      	adds	r3, #4
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	f040 80a0 	bne.w	8002d2c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d015      	beq.n	8002c22 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4a72      	ldr	r2, [pc, #456]	; (8002dc4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	f240 80dd 	bls.w	8002dba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 80d7 	beq.w	8002dba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c1e:	6093      	str	r3, [r2, #8]
 8002c20:	e0cb      	b.n	8002dba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d009      	beq.n	8002c40 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2320      	movs	r3, #32
 8002c3c:	6093      	str	r3, [r2, #8]
 8002c3e:	e0bc      	b.n	8002dba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f040 80b7 	bne.w	8002dba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a5d      	ldr	r2, [pc, #372]	; (8002dc4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d90f      	bls.n	8002c74 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c70:	6093      	str	r3, [r2, #8]
 8002c72:	e0a2      	b.n	8002dba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c86:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	0159      	lsls	r1, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	440b      	add	r3, r1
 8002c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002c9a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4403      	add	r3, r0
 8002caa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002cae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cc2:	6819      	ldr	r1, [r3, #0]
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4403      	add	r3, r0
 8002cd2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4419      	add	r1, r3
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4403      	add	r3, r0
 8002ce8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d114      	bne.n	8002d1e <PCD_EP_OutXfrComplete_int+0x16a>
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	1a9b      	subs	r3, r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d108      	bne.n	8002d1e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d16:	461a      	mov	r2, r3
 8002d18:	2101      	movs	r1, #1
 8002d1a:	f002 ff0f 	bl	8005b3c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	4619      	mov	r1, r3
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f004 feb1 	bl	8007a8c <HAL_PCD_DataOutStageCallback>
 8002d2a:	e046      	b.n	8002dba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d124      	bne.n	8002d7e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d50:	6093      	str	r3, [r2, #8]
 8002d52:	e032      	b.n	8002dba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2320      	movs	r3, #32
 8002d6e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	4619      	mov	r1, r3
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f004 fe88 	bl	8007a8c <HAL_PCD_DataOutStageCallback>
 8002d7c:	e01d      	b.n	8002dba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d114      	bne.n	8002dae <PCD_EP_OutXfrComplete_int+0x1fa>
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d108      	bne.n	8002dae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002da6:	461a      	mov	r2, r3
 8002da8:	2100      	movs	r1, #0
 8002daa:	f002 fec7 	bl	8005b3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	4619      	mov	r1, r3
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f004 fe69 	bl	8007a8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	4f54300a 	.word	0x4f54300a
 8002dc8:	4f54310a 	.word	0x4f54310a

08002dcc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	333c      	adds	r3, #60	; 0x3c
 8002de4:	3304      	adds	r3, #4
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4a15      	ldr	r2, [pc, #84]	; (8002e54 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d90e      	bls.n	8002e20 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d009      	beq.n	8002e20 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e1e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f004 fe21 	bl	8007a68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d90c      	bls.n	8002e48 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d108      	bne.n	8002e48 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e40:	461a      	mov	r2, r3
 8002e42:	2101      	movs	r1, #1
 8002e44:	f002 fe7a 	bl	8005b3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	4f54300a 	.word	0x4f54300a

08002e58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	70fb      	strb	r3, [r7, #3]
 8002e64:	4613      	mov	r3, r2
 8002e66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d107      	bne.n	8002e86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e76:	883b      	ldrh	r3, [r7, #0]
 8002e78:	0419      	lsls	r1, r3, #16
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28
 8002e84:	e028      	b.n	8002ed8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	0c1b      	lsrs	r3, r3, #16
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	4413      	add	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e94:	2300      	movs	r3, #0
 8002e96:	73fb      	strb	r3, [r7, #15]
 8002e98:	e00d      	b.n	8002eb6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	3340      	adds	r3, #64	; 0x40
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	0c1b      	lsrs	r3, r3, #16
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	4413      	add	r3, r2
 8002eae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
 8002eb6:	7bfa      	ldrb	r2, [r7, #15]
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d3ec      	bcc.n	8002e9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ec0:	883b      	ldrh	r3, [r7, #0]
 8002ec2:	0418      	lsls	r0, r3, #16
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6819      	ldr	r1, [r3, #0]
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	4302      	orrs	r2, r0
 8002ed0:	3340      	adds	r3, #64	; 0x40
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	887a      	ldrh	r2, [r7, #2]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e264      	b.n	80033fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d075      	beq.n	800302a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f3e:	4ba3      	ldr	r3, [pc, #652]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d00c      	beq.n	8002f64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f4a:	4ba0      	ldr	r3, [pc, #640]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d112      	bne.n	8002f7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f56:	4b9d      	ldr	r3, [pc, #628]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f62:	d10b      	bne.n	8002f7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f64:	4b99      	ldr	r3, [pc, #612]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d05b      	beq.n	8003028 <HAL_RCC_OscConfig+0x108>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d157      	bne.n	8003028 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e23f      	b.n	80033fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f84:	d106      	bne.n	8002f94 <HAL_RCC_OscConfig+0x74>
 8002f86:	4b91      	ldr	r3, [pc, #580]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a90      	ldr	r2, [pc, #576]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e01d      	b.n	8002fd0 <HAL_RCC_OscConfig+0xb0>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x98>
 8002f9e:	4b8b      	ldr	r3, [pc, #556]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a8a      	ldr	r2, [pc, #552]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b88      	ldr	r3, [pc, #544]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a87      	ldr	r2, [pc, #540]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCC_OscConfig+0xb0>
 8002fb8:	4b84      	ldr	r3, [pc, #528]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a83      	ldr	r2, [pc, #524]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	4b81      	ldr	r3, [pc, #516]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a80      	ldr	r2, [pc, #512]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7fe fb58 	bl	800168c <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fe fb54 	bl	800168c <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e204      	b.n	80033fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	4b76      	ldr	r3, [pc, #472]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xc0>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fe fb44 	bl	800168c <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003008:	f7fe fb40 	bl	800168c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e1f0      	b.n	80033fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301a:	4b6c      	ldr	r3, [pc, #432]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0xe8>
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d063      	beq.n	80030fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003036:	4b65      	ldr	r3, [pc, #404]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00b      	beq.n	800305a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003042:	4b62      	ldr	r3, [pc, #392]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800304a:	2b08      	cmp	r3, #8
 800304c:	d11c      	bne.n	8003088 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800304e:	4b5f      	ldr	r3, [pc, #380]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d116      	bne.n	8003088 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305a:	4b5c      	ldr	r3, [pc, #368]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_RCC_OscConfig+0x152>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d001      	beq.n	8003072 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e1c4      	b.n	80033fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003072:	4b56      	ldr	r3, [pc, #344]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4952      	ldr	r1, [pc, #328]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003086:	e03a      	b.n	80030fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d020      	beq.n	80030d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003090:	4b4f      	ldr	r3, [pc, #316]	; (80031d0 <HAL_RCC_OscConfig+0x2b0>)
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003096:	f7fe faf9 	bl	800168c <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800309e:	f7fe faf5 	bl	800168c <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e1a5      	b.n	80033fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b0:	4b46      	ldr	r3, [pc, #280]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030bc:	4b43      	ldr	r3, [pc, #268]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4940      	ldr	r1, [pc, #256]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]
 80030d0:	e015      	b.n	80030fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d2:	4b3f      	ldr	r3, [pc, #252]	; (80031d0 <HAL_RCC_OscConfig+0x2b0>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d8:	f7fe fad8 	bl	800168c <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e0:	f7fe fad4 	bl	800168c <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e184      	b.n	80033fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f2:	4b36      	ldr	r3, [pc, #216]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d030      	beq.n	800316c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d016      	beq.n	8003140 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003112:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <HAL_RCC_OscConfig+0x2b4>)
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003118:	f7fe fab8 	bl	800168c <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003120:	f7fe fab4 	bl	800168c <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e164      	b.n	80033fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003132:	4b26      	ldr	r3, [pc, #152]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0x200>
 800313e:	e015      	b.n	800316c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003140:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <HAL_RCC_OscConfig+0x2b4>)
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003146:	f7fe faa1 	bl	800168c <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800314e:	f7fe fa9d 	bl	800168c <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e14d      	b.n	80033fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003160:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1f0      	bne.n	800314e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80a0 	beq.w	80032ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317a:	2300      	movs	r3, #0
 800317c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317e:	4b13      	ldr	r3, [pc, #76]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10f      	bne.n	80031aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	4a0e      	ldr	r2, [pc, #56]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003198:	6413      	str	r3, [r2, #64]	; 0x40
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <HAL_RCC_OscConfig+0x2ac>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a6:	2301      	movs	r3, #1
 80031a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_RCC_OscConfig+0x2b8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d121      	bne.n	80031fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b6:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <HAL_RCC_OscConfig+0x2b8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a07      	ldr	r2, [pc, #28]	; (80031d8 <HAL_RCC_OscConfig+0x2b8>)
 80031bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c2:	f7fe fa63 	bl	800168c <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c8:	e011      	b.n	80031ee <HAL_RCC_OscConfig+0x2ce>
 80031ca:	bf00      	nop
 80031cc:	40023800 	.word	0x40023800
 80031d0:	42470000 	.word	0x42470000
 80031d4:	42470e80 	.word	0x42470e80
 80031d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031dc:	f7fe fa56 	bl	800168c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e106      	b.n	80033fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ee:	4b85      	ldr	r3, [pc, #532]	; (8003404 <HAL_RCC_OscConfig+0x4e4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d106      	bne.n	8003210 <HAL_RCC_OscConfig+0x2f0>
 8003202:	4b81      	ldr	r3, [pc, #516]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	4a80      	ldr	r2, [pc, #512]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6713      	str	r3, [r2, #112]	; 0x70
 800320e:	e01c      	b.n	800324a <HAL_RCC_OscConfig+0x32a>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b05      	cmp	r3, #5
 8003216:	d10c      	bne.n	8003232 <HAL_RCC_OscConfig+0x312>
 8003218:	4b7b      	ldr	r3, [pc, #492]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	4a7a      	ldr	r2, [pc, #488]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 800321e:	f043 0304 	orr.w	r3, r3, #4
 8003222:	6713      	str	r3, [r2, #112]	; 0x70
 8003224:	4b78      	ldr	r3, [pc, #480]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 8003226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003228:	4a77      	ldr	r2, [pc, #476]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	6713      	str	r3, [r2, #112]	; 0x70
 8003230:	e00b      	b.n	800324a <HAL_RCC_OscConfig+0x32a>
 8003232:	4b75      	ldr	r3, [pc, #468]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	4a74      	ldr	r2, [pc, #464]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 8003238:	f023 0301 	bic.w	r3, r3, #1
 800323c:	6713      	str	r3, [r2, #112]	; 0x70
 800323e:	4b72      	ldr	r3, [pc, #456]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003242:	4a71      	ldr	r2, [pc, #452]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 8003244:	f023 0304 	bic.w	r3, r3, #4
 8003248:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d015      	beq.n	800327e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fe fa1b 	bl	800168c <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003258:	e00a      	b.n	8003270 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800325a:	f7fe fa17 	bl	800168c <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f241 3288 	movw	r2, #5000	; 0x1388
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e0c5      	b.n	80033fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003270:	4b65      	ldr	r3, [pc, #404]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 8003272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0ee      	beq.n	800325a <HAL_RCC_OscConfig+0x33a>
 800327c:	e014      	b.n	80032a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327e:	f7fe fa05 	bl	800168c <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003284:	e00a      	b.n	800329c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003286:	f7fe fa01 	bl	800168c <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f241 3288 	movw	r2, #5000	; 0x1388
 8003294:	4293      	cmp	r3, r2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e0af      	b.n	80033fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329c:	4b5a      	ldr	r3, [pc, #360]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1ee      	bne.n	8003286 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032a8:	7dfb      	ldrb	r3, [r7, #23]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d105      	bne.n	80032ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ae:	4b56      	ldr	r3, [pc, #344]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	4a55      	ldr	r2, [pc, #340]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 80032b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 809b 	beq.w	80033fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032c4:	4b50      	ldr	r3, [pc, #320]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 030c 	and.w	r3, r3, #12
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d05c      	beq.n	800338a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d141      	bne.n	800335c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d8:	4b4c      	ldr	r3, [pc, #304]	; (800340c <HAL_RCC_OscConfig+0x4ec>)
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032de:	f7fe f9d5 	bl	800168c <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e6:	f7fe f9d1 	bl	800168c <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e081      	b.n	80033fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f8:	4b43      	ldr	r3, [pc, #268]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f0      	bne.n	80032e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69da      	ldr	r2, [r3, #28]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	019b      	lsls	r3, r3, #6
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	3b01      	subs	r3, #1
 800331e:	041b      	lsls	r3, r3, #16
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003326:	061b      	lsls	r3, r3, #24
 8003328:	4937      	ldr	r1, [pc, #220]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 800332a:	4313      	orrs	r3, r2
 800332c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800332e:	4b37      	ldr	r3, [pc, #220]	; (800340c <HAL_RCC_OscConfig+0x4ec>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003334:	f7fe f9aa 	bl	800168c <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333c:	f7fe f9a6 	bl	800168c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e056      	b.n	80033fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334e:	4b2e      	ldr	r3, [pc, #184]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x41c>
 800335a:	e04e      	b.n	80033fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335c:	4b2b      	ldr	r3, [pc, #172]	; (800340c <HAL_RCC_OscConfig+0x4ec>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fe f993 	bl	800168c <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336a:	f7fe f98f 	bl	800168c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e03f      	b.n	80033fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337c:	4b22      	ldr	r3, [pc, #136]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f0      	bne.n	800336a <HAL_RCC_OscConfig+0x44a>
 8003388:	e037      	b.n	80033fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e032      	b.n	80033fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003396:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <HAL_RCC_OscConfig+0x4e8>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d028      	beq.n	80033f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d121      	bne.n	80033f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d11a      	bne.n	80033f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033c6:	4013      	ands	r3, r2
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d111      	bne.n	80033f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	085b      	lsrs	r3, r3, #1
 80033de:	3b01      	subs	r3, #1
 80033e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40007000 	.word	0x40007000
 8003408:	40023800 	.word	0x40023800
 800340c:	42470060 	.word	0x42470060

08003410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0cc      	b.n	80035be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003424:	4b68      	ldr	r3, [pc, #416]	; (80035c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d90c      	bls.n	800344c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003432:	4b65      	ldr	r3, [pc, #404]	; (80035c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b63      	ldr	r3, [pc, #396]	; (80035c8 <HAL_RCC_ClockConfig+0x1b8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0b8      	b.n	80035be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d020      	beq.n	800349a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003464:	4b59      	ldr	r3, [pc, #356]	; (80035cc <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4a58      	ldr	r2, [pc, #352]	; (80035cc <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800346e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800347c:	4b53      	ldr	r3, [pc, #332]	; (80035cc <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4a52      	ldr	r2, [pc, #328]	; (80035cc <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003486:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003488:	4b50      	ldr	r3, [pc, #320]	; (80035cc <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	494d      	ldr	r1, [pc, #308]	; (80035cc <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d044      	beq.n	8003530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d107      	bne.n	80034be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	4b47      	ldr	r3, [pc, #284]	; (80035cc <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d119      	bne.n	80034ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e07f      	b.n	80035be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d003      	beq.n	80034ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ca:	2b03      	cmp	r3, #3
 80034cc:	d107      	bne.n	80034de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ce:	4b3f      	ldr	r3, [pc, #252]	; (80035cc <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e06f      	b.n	80035be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034de:	4b3b      	ldr	r3, [pc, #236]	; (80035cc <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e067      	b.n	80035be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ee:	4b37      	ldr	r3, [pc, #220]	; (80035cc <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f023 0203 	bic.w	r2, r3, #3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	4934      	ldr	r1, [pc, #208]	; (80035cc <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003500:	f7fe f8c4 	bl	800168c <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003506:	e00a      	b.n	800351e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003508:	f7fe f8c0 	bl	800168c <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	; 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e04f      	b.n	80035be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351e:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 020c 	and.w	r2, r3, #12
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	429a      	cmp	r2, r3
 800352e:	d1eb      	bne.n	8003508 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003530:	4b25      	ldr	r3, [pc, #148]	; (80035c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d20c      	bcs.n	8003558 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353e:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003546:	4b20      	ldr	r3, [pc, #128]	; (80035c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d001      	beq.n	8003558 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e032      	b.n	80035be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003564:	4b19      	ldr	r3, [pc, #100]	; (80035cc <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4916      	ldr	r1, [pc, #88]	; (80035cc <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003582:	4b12      	ldr	r3, [pc, #72]	; (80035cc <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	490e      	ldr	r1, [pc, #56]	; (80035cc <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003596:	f000 f821 	bl	80035dc <HAL_RCC_GetSysClockFreq>
 800359a:	4602      	mov	r2, r0
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	490a      	ldr	r1, [pc, #40]	; (80035d0 <HAL_RCC_ClockConfig+0x1c0>)
 80035a8:	5ccb      	ldrb	r3, [r1, r3]
 80035aa:	fa22 f303 	lsr.w	r3, r2, r3
 80035ae:	4a09      	ldr	r2, [pc, #36]	; (80035d4 <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <HAL_RCC_ClockConfig+0x1c8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe f824 	bl	8001604 <HAL_InitTick>

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40023c00 	.word	0x40023c00
 80035cc:	40023800 	.word	0x40023800
 80035d0:	08008af4 	.word	0x08008af4
 80035d4:	20000000 	.word	0x20000000
 80035d8:	20000004 	.word	0x20000004

080035dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035dc:	b5b0      	push	{r4, r5, r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035e2:	2100      	movs	r1, #0
 80035e4:	6079      	str	r1, [r7, #4]
 80035e6:	2100      	movs	r1, #0
 80035e8:	60f9      	str	r1, [r7, #12]
 80035ea:	2100      	movs	r1, #0
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035ee:	2100      	movs	r1, #0
 80035f0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035f2:	4952      	ldr	r1, [pc, #328]	; (800373c <HAL_RCC_GetSysClockFreq+0x160>)
 80035f4:	6889      	ldr	r1, [r1, #8]
 80035f6:	f001 010c 	and.w	r1, r1, #12
 80035fa:	2908      	cmp	r1, #8
 80035fc:	d00d      	beq.n	800361a <HAL_RCC_GetSysClockFreq+0x3e>
 80035fe:	2908      	cmp	r1, #8
 8003600:	f200 8094 	bhi.w	800372c <HAL_RCC_GetSysClockFreq+0x150>
 8003604:	2900      	cmp	r1, #0
 8003606:	d002      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0x32>
 8003608:	2904      	cmp	r1, #4
 800360a:	d003      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x38>
 800360c:	e08e      	b.n	800372c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800360e:	4b4c      	ldr	r3, [pc, #304]	; (8003740 <HAL_RCC_GetSysClockFreq+0x164>)
 8003610:	60bb      	str	r3, [r7, #8]
       break;
 8003612:	e08e      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003614:	4b4b      	ldr	r3, [pc, #300]	; (8003744 <HAL_RCC_GetSysClockFreq+0x168>)
 8003616:	60bb      	str	r3, [r7, #8]
      break;
 8003618:	e08b      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800361a:	4948      	ldr	r1, [pc, #288]	; (800373c <HAL_RCC_GetSysClockFreq+0x160>)
 800361c:	6849      	ldr	r1, [r1, #4]
 800361e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003622:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003624:	4945      	ldr	r1, [pc, #276]	; (800373c <HAL_RCC_GetSysClockFreq+0x160>)
 8003626:	6849      	ldr	r1, [r1, #4]
 8003628:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800362c:	2900      	cmp	r1, #0
 800362e:	d024      	beq.n	800367a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003630:	4942      	ldr	r1, [pc, #264]	; (800373c <HAL_RCC_GetSysClockFreq+0x160>)
 8003632:	6849      	ldr	r1, [r1, #4]
 8003634:	0989      	lsrs	r1, r1, #6
 8003636:	4608      	mov	r0, r1
 8003638:	f04f 0100 	mov.w	r1, #0
 800363c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003640:	f04f 0500 	mov.w	r5, #0
 8003644:	ea00 0204 	and.w	r2, r0, r4
 8003648:	ea01 0305 	and.w	r3, r1, r5
 800364c:	493d      	ldr	r1, [pc, #244]	; (8003744 <HAL_RCC_GetSysClockFreq+0x168>)
 800364e:	fb01 f003 	mul.w	r0, r1, r3
 8003652:	2100      	movs	r1, #0
 8003654:	fb01 f102 	mul.w	r1, r1, r2
 8003658:	1844      	adds	r4, r0, r1
 800365a:	493a      	ldr	r1, [pc, #232]	; (8003744 <HAL_RCC_GetSysClockFreq+0x168>)
 800365c:	fba2 0101 	umull	r0, r1, r2, r1
 8003660:	1863      	adds	r3, r4, r1
 8003662:	4619      	mov	r1, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	461a      	mov	r2, r3
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	f7fc ff1e 	bl	80004ac <__aeabi_uldivmod>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4613      	mov	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	e04a      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800367a:	4b30      	ldr	r3, [pc, #192]	; (800373c <HAL_RCC_GetSysClockFreq+0x160>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	099b      	lsrs	r3, r3, #6
 8003680:	461a      	mov	r2, r3
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	f240 10ff 	movw	r0, #511	; 0x1ff
 800368a:	f04f 0100 	mov.w	r1, #0
 800368e:	ea02 0400 	and.w	r4, r2, r0
 8003692:	ea03 0501 	and.w	r5, r3, r1
 8003696:	4620      	mov	r0, r4
 8003698:	4629      	mov	r1, r5
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	014b      	lsls	r3, r1, #5
 80036a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036a8:	0142      	lsls	r2, r0, #5
 80036aa:	4610      	mov	r0, r2
 80036ac:	4619      	mov	r1, r3
 80036ae:	1b00      	subs	r0, r0, r4
 80036b0:	eb61 0105 	sbc.w	r1, r1, r5
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	018b      	lsls	r3, r1, #6
 80036be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036c2:	0182      	lsls	r2, r0, #6
 80036c4:	1a12      	subs	r2, r2, r0
 80036c6:	eb63 0301 	sbc.w	r3, r3, r1
 80036ca:	f04f 0000 	mov.w	r0, #0
 80036ce:	f04f 0100 	mov.w	r1, #0
 80036d2:	00d9      	lsls	r1, r3, #3
 80036d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036d8:	00d0      	lsls	r0, r2, #3
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	1912      	adds	r2, r2, r4
 80036e0:	eb45 0303 	adc.w	r3, r5, r3
 80036e4:	f04f 0000 	mov.w	r0, #0
 80036e8:	f04f 0100 	mov.w	r1, #0
 80036ec:	0299      	lsls	r1, r3, #10
 80036ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036f2:	0290      	lsls	r0, r2, #10
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4610      	mov	r0, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	461a      	mov	r2, r3
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	f7fc fed2 	bl	80004ac <__aeabi_uldivmod>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4613      	mov	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <HAL_RCC_GetSysClockFreq+0x160>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	0c1b      	lsrs	r3, r3, #16
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	3301      	adds	r3, #1
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	60bb      	str	r3, [r7, #8]
      break;
 800372a:	e002      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800372c:	4b04      	ldr	r3, [pc, #16]	; (8003740 <HAL_RCC_GetSysClockFreq+0x164>)
 800372e:	60bb      	str	r3, [r7, #8]
      break;
 8003730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003732:	68bb      	ldr	r3, [r7, #8]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bdb0      	pop	{r4, r5, r7, pc}
 800373c:	40023800 	.word	0x40023800
 8003740:	00f42400 	.word	0x00f42400
 8003744:	017d7840 	.word	0x017d7840

08003748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800374c:	4b03      	ldr	r3, [pc, #12]	; (800375c <HAL_RCC_GetHCLKFreq+0x14>)
 800374e:	681b      	ldr	r3, [r3, #0]
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000000 	.word	0x20000000

08003760 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e041      	b.n	80037f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fd fe36 	bl	80013f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3304      	adds	r3, #4
 800379c:	4619      	mov	r1, r3
 800379e:	4610      	mov	r0, r2
 80037a0:	f000 fb5e 	bl	8003e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b086      	sub	sp, #24
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e097      	b.n	8003942 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fd fd42 	bl	80012b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003842:	f023 0307 	bic.w	r3, r3, #7
 8003846:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3304      	adds	r3, #4
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f000 fb04 	bl	8003e60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	4313      	orrs	r3, r2
 8003878:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003880:	f023 0303 	bic.w	r3, r3, #3
 8003884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	4313      	orrs	r3, r2
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800389e:	f023 030c 	bic.w	r3, r3, #12
 80038a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	4313      	orrs	r3, r2
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	011a      	lsls	r2, r3, #4
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	031b      	lsls	r3, r3, #12
 80038ce:	4313      	orrs	r3, r2
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80038dc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80038e4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	4313      	orrs	r3, r2
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800395a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003962:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800396a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003972:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d110      	bne.n	800399c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d102      	bne.n	8003986 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003980:	7b7b      	ldrb	r3, [r7, #13]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d001      	beq.n	800398a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e069      	b.n	8003a5e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2202      	movs	r2, #2
 800398e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2202      	movs	r2, #2
 8003996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800399a:	e031      	b.n	8003a00 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d110      	bne.n	80039c4 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039a2:	7bbb      	ldrb	r3, [r7, #14]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d102      	bne.n	80039ae <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039a8:	7b3b      	ldrb	r3, [r7, #12]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d001      	beq.n	80039b2 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e055      	b.n	8003a5e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039c2:	e01d      	b.n	8003a00 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d108      	bne.n	80039dc <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039ca:	7bbb      	ldrb	r3, [r7, #14]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d105      	bne.n	80039dc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039d0:	7b7b      	ldrb	r3, [r7, #13]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d102      	bne.n	80039dc <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039d6:	7b3b      	ldrb	r3, [r7, #12]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d001      	beq.n	80039e0 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e03e      	b.n	8003a5e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_TIM_Encoder_Start+0xc4>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d008      	beq.n	8003a1e <HAL_TIM_Encoder_Start+0xd4>
 8003a0c:	e00f      	b.n	8003a2e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2201      	movs	r2, #1
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fc2e 	bl	8004278 <TIM_CCxChannelCmd>
      break;
 8003a1c:	e016      	b.n	8003a4c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2201      	movs	r2, #1
 8003a24:	2104      	movs	r1, #4
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fc26 	bl	8004278 <TIM_CCxChannelCmd>
      break;
 8003a2c:	e00e      	b.n	8003a4c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2201      	movs	r2, #1
 8003a34:	2100      	movs	r1, #0
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fc1e 	bl	8004278 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2201      	movs	r2, #1
 8003a42:	2104      	movs	r1, #4
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fc17 	bl	8004278 <TIM_CCxChannelCmd>
      break;
 8003a4a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d122      	bne.n	8003ac2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d11b      	bne.n	8003ac2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f06f 0202 	mvn.w	r2, #2
 8003a92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f9bb 	bl	8003e24 <HAL_TIM_IC_CaptureCallback>
 8003aae:	e005      	b.n	8003abc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f9ad 	bl	8003e10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f9be 	bl	8003e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d122      	bne.n	8003b16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d11b      	bne.n	8003b16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f06f 0204 	mvn.w	r2, #4
 8003ae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f991 	bl	8003e24 <HAL_TIM_IC_CaptureCallback>
 8003b02:	e005      	b.n	8003b10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f983 	bl	8003e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f994 	bl	8003e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d122      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d11b      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f06f 0208 	mvn.w	r2, #8
 8003b3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f967 	bl	8003e24 <HAL_TIM_IC_CaptureCallback>
 8003b56:	e005      	b.n	8003b64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f959 	bl	8003e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f96a 	bl	8003e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b10      	cmp	r3, #16
 8003b76:	d122      	bne.n	8003bbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b10      	cmp	r3, #16
 8003b84:	d11b      	bne.n	8003bbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0210 	mvn.w	r2, #16
 8003b8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2208      	movs	r2, #8
 8003b94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f93d 	bl	8003e24 <HAL_TIM_IC_CaptureCallback>
 8003baa:	e005      	b.n	8003bb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f92f 	bl	8003e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f940 	bl	8003e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d10e      	bne.n	8003bea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d107      	bne.n	8003bea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f06f 0201 	mvn.w	r2, #1
 8003be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f909 	bl	8003dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf4:	2b80      	cmp	r3, #128	; 0x80
 8003bf6:	d10e      	bne.n	8003c16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c02:	2b80      	cmp	r3, #128	; 0x80
 8003c04:	d107      	bne.n	8003c16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fc7b 	bl	800450c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d10e      	bne.n	8003c42 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2e:	2b40      	cmp	r3, #64	; 0x40
 8003c30:	d107      	bne.n	8003c42 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f905 	bl	8003e4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	d10e      	bne.n	8003c6e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d107      	bne.n	8003c6e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f06f 0220 	mvn.w	r2, #32
 8003c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fc45 	bl	80044f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e0ae      	b.n	8003df4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b0c      	cmp	r3, #12
 8003ca2:	f200 809f 	bhi.w	8003de4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ca6:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cac:	08003ce1 	.word	0x08003ce1
 8003cb0:	08003de5 	.word	0x08003de5
 8003cb4:	08003de5 	.word	0x08003de5
 8003cb8:	08003de5 	.word	0x08003de5
 8003cbc:	08003d21 	.word	0x08003d21
 8003cc0:	08003de5 	.word	0x08003de5
 8003cc4:	08003de5 	.word	0x08003de5
 8003cc8:	08003de5 	.word	0x08003de5
 8003ccc:	08003d63 	.word	0x08003d63
 8003cd0:	08003de5 	.word	0x08003de5
 8003cd4:	08003de5 	.word	0x08003de5
 8003cd8:	08003de5 	.word	0x08003de5
 8003cdc:	08003da3 	.word	0x08003da3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68b9      	ldr	r1, [r7, #8]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 f93a 	bl	8003f60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0208 	orr.w	r2, r2, #8
 8003cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0204 	bic.w	r2, r2, #4
 8003d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6999      	ldr	r1, [r3, #24]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	619a      	str	r2, [r3, #24]
      break;
 8003d1e:	e064      	b.n	8003dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f980 	bl	800402c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6999      	ldr	r1, [r3, #24]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	021a      	lsls	r2, r3, #8
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	619a      	str	r2, [r3, #24]
      break;
 8003d60:	e043      	b.n	8003dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 f9cb 	bl	8004104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69da      	ldr	r2, [r3, #28]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0208 	orr.w	r2, r2, #8
 8003d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0204 	bic.w	r2, r2, #4
 8003d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69d9      	ldr	r1, [r3, #28]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	61da      	str	r2, [r3, #28]
      break;
 8003da0:	e023      	b.n	8003dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fa15 	bl	80041d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69d9      	ldr	r1, [r3, #28]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	021a      	lsls	r2, r3, #8
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	61da      	str	r2, [r3, #28]
      break;
 8003de2:	e002      	b.n	8003dea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	75fb      	strb	r3, [r7, #23]
      break;
 8003de8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a34      	ldr	r2, [pc, #208]	; (8003f44 <TIM_Base_SetConfig+0xe4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00f      	beq.n	8003e98 <TIM_Base_SetConfig+0x38>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7e:	d00b      	beq.n	8003e98 <TIM_Base_SetConfig+0x38>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a31      	ldr	r2, [pc, #196]	; (8003f48 <TIM_Base_SetConfig+0xe8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d007      	beq.n	8003e98 <TIM_Base_SetConfig+0x38>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a30      	ldr	r2, [pc, #192]	; (8003f4c <TIM_Base_SetConfig+0xec>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_Base_SetConfig+0x38>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a2f      	ldr	r2, [pc, #188]	; (8003f50 <TIM_Base_SetConfig+0xf0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d108      	bne.n	8003eaa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a25      	ldr	r2, [pc, #148]	; (8003f44 <TIM_Base_SetConfig+0xe4>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01b      	beq.n	8003eea <TIM_Base_SetConfig+0x8a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb8:	d017      	beq.n	8003eea <TIM_Base_SetConfig+0x8a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a22      	ldr	r2, [pc, #136]	; (8003f48 <TIM_Base_SetConfig+0xe8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d013      	beq.n	8003eea <TIM_Base_SetConfig+0x8a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a21      	ldr	r2, [pc, #132]	; (8003f4c <TIM_Base_SetConfig+0xec>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00f      	beq.n	8003eea <TIM_Base_SetConfig+0x8a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a20      	ldr	r2, [pc, #128]	; (8003f50 <TIM_Base_SetConfig+0xf0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00b      	beq.n	8003eea <TIM_Base_SetConfig+0x8a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a1f      	ldr	r2, [pc, #124]	; (8003f54 <TIM_Base_SetConfig+0xf4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d007      	beq.n	8003eea <TIM_Base_SetConfig+0x8a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a1e      	ldr	r2, [pc, #120]	; (8003f58 <TIM_Base_SetConfig+0xf8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d003      	beq.n	8003eea <TIM_Base_SetConfig+0x8a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a1d      	ldr	r2, [pc, #116]	; (8003f5c <TIM_Base_SetConfig+0xfc>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d108      	bne.n	8003efc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a08      	ldr	r2, [pc, #32]	; (8003f44 <TIM_Base_SetConfig+0xe4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d103      	bne.n	8003f30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	615a      	str	r2, [r3, #20]
}
 8003f36:	bf00      	nop
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40010000 	.word	0x40010000
 8003f48:	40000400 	.word	0x40000400
 8003f4c:	40000800 	.word	0x40000800
 8003f50:	40000c00 	.word	0x40000c00
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40014400 	.word	0x40014400
 8003f5c:	40014800 	.word	0x40014800

08003f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	f023 0201 	bic.w	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0303 	bic.w	r3, r3, #3
 8003f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f023 0302 	bic.w	r3, r3, #2
 8003fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a1c      	ldr	r2, [pc, #112]	; (8004028 <TIM_OC1_SetConfig+0xc8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d10c      	bne.n	8003fd6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0308 	bic.w	r3, r3, #8
 8003fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f023 0304 	bic.w	r3, r3, #4
 8003fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a13      	ldr	r2, [pc, #76]	; (8004028 <TIM_OC1_SetConfig+0xc8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d111      	bne.n	8004002 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	621a      	str	r2, [r3, #32]
}
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40010000 	.word	0x40010000

0800402c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f023 0210 	bic.w	r2, r3, #16
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f023 0320 	bic.w	r3, r3, #32
 8004076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <TIM_OC2_SetConfig+0xd4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d10d      	bne.n	80040a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a15      	ldr	r2, [pc, #84]	; (8004100 <TIM_OC2_SetConfig+0xd4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d113      	bne.n	80040d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	621a      	str	r2, [r3, #32]
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40010000 	.word	0x40010000

08004104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0303 	bic.w	r3, r3, #3
 800413a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800414c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a1d      	ldr	r2, [pc, #116]	; (80041d4 <TIM_OC3_SetConfig+0xd0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d10d      	bne.n	800417e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004168:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800417c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a14      	ldr	r2, [pc, #80]	; (80041d4 <TIM_OC3_SetConfig+0xd0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d113      	bne.n	80041ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800418c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	621a      	str	r2, [r3, #32]
}
 80041c8:	bf00      	nop
 80041ca:	371c      	adds	r7, #28
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	40010000 	.word	0x40010000

080041d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004222:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	031b      	lsls	r3, r3, #12
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a10      	ldr	r2, [pc, #64]	; (8004274 <TIM_OC4_SetConfig+0x9c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d109      	bne.n	800424c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800423e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	019b      	lsls	r3, r3, #6
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	621a      	str	r2, [r3, #32]
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40010000 	.word	0x40010000

08004278 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	2201      	movs	r2, #1
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a1a      	ldr	r2, [r3, #32]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	43db      	mvns	r3, r3
 800429a:	401a      	ands	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a1a      	ldr	r2, [r3, #32]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	fa01 f303 	lsl.w	r3, r1, r3
 80042b0:	431a      	orrs	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	621a      	str	r2, [r3, #32]
}
 80042b6:	bf00      	nop
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <HAL_TIMEx_PWMN_Start+0x24>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	bf14      	ite	ne
 80042e0:	2301      	movne	r3, #1
 80042e2:	2300      	moveq	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	e022      	b.n	800432e <HAL_TIMEx_PWMN_Start+0x6a>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d109      	bne.n	8004302 <HAL_TIMEx_PWMN_Start+0x3e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	bf14      	ite	ne
 80042fa:	2301      	movne	r3, #1
 80042fc:	2300      	moveq	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	e015      	b.n	800432e <HAL_TIMEx_PWMN_Start+0x6a>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b08      	cmp	r3, #8
 8004306:	d109      	bne.n	800431c <HAL_TIMEx_PWMN_Start+0x58>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	bf14      	ite	ne
 8004314:	2301      	movne	r3, #1
 8004316:	2300      	moveq	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e008      	b.n	800432e <HAL_TIMEx_PWMN_Start+0x6a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b01      	cmp	r3, #1
 8004326:	bf14      	ite	ne
 8004328:	2301      	movne	r3, #1
 800432a:	2300      	moveq	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e063      	b.n	80043fe <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d104      	bne.n	8004346 <HAL_TIMEx_PWMN_Start+0x82>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004344:	e013      	b.n	800436e <HAL_TIMEx_PWMN_Start+0xaa>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b04      	cmp	r3, #4
 800434a:	d104      	bne.n	8004356 <HAL_TIMEx_PWMN_Start+0x92>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004354:	e00b      	b.n	800436e <HAL_TIMEx_PWMN_Start+0xaa>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d104      	bne.n	8004366 <HAL_TIMEx_PWMN_Start+0xa2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004364:	e003      	b.n	800436e <HAL_TIMEx_PWMN_Start+0xaa>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2202      	movs	r2, #2
 800436a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2204      	movs	r2, #4
 8004374:	6839      	ldr	r1, [r7, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 f8d2 	bl	8004520 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800438a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1d      	ldr	r2, [pc, #116]	; (8004408 <HAL_TIMEx_PWMN_Start+0x144>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d018      	beq.n	80043c8 <HAL_TIMEx_PWMN_Start+0x104>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439e:	d013      	beq.n	80043c8 <HAL_TIMEx_PWMN_Start+0x104>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a19      	ldr	r2, [pc, #100]	; (800440c <HAL_TIMEx_PWMN_Start+0x148>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00e      	beq.n	80043c8 <HAL_TIMEx_PWMN_Start+0x104>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a18      	ldr	r2, [pc, #96]	; (8004410 <HAL_TIMEx_PWMN_Start+0x14c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d009      	beq.n	80043c8 <HAL_TIMEx_PWMN_Start+0x104>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a16      	ldr	r2, [pc, #88]	; (8004414 <HAL_TIMEx_PWMN_Start+0x150>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d004      	beq.n	80043c8 <HAL_TIMEx_PWMN_Start+0x104>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a15      	ldr	r2, [pc, #84]	; (8004418 <HAL_TIMEx_PWMN_Start+0x154>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d111      	bne.n	80043ec <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b06      	cmp	r3, #6
 80043d8:	d010      	beq.n	80043fc <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0201 	orr.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ea:	e007      	b.n	80043fc <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40010000 	.word	0x40010000
 800440c:	40000400 	.word	0x40000400
 8004410:	40000800 	.word	0x40000800
 8004414:	40000c00 	.word	0x40000c00
 8004418:	40014000 	.word	0x40014000

0800441c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004430:	2302      	movs	r3, #2
 8004432:	e050      	b.n	80044d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1c      	ldr	r2, [pc, #112]	; (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d018      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004480:	d013      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a18      	ldr	r2, [pc, #96]	; (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00e      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a16      	ldr	r2, [pc, #88]	; (80044ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d009      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a15      	ldr	r2, [pc, #84]	; (80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d004      	beq.n	80044aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a13      	ldr	r2, [pc, #76]	; (80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d10c      	bne.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40010000 	.word	0x40010000
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000800 	.word	0x40000800
 80044f0:	40000c00 	.word	0x40000c00
 80044f4:	40014000 	.word	0x40014000

080044f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f003 031f 	and.w	r3, r3, #31
 8004532:	2204      	movs	r2, #4
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a1a      	ldr	r2, [r3, #32]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	43db      	mvns	r3, r3
 8004542:	401a      	ands	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a1a      	ldr	r2, [r3, #32]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	fa01 f303 	lsl.w	r3, r1, r3
 8004558:	431a      	orrs	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	621a      	str	r2, [r3, #32]
}
 800455e:	bf00      	nop
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800456a:	b084      	sub	sp, #16
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	f107 001c 	add.w	r0, r7, #28
 8004578:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	2b01      	cmp	r3, #1
 8004580:	d122      	bne.n	80045c8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d105      	bne.n	80045bc <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f001 fb1b 	bl	8005bf8 <USB_CoreReset>
 80045c2:	4603      	mov	r3, r0
 80045c4:	73fb      	strb	r3, [r7, #15]
 80045c6:	e01a      	b.n	80045fe <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f001 fb0f 	bl	8005bf8 <USB_CoreReset>
 80045da:	4603      	mov	r3, r0
 80045dc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80045de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d106      	bne.n	80045f2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38
 80045f0:	e005      	b.n	80045fe <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	2b01      	cmp	r3, #1
 8004602:	d10b      	bne.n	800461c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f043 0206 	orr.w	r2, r3, #6
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f043 0220 	orr.w	r2, r3, #32
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800461c:	7bfb      	ldrb	r3, [r7, #15]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004628:	b004      	add	sp, #16
 800462a:	4770      	bx	lr

0800462c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	4613      	mov	r3, r2
 8004638:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d165      	bne.n	800470c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4a41      	ldr	r2, [pc, #260]	; (8004748 <USB_SetTurnaroundTime+0x11c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d906      	bls.n	8004656 <USB_SetTurnaroundTime+0x2a>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4a40      	ldr	r2, [pc, #256]	; (800474c <USB_SetTurnaroundTime+0x120>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d202      	bcs.n	8004656 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004650:	230f      	movs	r3, #15
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	e062      	b.n	800471c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4a3c      	ldr	r2, [pc, #240]	; (800474c <USB_SetTurnaroundTime+0x120>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d306      	bcc.n	800466c <USB_SetTurnaroundTime+0x40>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4a3b      	ldr	r2, [pc, #236]	; (8004750 <USB_SetTurnaroundTime+0x124>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d202      	bcs.n	800466c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004666:	230e      	movs	r3, #14
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	e057      	b.n	800471c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4a38      	ldr	r2, [pc, #224]	; (8004750 <USB_SetTurnaroundTime+0x124>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d306      	bcc.n	8004682 <USB_SetTurnaroundTime+0x56>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4a37      	ldr	r2, [pc, #220]	; (8004754 <USB_SetTurnaroundTime+0x128>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d202      	bcs.n	8004682 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800467c:	230d      	movs	r3, #13
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e04c      	b.n	800471c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	4a33      	ldr	r2, [pc, #204]	; (8004754 <USB_SetTurnaroundTime+0x128>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d306      	bcc.n	8004698 <USB_SetTurnaroundTime+0x6c>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	4a32      	ldr	r2, [pc, #200]	; (8004758 <USB_SetTurnaroundTime+0x12c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d802      	bhi.n	8004698 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004692:	230c      	movs	r3, #12
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	e041      	b.n	800471c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4a2f      	ldr	r2, [pc, #188]	; (8004758 <USB_SetTurnaroundTime+0x12c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d906      	bls.n	80046ae <USB_SetTurnaroundTime+0x82>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4a2e      	ldr	r2, [pc, #184]	; (800475c <USB_SetTurnaroundTime+0x130>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d802      	bhi.n	80046ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80046a8:	230b      	movs	r3, #11
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	e036      	b.n	800471c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	4a2a      	ldr	r2, [pc, #168]	; (800475c <USB_SetTurnaroundTime+0x130>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d906      	bls.n	80046c4 <USB_SetTurnaroundTime+0x98>
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	4a29      	ldr	r2, [pc, #164]	; (8004760 <USB_SetTurnaroundTime+0x134>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d802      	bhi.n	80046c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80046be:	230a      	movs	r3, #10
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	e02b      	b.n	800471c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4a26      	ldr	r2, [pc, #152]	; (8004760 <USB_SetTurnaroundTime+0x134>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d906      	bls.n	80046da <USB_SetTurnaroundTime+0xae>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4a25      	ldr	r2, [pc, #148]	; (8004764 <USB_SetTurnaroundTime+0x138>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d202      	bcs.n	80046da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80046d4:	2309      	movs	r3, #9
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	e020      	b.n	800471c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	4a21      	ldr	r2, [pc, #132]	; (8004764 <USB_SetTurnaroundTime+0x138>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d306      	bcc.n	80046f0 <USB_SetTurnaroundTime+0xc4>
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	4a20      	ldr	r2, [pc, #128]	; (8004768 <USB_SetTurnaroundTime+0x13c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d802      	bhi.n	80046f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80046ea:	2308      	movs	r3, #8
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	e015      	b.n	800471c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4a1d      	ldr	r2, [pc, #116]	; (8004768 <USB_SetTurnaroundTime+0x13c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d906      	bls.n	8004706 <USB_SetTurnaroundTime+0xda>
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4a1c      	ldr	r2, [pc, #112]	; (800476c <USB_SetTurnaroundTime+0x140>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d202      	bcs.n	8004706 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004700:	2307      	movs	r3, #7
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	e00a      	b.n	800471c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004706:	2306      	movs	r3, #6
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	e007      	b.n	800471c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800470c:	79fb      	ldrb	r3, [r7, #7]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d102      	bne.n	8004718 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004712:	2309      	movs	r3, #9
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	e001      	b.n	800471c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004718:	2309      	movs	r3, #9
 800471a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	029b      	lsls	r3, r3, #10
 8004730:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004734:	431a      	orrs	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	371c      	adds	r7, #28
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	00d8acbf 	.word	0x00d8acbf
 800474c:	00e4e1c0 	.word	0x00e4e1c0
 8004750:	00f42400 	.word	0x00f42400
 8004754:	01067380 	.word	0x01067380
 8004758:	011a499f 	.word	0x011a499f
 800475c:	01312cff 	.word	0x01312cff
 8004760:	014ca43f 	.word	0x014ca43f
 8004764:	016e3600 	.word	0x016e3600
 8004768:	01a6ab1f 	.word	0x01a6ab1f
 800476c:	01e84800 	.word	0x01e84800

08004770 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f043 0201 	orr.w	r2, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f023 0201 	bic.w	r2, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d115      	bne.n	8004802 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047e2:	2001      	movs	r0, #1
 80047e4:	f7fc ff5e 	bl	80016a4 <HAL_Delay>
      ms++;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3301      	adds	r3, #1
 80047ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f001 f972 	bl	8005ad8 <USB_GetMode>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d01e      	beq.n	8004838 <USB_SetCurrentMode+0x84>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2b31      	cmp	r3, #49	; 0x31
 80047fe:	d9f0      	bls.n	80047e2 <USB_SetCurrentMode+0x2e>
 8004800:	e01a      	b.n	8004838 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004802:	78fb      	ldrb	r3, [r7, #3]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d115      	bne.n	8004834 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004814:	2001      	movs	r0, #1
 8004816:	f7fc ff45 	bl	80016a4 <HAL_Delay>
      ms++;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3301      	adds	r3, #1
 800481e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f001 f959 	bl	8005ad8 <USB_GetMode>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <USB_SetCurrentMode+0x84>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b31      	cmp	r3, #49	; 0x31
 8004830:	d9f0      	bls.n	8004814 <USB_SetCurrentMode+0x60>
 8004832:	e001      	b.n	8004838 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e005      	b.n	8004844 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b32      	cmp	r3, #50	; 0x32
 800483c:	d101      	bne.n	8004842 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800484c:	b084      	sub	sp, #16
 800484e:	b580      	push	{r7, lr}
 8004850:	b086      	sub	sp, #24
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800485a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004866:	2300      	movs	r3, #0
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	e009      	b.n	8004880 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	3340      	adds	r3, #64	; 0x40
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	2200      	movs	r2, #0
 8004878:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	3301      	adds	r3, #1
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b0e      	cmp	r3, #14
 8004884:	d9f2      	bls.n	800486c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d11c      	bne.n	80048c6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800489a:	f043 0302 	orr.w	r3, r3, #2
 800489e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048bc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	639a      	str	r2, [r3, #56]	; 0x38
 80048c4:	e00b      	b.n	80048de <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048e4:	461a      	mov	r2, r3
 80048e6:	2300      	movs	r3, #0
 80048e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f0:	4619      	mov	r1, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f8:	461a      	mov	r2, r3
 80048fa:	680b      	ldr	r3, [r1, #0]
 80048fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004900:	2b01      	cmp	r3, #1
 8004902:	d10c      	bne.n	800491e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004906:	2b00      	cmp	r3, #0
 8004908:	d104      	bne.n	8004914 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800490a:	2100      	movs	r1, #0
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f945 	bl	8004b9c <USB_SetDevSpeed>
 8004912:	e008      	b.n	8004926 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004914:	2101      	movs	r1, #1
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f940 	bl	8004b9c <USB_SetDevSpeed>
 800491c:	e003      	b.n	8004926 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800491e:	2103      	movs	r1, #3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f93b 	bl	8004b9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004926:	2110      	movs	r1, #16
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f8f3 	bl	8004b14 <USB_FlushTxFifo>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f90f 	bl	8004b5c <USB_FlushRxFifo>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494e:	461a      	mov	r2, r3
 8004950:	2300      	movs	r3, #0
 8004952:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495a:	461a      	mov	r2, r3
 800495c:	2300      	movs	r3, #0
 800495e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004966:	461a      	mov	r2, r3
 8004968:	2300      	movs	r3, #0
 800496a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800496c:	2300      	movs	r3, #0
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	e043      	b.n	80049fa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004988:	d118      	bne.n	80049bc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499c:	461a      	mov	r2, r3
 800499e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	e013      	b.n	80049ce <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b2:	461a      	mov	r2, r3
 80049b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	e008      	b.n	80049ce <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c8:	461a      	mov	r2, r3
 80049ca:	2300      	movs	r3, #0
 80049cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049da:	461a      	mov	r2, r3
 80049dc:	2300      	movs	r3, #0
 80049de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ec:	461a      	mov	r2, r3
 80049ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	3301      	adds	r3, #1
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d3b7      	bcc.n	8004972 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a02:	2300      	movs	r3, #0
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	e043      	b.n	8004a90 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a1e:	d118      	bne.n	8004a52 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10a      	bne.n	8004a3c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a32:	461a      	mov	r2, r3
 8004a34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	e013      	b.n	8004a64 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a48:	461a      	mov	r2, r3
 8004a4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	e008      	b.n	8004a64 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5e:	461a      	mov	r2, r3
 8004a60:	2300      	movs	r3, #0
 8004a62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a70:	461a      	mov	r2, r3
 8004a72:	2300      	movs	r3, #0
 8004a74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a82:	461a      	mov	r2, r3
 8004a84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d3b7      	bcc.n	8004a08 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aaa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ab8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d105      	bne.n	8004acc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	f043 0210 	orr.w	r2, r3, #16
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699a      	ldr	r2, [r3, #24]
 8004ad0:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <USB_DevInit+0x2c4>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d005      	beq.n	8004aea <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	f043 0208 	orr.w	r2, r3, #8
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d107      	bne.n	8004b00 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004af8:	f043 0304 	orr.w	r3, r3, #4
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b0c:	b004      	add	sp, #16
 8004b0e:	4770      	bx	lr
 8004b10:	803c3800 	.word	0x803c3800

08004b14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	019b      	lsls	r3, r3, #6
 8004b26:	f043 0220 	orr.w	r2, r3, #32
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3301      	adds	r3, #1
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <USB_FlushTxFifo+0x44>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e006      	b.n	8004b4c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	d0f1      	beq.n	8004b2e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	00030d40 	.word	0x00030d40

08004b5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2210      	movs	r2, #16
 8004b6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3301      	adds	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	4a08      	ldr	r2, [pc, #32]	; (8004b98 <USB_FlushRxFifo+0x3c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d901      	bls.n	8004b7e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e006      	b.n	8004b8c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0310 	and.w	r3, r3, #16
 8004b86:	2b10      	cmp	r3, #16
 8004b88:	d0f1      	beq.n	8004b6e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	00030d40 	.word	0x00030d40

08004b9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	68f9      	ldr	r1, [r7, #12]
 8004bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b087      	sub	sp, #28
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 0306 	and.w	r3, r3, #6
 8004be6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d102      	bne.n	8004bf4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	75fb      	strb	r3, [r7, #23]
 8004bf2:	e00a      	b.n	8004c0a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d002      	beq.n	8004c00 <USB_GetDevSpeed+0x32>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b06      	cmp	r3, #6
 8004bfe:	d102      	bne.n	8004c06 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004c00:	2302      	movs	r3, #2
 8004c02:	75fb      	strb	r3, [r7, #23]
 8004c04:	e001      	b.n	8004c0a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004c06:	230f      	movs	r3, #15
 8004c08:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	371c      	adds	r7, #28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	785b      	ldrb	r3, [r3, #1]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d13a      	bne.n	8004caa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3a:	69da      	ldr	r2, [r3, #28]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	2101      	movs	r1, #1
 8004c46:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	68f9      	ldr	r1, [r7, #12]
 8004c4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c52:	4313      	orrs	r3, r2
 8004c54:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d155      	bne.n	8004d18 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	78db      	ldrb	r3, [r3, #3]
 8004c86:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c88:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	059b      	lsls	r3, r3, #22
 8004c8e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c90:	4313      	orrs	r3, r2
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	0151      	lsls	r1, r2, #5
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	440a      	add	r2, r1
 8004c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	e036      	b.n	8004d18 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb0:	69da      	ldr	r2, [r3, #28]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	2101      	movs	r1, #1
 8004cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc0:	041b      	lsls	r3, r3, #16
 8004cc2:	68f9      	ldr	r1, [r7, #12]
 8004cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d11a      	bne.n	8004d18 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	78db      	ldrb	r3, [r3, #3]
 8004cfc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	4313      	orrs	r3, r2
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	0151      	lsls	r1, r2, #5
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	440a      	add	r2, r1
 8004d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d16:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d161      	bne.n	8004e08 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d5a:	d11f      	bne.n	8004d9c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	0151      	lsls	r1, r2, #5
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	440a      	add	r2, r1
 8004d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d7a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	0151      	lsls	r1, r2, #5
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	440a      	add	r2, r1
 8004d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	2101      	movs	r1, #1
 8004dae:	fa01 f303 	lsl.w	r3, r1, r3
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	43db      	mvns	r3, r3
 8004db6:	68f9      	ldr	r1, [r7, #12]
 8004db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc6:	69da      	ldr	r2, [r3, #28]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	68f9      	ldr	r1, [r7, #12]
 8004ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004de0:	4013      	ands	r3, r2
 8004de2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	0159      	lsls	r1, r3, #5
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	440b      	add	r3, r1
 8004dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4b35      	ldr	r3, [pc, #212]	; (8004ed8 <USB_DeactivateEndpoint+0x1b0>)
 8004e02:	4013      	ands	r3, r2
 8004e04:	600b      	str	r3, [r1, #0]
 8004e06:	e060      	b.n	8004eca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e1e:	d11f      	bne.n	8004e60 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	0151      	lsls	r1, r2, #5
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	440a      	add	r2, r1
 8004e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e3e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	0151      	lsls	r1, r2, #5
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	440a      	add	r2, r1
 8004e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	f003 030f 	and.w	r3, r3, #15
 8004e70:	2101      	movs	r1, #1
 8004e72:	fa01 f303 	lsl.w	r3, r1, r3
 8004e76:	041b      	lsls	r3, r3, #16
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	68f9      	ldr	r1, [r7, #12]
 8004e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e80:	4013      	ands	r3, r2
 8004e82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8a:	69da      	ldr	r2, [r3, #28]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	2101      	movs	r1, #1
 8004e96:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9a:	041b      	lsls	r3, r3, #16
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	68f9      	ldr	r1, [r7, #12]
 8004ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	0159      	lsls	r1, r3, #5
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	440b      	add	r3, r1
 8004ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <USB_DeactivateEndpoint+0x1b4>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	ec337800 	.word	0xec337800
 8004edc:	eff37800 	.word	0xeff37800

08004ee0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08a      	sub	sp, #40	; 0x28
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	4613      	mov	r3, r2
 8004eec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	785b      	ldrb	r3, [r3, #1]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	f040 815c 	bne.w	80051ba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d132      	bne.n	8004f70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	0151      	lsls	r1, r2, #5
 8004f40:	69fa      	ldr	r2, [r7, #28]
 8004f42:	440a      	add	r2, r1
 8004f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	0151      	lsls	r1, r2, #5
 8004f60:	69fa      	ldr	r2, [r7, #28]
 8004f62:	440a      	add	r2, r1
 8004f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f68:	0cdb      	lsrs	r3, r3, #19
 8004f6a:	04db      	lsls	r3, r3, #19
 8004f6c:	6113      	str	r3, [r2, #16]
 8004f6e:	e074      	b.n	800505a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	0151      	lsls	r1, r2, #5
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	440a      	add	r2, r1
 8004f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f8a:	0cdb      	lsrs	r3, r3, #19
 8004f8c:	04db      	lsls	r3, r3, #19
 8004f8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	0151      	lsls	r1, r2, #5
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	440a      	add	r2, r1
 8004fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004faa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	6959      	ldr	r1, [r3, #20]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	440b      	add	r3, r1
 8004fcc:	1e59      	subs	r1, r3, #1
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fd6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004fd8:	4b9d      	ldr	r3, [pc, #628]	; (8005250 <USB_EPStartXfer+0x370>)
 8004fda:	400b      	ands	r3, r1
 8004fdc:	69b9      	ldr	r1, [r7, #24]
 8004fde:	0148      	lsls	r0, r1, #5
 8004fe0:	69f9      	ldr	r1, [r7, #28]
 8004fe2:	4401      	add	r1, r0
 8004fe4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005002:	69b9      	ldr	r1, [r7, #24]
 8005004:	0148      	lsls	r0, r1, #5
 8005006:	69f9      	ldr	r1, [r7, #28]
 8005008:	4401      	add	r1, r0
 800500a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800500e:	4313      	orrs	r3, r2
 8005010:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	78db      	ldrb	r3, [r3, #3]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d11f      	bne.n	800505a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	440a      	add	r2, r1
 8005030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005034:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005038:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	0151      	lsls	r1, r2, #5
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	440a      	add	r2, r1
 8005050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005058:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d14b      	bne.n	80050f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d009      	beq.n	800507c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005074:	461a      	mov	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	78db      	ldrb	r3, [r3, #3]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d128      	bne.n	80050d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005090:	2b00      	cmp	r3, #0
 8005092:	d110      	bne.n	80050b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	0151      	lsls	r1, r2, #5
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	440a      	add	r2, r1
 80050aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	e00f      	b.n	80050d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	0151      	lsls	r1, r2, #5
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	440a      	add	r2, r1
 80050cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	e12f      	b.n	8005358 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	0151      	lsls	r1, r2, #5
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	440a      	add	r2, r1
 800510e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005112:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005116:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	78db      	ldrb	r3, [r3, #3]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d015      	beq.n	800514c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 8117 	beq.w	8005358 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	2101      	movs	r1, #1
 800513c:	fa01 f303 	lsl.w	r3, r1, r3
 8005140:	69f9      	ldr	r1, [r7, #28]
 8005142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005146:	4313      	orrs	r3, r2
 8005148:	634b      	str	r3, [r1, #52]	; 0x34
 800514a:	e105      	b.n	8005358 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005158:	2b00      	cmp	r3, #0
 800515a:	d110      	bne.n	800517e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	440a      	add	r2, r1
 8005172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005176:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	e00f      	b.n	800519e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	0151      	lsls	r1, r2, #5
 8005190:	69fa      	ldr	r2, [r7, #28]
 8005192:	440a      	add	r2, r1
 8005194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	68d9      	ldr	r1, [r3, #12]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	781a      	ldrb	r2, [r3, #0]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	b298      	uxth	r0, r3
 80051ac:	79fb      	ldrb	r3, [r7, #7]
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	4603      	mov	r3, r0
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 fa2b 	bl	800560e <USB_WritePacket>
 80051b8:	e0ce      	b.n	8005358 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d4:	0cdb      	lsrs	r3, r3, #19
 80051d6:	04db      	lsls	r3, r3, #19
 80051d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	0151      	lsls	r1, r2, #5
 80051ec:	69fa      	ldr	r2, [r7, #28]
 80051ee:	440a      	add	r2, r1
 80051f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d126      	bne.n	8005254 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800521c:	69b9      	ldr	r1, [r7, #24]
 800521e:	0148      	lsls	r0, r1, #5
 8005220:	69f9      	ldr	r1, [r7, #28]
 8005222:	4401      	add	r1, r0
 8005224:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005228:	4313      	orrs	r3, r2
 800522a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	0151      	lsls	r1, r2, #5
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	440a      	add	r2, r1
 8005242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005246:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800524a:	6113      	str	r3, [r2, #16]
 800524c:	e036      	b.n	80052bc <USB_EPStartXfer+0x3dc>
 800524e:	bf00      	nop
 8005250:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	695a      	ldr	r2, [r3, #20]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	4413      	add	r3, r2
 800525e:	1e5a      	subs	r2, r3, #1
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	fbb2 f3f3 	udiv	r3, r2, r3
 8005268:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	8afb      	ldrh	r3, [r7, #22]
 800527a:	04d9      	lsls	r1, r3, #19
 800527c:	4b39      	ldr	r3, [pc, #228]	; (8005364 <USB_EPStartXfer+0x484>)
 800527e:	400b      	ands	r3, r1
 8005280:	69b9      	ldr	r1, [r7, #24]
 8005282:	0148      	lsls	r0, r1, #5
 8005284:	69f9      	ldr	r1, [r7, #28]
 8005286:	4401      	add	r1, r0
 8005288:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800528c:	4313      	orrs	r3, r2
 800528e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	8af9      	ldrh	r1, [r7, #22]
 80052a4:	fb01 f303 	mul.w	r3, r1, r3
 80052a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ac:	69b9      	ldr	r1, [r7, #24]
 80052ae:	0148      	lsls	r0, r1, #5
 80052b0:	69f9      	ldr	r1, [r7, #28]
 80052b2:	4401      	add	r1, r0
 80052b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052b8:	4313      	orrs	r3, r2
 80052ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d10d      	bne.n	80052de <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d009      	beq.n	80052de <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	68d9      	ldr	r1, [r3, #12]
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052da:	460a      	mov	r2, r1
 80052dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	78db      	ldrb	r3, [r3, #3]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d128      	bne.n	8005338 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d110      	bne.n	8005318 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	0151      	lsls	r1, r2, #5
 8005308:	69fa      	ldr	r2, [r7, #28]
 800530a:	440a      	add	r2, r1
 800530c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005310:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	e00f      	b.n	8005338 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	0151      	lsls	r1, r2, #5
 800532a:	69fa      	ldr	r2, [r7, #28]
 800532c:	440a      	add	r2, r1
 800532e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005336:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	0151      	lsls	r1, r2, #5
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	440a      	add	r2, r1
 800534e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005352:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005356:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3720      	adds	r7, #32
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	1ff80000 	.word	0x1ff80000

08005368 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	4613      	mov	r3, r2
 8005374:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	785b      	ldrb	r3, [r3, #1]
 8005384:	2b01      	cmp	r3, #1
 8005386:	f040 80cd 	bne.w	8005524 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d132      	bne.n	80053f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	0151      	lsls	r1, r2, #5
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	440a      	add	r2, r1
 80053a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	0151      	lsls	r1, r2, #5
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	440a      	add	r2, r1
 80053cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	0151      	lsls	r1, r2, #5
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	440a      	add	r2, r1
 80053ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f0:	0cdb      	lsrs	r3, r3, #19
 80053f2:	04db      	lsls	r3, r3, #19
 80053f4:	6113      	str	r3, [r2, #16]
 80053f6:	e04e      	b.n	8005496 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	0151      	lsls	r1, r2, #5
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	440a      	add	r2, r1
 800540e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005412:	0cdb      	lsrs	r3, r3, #19
 8005414:	04db      	lsls	r3, r3, #19
 8005416:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	0151      	lsls	r1, r2, #5
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	440a      	add	r2, r1
 800542e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005432:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005436:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800543a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	695a      	ldr	r2, [r3, #20]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	429a      	cmp	r2, r3
 8005446:	d903      	bls.n	8005450 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800546e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005486:	6939      	ldr	r1, [r7, #16]
 8005488:	0148      	lsls	r0, r1, #5
 800548a:	6979      	ldr	r1, [r7, #20]
 800548c:	4401      	add	r1, r0
 800548e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005492:	4313      	orrs	r3, r2
 8005494:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d11e      	bne.n	80054da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d009      	beq.n	80054b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b0:	461a      	mov	r2, r3
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	0151      	lsls	r1, r2, #5
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	440a      	add	r2, r1
 80054ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	e092      	b.n	8005600 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d07e      	beq.n	8005600 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	2101      	movs	r1, #1
 8005514:	fa01 f303 	lsl.w	r3, r1, r3
 8005518:	6979      	ldr	r1, [r7, #20]
 800551a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800551e:	4313      	orrs	r3, r2
 8005520:	634b      	str	r3, [r1, #52]	; 0x34
 8005522:	e06d      	b.n	8005600 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800553e:	0cdb      	lsrs	r3, r3, #19
 8005540:	04db      	lsls	r3, r3, #19
 8005542:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	0151      	lsls	r1, r2, #5
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	440a      	add	r2, r1
 800555a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800555e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005562:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005566:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	0151      	lsls	r1, r2, #5
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	440a      	add	r2, r1
 800558e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005592:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005596:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ae:	6939      	ldr	r1, [r7, #16]
 80055b0:	0148      	lsls	r0, r1, #5
 80055b2:	6979      	ldr	r1, [r7, #20]
 80055b4:	4401      	add	r1, r0
 80055b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055ba:	4313      	orrs	r3, r2
 80055bc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d10d      	bne.n	80055e0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d009      	beq.n	80055e0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	68d9      	ldr	r1, [r3, #12]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055dc:	460a      	mov	r2, r1
 80055de:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	0151      	lsls	r1, r2, #5
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	440a      	add	r2, r1
 80055f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800560e:	b480      	push	{r7}
 8005610:	b089      	sub	sp, #36	; 0x24
 8005612:	af00      	add	r7, sp, #0
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	4611      	mov	r1, r2
 800561a:	461a      	mov	r2, r3
 800561c:	460b      	mov	r3, r1
 800561e:	71fb      	strb	r3, [r7, #7]
 8005620:	4613      	mov	r3, r2
 8005622:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800562c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005630:	2b00      	cmp	r3, #0
 8005632:	d123      	bne.n	800567c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005634:	88bb      	ldrh	r3, [r7, #4]
 8005636:	3303      	adds	r3, #3
 8005638:	089b      	lsrs	r3, r3, #2
 800563a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800563c:	2300      	movs	r3, #0
 800563e:	61bb      	str	r3, [r7, #24]
 8005640:	e018      	b.n	8005674 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	031a      	lsls	r2, r3, #12
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	4413      	add	r3, r2
 800564a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800564e:	461a      	mov	r2, r3
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	3301      	adds	r3, #1
 800565a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	3301      	adds	r3, #1
 8005660:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	3301      	adds	r3, #1
 8005666:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	3301      	adds	r3, #1
 800566c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	3301      	adds	r3, #1
 8005672:	61bb      	str	r3, [r7, #24]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	429a      	cmp	r2, r3
 800567a:	d3e2      	bcc.n	8005642 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3724      	adds	r7, #36	; 0x24
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800568a:	b480      	push	{r7}
 800568c:	b08b      	sub	sp, #44	; 0x2c
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	4613      	mov	r3, r2
 8005696:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80056a0:	88fb      	ldrh	r3, [r7, #6]
 80056a2:	089b      	lsrs	r3, r3, #2
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80056b0:	2300      	movs	r3, #0
 80056b2:	623b      	str	r3, [r7, #32]
 80056b4:	e014      	b.n	80056e0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	601a      	str	r2, [r3, #0]
    pDest++;
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	3301      	adds	r3, #1
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	3301      	adds	r3, #1
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	3301      	adds	r3, #1
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	3301      	adds	r3, #1
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	3301      	adds	r3, #1
 80056de:	623b      	str	r3, [r7, #32]
 80056e0:	6a3a      	ldr	r2, [r7, #32]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d3e6      	bcc.n	80056b6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80056e8:	8bfb      	ldrh	r3, [r7, #30]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d01e      	beq.n	800572c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056f8:	461a      	mov	r2, r3
 80056fa:	f107 0310 	add.w	r3, r7, #16
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	b2db      	uxtb	r3, r3
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	fa22 f303 	lsr.w	r3, r2, r3
 800570e:	b2da      	uxtb	r2, r3
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	701a      	strb	r2, [r3, #0]
      i++;
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	3301      	adds	r3, #1
 8005718:	623b      	str	r3, [r7, #32]
      pDest++;
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	3301      	adds	r3, #1
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005720:	8bfb      	ldrh	r3, [r7, #30]
 8005722:	3b01      	subs	r3, #1
 8005724:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005726:	8bfb      	ldrh	r3, [r7, #30]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1ea      	bne.n	8005702 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800572e:	4618      	mov	r0, r3
 8005730:	372c      	adds	r7, #44	; 0x2c
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800573a:	b480      	push	{r7}
 800573c:	b085      	sub	sp, #20
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	785b      	ldrb	r3, [r3, #1]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d12c      	bne.n	80057b0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	db12      	blt.n	800578e <USB_EPSetStall+0x54>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00f      	beq.n	800578e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4413      	add	r3, r2
 8005776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	0151      	lsls	r1, r2, #5
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	440a      	add	r2, r1
 8005784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005788:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800578c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	0151      	lsls	r1, r2, #5
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	440a      	add	r2, r1
 80057a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	e02b      	b.n	8005808 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	db12      	blt.n	80057e8 <USB_EPSetStall+0xae>
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00f      	beq.n	80057e8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057e6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	0151      	lsls	r1, r2, #5
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	440a      	add	r2, r1
 80057fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005802:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005806:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005816:	b480      	push	{r7}
 8005818:	b085      	sub	sp, #20
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	785b      	ldrb	r3, [r3, #1]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d128      	bne.n	8005884 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	440a      	add	r2, r1
 8005848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005850:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	78db      	ldrb	r3, [r3, #3]
 8005856:	2b03      	cmp	r3, #3
 8005858:	d003      	beq.n	8005862 <USB_EPClearStall+0x4c>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	78db      	ldrb	r3, [r3, #3]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d138      	bne.n	80058d4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	0151      	lsls	r1, r2, #5
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	440a      	add	r2, r1
 8005878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800587c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	e027      	b.n	80058d4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	0151      	lsls	r1, r2, #5
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	440a      	add	r2, r1
 800589a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800589e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	78db      	ldrb	r3, [r3, #3]
 80058a8:	2b03      	cmp	r3, #3
 80058aa:	d003      	beq.n	80058b4 <USB_EPClearStall+0x9e>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	78db      	ldrb	r3, [r3, #3]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d10f      	bne.n	80058d4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	0151      	lsls	r1, r2, #5
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	440a      	add	r2, r1
 80058ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b085      	sub	sp, #20
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	460b      	mov	r3, r1
 80058ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005900:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005904:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	78fb      	ldrb	r3, [r7, #3]
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005916:	68f9      	ldr	r1, [r7, #12]
 8005918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800591c:	4313      	orrs	r3, r2
 800591e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800592e:	b480      	push	{r7}
 8005930:	b085      	sub	sp, #20
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005948:	f023 0303 	bic.w	r3, r3, #3
 800594c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800595c:	f023 0302 	bic.w	r3, r3, #2
 8005960:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800598a:	f023 0303 	bic.w	r3, r3, #3
 800598e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800599e:	f043 0302 	orr.w	r3, r3, #2
 80059a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4013      	ands	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059ca:	68fb      	ldr	r3, [r7, #12]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	4013      	ands	r3, r2
 80059fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	0c1b      	lsrs	r3, r3, #16
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	b29b      	uxth	r3, r3
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8005aac:	01db      	lsls	r3, r3, #7
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ab6:	78fb      	ldrb	r3, [r7, #3]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005aca:	68bb      	ldr	r3, [r7, #8]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	371c      	adds	r7, #28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005b12:	f023 0307 	bic.w	r3, r3, #7
 8005b16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
	...

08005b3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	460b      	mov	r3, r1
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	333c      	adds	r3, #60	; 0x3c
 8005b52:	3304      	adds	r3, #4
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	4a26      	ldr	r2, [pc, #152]	; (8005bf4 <USB_EP0_OutStart+0xb8>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d90a      	bls.n	8005b76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b70:	d101      	bne.n	8005b76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	e037      	b.n	8005be6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	2300      	movs	r3, #0
 8005b80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba4:	f043 0318 	orr.w	r3, r3, #24
 8005ba8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005bbc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005bbe:	7afb      	ldrb	r3, [r7, #11]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d10f      	bne.n	8005be4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bca:	461a      	mov	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bde:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005be2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	4f54300a 	.word	0x4f54300a

08005bf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3301      	adds	r3, #1
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	4a13      	ldr	r2, [pc, #76]	; (8005c58 <USB_CoreReset+0x60>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d901      	bls.n	8005c14 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e01a      	b.n	8005c4a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	daf3      	bge.n	8005c04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f043 0201 	orr.w	r2, r3, #1
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	4a09      	ldr	r2, [pc, #36]	; (8005c58 <USB_CoreReset+0x60>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d901      	bls.n	8005c3c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e006      	b.n	8005c4a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d0f1      	beq.n	8005c2c <USB_CoreReset+0x34>

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	00030d40 	.word	0x00030d40

08005c5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005c6c:	f002 f96e 	bl	8007f4c <USBD_static_malloc>
 8005c70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d105      	bne.n	8005c84 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005c80:	2302      	movs	r3, #2
 8005c82:	e066      	b.n	8005d52 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	7c1b      	ldrb	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d119      	bne.n	8005cc8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c98:	2202      	movs	r2, #2
 8005c9a:	2181      	movs	r1, #129	; 0x81
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f002 f832 	bl	8007d06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cac:	2202      	movs	r2, #2
 8005cae:	2101      	movs	r1, #1
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f002 f828 	bl	8007d06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2210      	movs	r2, #16
 8005cc2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005cc6:	e016      	b.n	8005cf6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005cc8:	2340      	movs	r3, #64	; 0x40
 8005cca:	2202      	movs	r2, #2
 8005ccc:	2181      	movs	r1, #129	; 0x81
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f002 f819 	bl	8007d06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005cda:	2340      	movs	r3, #64	; 0x40
 8005cdc:	2202      	movs	r2, #2
 8005cde:	2101      	movs	r1, #1
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f002 f810 	bl	8007d06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2210      	movs	r2, #16
 8005cf2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005cf6:	2308      	movs	r3, #8
 8005cf8:	2203      	movs	r2, #3
 8005cfa:	2182      	movs	r1, #130	; 0x82
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f002 f802 	bl	8007d06 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	7c1b      	ldrb	r3, [r3, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d109      	bne.n	8005d40 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d36:	2101      	movs	r1, #1
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f002 f8d3 	bl	8007ee4 <USBD_LL_PrepareReceive>
 8005d3e:	e007      	b.n	8005d50 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d46:	2340      	movs	r3, #64	; 0x40
 8005d48:	2101      	movs	r1, #1
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f002 f8ca 	bl	8007ee4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b082      	sub	sp, #8
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	460b      	mov	r3, r1
 8005d64:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005d66:	2181      	movs	r1, #129	; 0x81
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f001 fff2 	bl	8007d52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005d74:	2101      	movs	r1, #1
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f001 ffeb 	bl	8007d52 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005d84:	2182      	movs	r1, #130	; 0x82
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f001 ffe3 	bl	8007d52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00e      	beq.n	8005dc4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005db6:	4618      	mov	r0, r3
 8005db8:	f002 f8d6 	bl	8007f68 <USBD_static_free>
    pdev->pClassData = NULL;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005de0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e0af      	b.n	8005f58 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d03f      	beq.n	8005e84 <USBD_CDC_Setup+0xb4>
 8005e04:	2b20      	cmp	r3, #32
 8005e06:	f040 809f 	bne.w	8005f48 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	88db      	ldrh	r3, [r3, #6]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d02e      	beq.n	8005e70 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	b25b      	sxtb	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	da16      	bge.n	8005e4a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005e28:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	88d2      	ldrh	r2, [r2, #6]
 8005e2e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	88db      	ldrh	r3, [r3, #6]
 8005e34:	2b07      	cmp	r3, #7
 8005e36:	bf28      	it	cs
 8005e38:	2307      	movcs	r3, #7
 8005e3a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	89fa      	ldrh	r2, [r7, #14]
 8005e40:	4619      	mov	r1, r3
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f001 fb19 	bl	800747a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005e48:	e085      	b.n	8005f56 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	785a      	ldrb	r2, [r3, #1]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	88db      	ldrh	r3, [r3, #6]
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005e60:	6939      	ldr	r1, [r7, #16]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	88db      	ldrh	r3, [r3, #6]
 8005e66:	461a      	mov	r2, r3
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f001 fb32 	bl	80074d2 <USBD_CtlPrepareRx>
      break;
 8005e6e:	e072      	b.n	8005f56 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	7850      	ldrb	r0, [r2, #1]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	4798      	blx	r3
      break;
 8005e82:	e068      	b.n	8005f56 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	785b      	ldrb	r3, [r3, #1]
 8005e88:	2b0b      	cmp	r3, #11
 8005e8a:	d852      	bhi.n	8005f32 <USBD_CDC_Setup+0x162>
 8005e8c:	a201      	add	r2, pc, #4	; (adr r2, 8005e94 <USBD_CDC_Setup+0xc4>)
 8005e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e92:	bf00      	nop
 8005e94:	08005ec5 	.word	0x08005ec5
 8005e98:	08005f41 	.word	0x08005f41
 8005e9c:	08005f33 	.word	0x08005f33
 8005ea0:	08005f33 	.word	0x08005f33
 8005ea4:	08005f33 	.word	0x08005f33
 8005ea8:	08005f33 	.word	0x08005f33
 8005eac:	08005f33 	.word	0x08005f33
 8005eb0:	08005f33 	.word	0x08005f33
 8005eb4:	08005f33 	.word	0x08005f33
 8005eb8:	08005f33 	.word	0x08005f33
 8005ebc:	08005eef 	.word	0x08005eef
 8005ec0:	08005f19 	.word	0x08005f19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d107      	bne.n	8005ee0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005ed0:	f107 030a 	add.w	r3, r7, #10
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f001 face 	bl	800747a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ede:	e032      	b.n	8005f46 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f001 fa58 	bl	8007398 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	75fb      	strb	r3, [r7, #23]
          break;
 8005eec:	e02b      	b.n	8005f46 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d107      	bne.n	8005f0a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005efa:	f107 030d 	add.w	r3, r7, #13
 8005efe:	2201      	movs	r2, #1
 8005f00:	4619      	mov	r1, r3
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f001 fab9 	bl	800747a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f08:	e01d      	b.n	8005f46 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f001 fa43 	bl	8007398 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f12:	2303      	movs	r3, #3
 8005f14:	75fb      	strb	r3, [r7, #23]
          break;
 8005f16:	e016      	b.n	8005f46 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d00f      	beq.n	8005f44 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f001 fa36 	bl	8007398 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005f30:	e008      	b.n	8005f44 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f001 fa2f 	bl	8007398 <USBD_CtlError>
          ret = USBD_FAIL;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f3e:	e002      	b.n	8005f46 <USBD_CDC_Setup+0x176>
          break;
 8005f40:	bf00      	nop
 8005f42:	e008      	b.n	8005f56 <USBD_CDC_Setup+0x186>
          break;
 8005f44:	bf00      	nop
      }
      break;
 8005f46:	e006      	b.n	8005f56 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005f48:	6839      	ldr	r1, [r7, #0]
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f001 fa24 	bl	8007398 <USBD_CtlError>
      ret = USBD_FAIL;
 8005f50:	2303      	movs	r3, #3
 8005f52:	75fb      	strb	r3, [r7, #23]
      break;
 8005f54:	bf00      	nop
  }

  return (uint8_t)ret;
 8005f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e04f      	b.n	8006022 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f88:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005f8a:	78fa      	ldrb	r2, [r7, #3]
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	3318      	adds	r3, #24
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d029      	beq.n	8005ff4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005fa0:	78fa      	ldrb	r2, [r7, #3]
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	440b      	add	r3, r1
 8005fae:	3318      	adds	r3, #24
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	78f9      	ldrb	r1, [r7, #3]
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	1a5b      	subs	r3, r3, r1
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4403      	add	r3, r0
 8005fc0:	3344      	adds	r3, #68	; 0x44
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	fbb2 f1f3 	udiv	r1, r2, r3
 8005fc8:	fb03 f301 	mul.w	r3, r3, r1
 8005fcc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d110      	bne.n	8005ff4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005fd2:	78fa      	ldrb	r2, [r7, #3]
 8005fd4:	6879      	ldr	r1, [r7, #4]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	440b      	add	r3, r1
 8005fe0:	3318      	adds	r3, #24
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005fe6:	78f9      	ldrb	r1, [r7, #3]
 8005fe8:	2300      	movs	r3, #0
 8005fea:	2200      	movs	r2, #0
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f001 ff58 	bl	8007ea2 <USBD_LL_Transmit>
 8005ff2:	e015      	b.n	8006020 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00b      	beq.n	8006020 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800601c:	78fa      	ldrb	r2, [r7, #3]
 800601e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	460b      	mov	r3, r1
 8006034:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800603c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006048:	2303      	movs	r3, #3
 800604a:	e015      	b.n	8006078 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f001 ff68 	bl	8007f26 <USBD_LL_GetRxDataSize>
 8006056:	4602      	mov	r2, r0
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006072:	4611      	mov	r1, r2
 8006074:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800608e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006096:	2303      	movs	r3, #3
 8006098:	e01b      	b.n	80060d2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d015      	beq.n	80060d0 <USBD_CDC_EP0_RxReady+0x50>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80060aa:	2bff      	cmp	r3, #255	; 0xff
 80060ac:	d010      	beq.n	80060d0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80060bc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80060c4:	b292      	uxth	r2, r2
 80060c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	22ff      	movs	r2, #255	; 0xff
 80060cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2243      	movs	r2, #67	; 0x43
 80060e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80060ea:	4b03      	ldr	r3, [pc, #12]	; (80060f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	20000094 	.word	0x20000094

080060fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2243      	movs	r2, #67	; 0x43
 8006108:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800610a:	4b03      	ldr	r3, [pc, #12]	; (8006118 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800610c:	4618      	mov	r0, r3
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	20000050 	.word	0x20000050

0800611c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2243      	movs	r2, #67	; 0x43
 8006128:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800612a:	4b03      	ldr	r3, [pc, #12]	; (8006138 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	200000d8 	.word	0x200000d8

0800613c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	220a      	movs	r2, #10
 8006148:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800614a:	4b03      	ldr	r3, [pc, #12]	; (8006158 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800614c:	4618      	mov	r0, r3
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	2000000c 	.word	0x2000000c

0800615c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800616c:	2303      	movs	r3, #3
 800616e:	e004      	b.n	800617a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006186:	b480      	push	{r7}
 8006188:	b087      	sub	sp, #28
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006198:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e008      	b.n	80061b6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	371c      	adds	r7, #28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b085      	sub	sp, #20
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061d2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80061da:	2303      	movs	r3, #3
 80061dc:	e004      	b.n	80061e8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006202:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006204:	2301      	movs	r3, #1
 8006206:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006212:	2303      	movs	r3, #3
 8006214:	e01a      	b.n	800624c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800621c:	2b00      	cmp	r3, #0
 800621e:	d114      	bne.n	800624a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2201      	movs	r2, #1
 8006224:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800623e:	2181      	movs	r1, #129	; 0x81
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f001 fe2e 	bl	8007ea2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800624a:	7bfb      	ldrb	r3, [r7, #15]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006262:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800626e:	2303      	movs	r3, #3
 8006270:	e016      	b.n	80062a0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	7c1b      	ldrb	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d109      	bne.n	800628e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006284:	2101      	movs	r1, #1
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f001 fe2c 	bl	8007ee4 <USBD_LL_PrepareReceive>
 800628c:	e007      	b.n	800629e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006294:	2340      	movs	r3, #64	; 0x40
 8006296:	2101      	movs	r1, #1
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f001 fe23 	bl	8007ee4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	4613      	mov	r3, r2
 80062b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80062bc:	2303      	movs	r3, #3
 80062be:	e01f      	b.n	8006300 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	79fa      	ldrb	r2, [r7, #7]
 80062f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f001 fc9f 	bl	8007c38 <USBD_LL_Init>
 80062fa:	4603      	mov	r3, r0
 80062fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800631c:	2303      	movs	r3, #3
 800631e:	e016      	b.n	800634e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00b      	beq.n	800634c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	f107 020e 	add.w	r2, r7, #14
 8006340:	4610      	mov	r0, r2
 8006342:	4798      	blx	r3
 8006344:	4602      	mov	r2, r0
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b082      	sub	sp, #8
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f001 fcb6 	bl	8007cd0 <USBD_LL_Start>
 8006364:	4603      	mov	r3, r0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006390:	2303      	movs	r3, #3
 8006392:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d009      	beq.n	80063b2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	78fa      	ldrb	r2, [r7, #3]
 80063a8:	4611      	mov	r1, r2
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	4798      	blx	r3
 80063ae:	4603      	mov	r3, r0
 80063b0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d007      	beq.n	80063e2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	78fa      	ldrb	r2, [r7, #3]
 80063dc:	4611      	mov	r1, r2
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	4798      	blx	r3
  }

  return USBD_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 ff90 	bl	8007324 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006412:	461a      	mov	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006420:	f003 031f 	and.w	r3, r3, #31
 8006424:	2b02      	cmp	r3, #2
 8006426:	d01a      	beq.n	800645e <USBD_LL_SetupStage+0x72>
 8006428:	2b02      	cmp	r3, #2
 800642a:	d822      	bhi.n	8006472 <USBD_LL_SetupStage+0x86>
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <USBD_LL_SetupStage+0x4a>
 8006430:	2b01      	cmp	r3, #1
 8006432:	d00a      	beq.n	800644a <USBD_LL_SetupStage+0x5e>
 8006434:	e01d      	b.n	8006472 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800643c:	4619      	mov	r1, r3
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa62 	bl	8006908 <USBD_StdDevReq>
 8006444:	4603      	mov	r3, r0
 8006446:	73fb      	strb	r3, [r7, #15]
      break;
 8006448:	e020      	b.n	800648c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006450:	4619      	mov	r1, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fac6 	bl	80069e4 <USBD_StdItfReq>
 8006458:	4603      	mov	r3, r0
 800645a:	73fb      	strb	r3, [r7, #15]
      break;
 800645c:	e016      	b.n	800648c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006464:	4619      	mov	r1, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fb05 	bl	8006a76 <USBD_StdEPReq>
 800646c:	4603      	mov	r3, r0
 800646e:	73fb      	strb	r3, [r7, #15]
      break;
 8006470:	e00c      	b.n	800648c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006478:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800647c:	b2db      	uxtb	r3, r3
 800647e:	4619      	mov	r1, r3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f001 fc85 	bl	8007d90 <USBD_LL_StallEP>
 8006486:	4603      	mov	r3, r0
 8006488:	73fb      	strb	r3, [r7, #15]
      break;
 800648a:	bf00      	nop
  }

  return ret;
 800648c:	7bfb      	ldrb	r3, [r7, #15]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b086      	sub	sp, #24
 800649a:	af00      	add	r7, sp, #0
 800649c:	60f8      	str	r0, [r7, #12]
 800649e:	460b      	mov	r3, r1
 80064a0:	607a      	str	r2, [r7, #4]
 80064a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80064a4:	7afb      	ldrb	r3, [r7, #11]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d138      	bne.n	800651c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80064b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064b8:	2b03      	cmp	r3, #3
 80064ba:	d14a      	bne.n	8006552 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d913      	bls.n	80064f0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	1ad2      	subs	r2, r2, r3
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	4293      	cmp	r3, r2
 80064e0:	bf28      	it	cs
 80064e2:	4613      	movcs	r3, r2
 80064e4:	461a      	mov	r2, r3
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f001 f80f 	bl	800750c <USBD_CtlContinueRx>
 80064ee:	e030      	b.n	8006552 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d10b      	bne.n	8006514 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d005      	beq.n	8006514 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f001 f80a 	bl	800752e <USBD_CtlSendStatus>
 800651a:	e01a      	b.n	8006552 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b03      	cmp	r3, #3
 8006526:	d114      	bne.n	8006552 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00e      	beq.n	8006552 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	7afa      	ldrb	r2, [r7, #11]
 800653e:	4611      	mov	r1, r2
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	4798      	blx	r3
 8006544:	4603      	mov	r3, r0
 8006546:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006548:	7dfb      	ldrb	r3, [r7, #23]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800654e:	7dfb      	ldrb	r3, [r7, #23]
 8006550:	e000      	b.n	8006554 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	460b      	mov	r3, r1
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800656a:	7afb      	ldrb	r3, [r7, #11]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d16b      	bne.n	8006648 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3314      	adds	r3, #20
 8006574:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800657c:	2b02      	cmp	r3, #2
 800657e:	d156      	bne.n	800662e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	429a      	cmp	r2, r3
 800658a:	d914      	bls.n	80065b6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	1ad2      	subs	r2, r2, r3
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	461a      	mov	r2, r3
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 ff84 	bl	80074b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065a8:	2300      	movs	r3, #0
 80065aa:	2200      	movs	r2, #0
 80065ac:	2100      	movs	r1, #0
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f001 fc98 	bl	8007ee4 <USBD_LL_PrepareReceive>
 80065b4:	e03b      	b.n	800662e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d11c      	bne.n	80065fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d316      	bcc.n	80065fc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80065d8:	429a      	cmp	r2, r3
 80065da:	d20f      	bcs.n	80065fc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80065dc:	2200      	movs	r2, #0
 80065de:	2100      	movs	r1, #0
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 ff65 	bl	80074b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065ee:	2300      	movs	r3, #0
 80065f0:	2200      	movs	r2, #0
 80065f2:	2100      	movs	r1, #0
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f001 fc75 	bl	8007ee4 <USBD_LL_PrepareReceive>
 80065fa:	e018      	b.n	800662e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b03      	cmp	r3, #3
 8006606:	d10b      	bne.n	8006620 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006620:	2180      	movs	r1, #128	; 0x80
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f001 fbb4 	bl	8007d90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 ff93 	bl	8007554 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006634:	2b01      	cmp	r3, #1
 8006636:	d122      	bne.n	800667e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f7ff fe98 	bl	800636e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006646:	e01a      	b.n	800667e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b03      	cmp	r3, #3
 8006652:	d114      	bne.n	800667e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00e      	beq.n	800667e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	7afa      	ldrb	r2, [r7, #11]
 800666a:	4611      	mov	r1, r2
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	4798      	blx	r3
 8006670:	4603      	mov	r3, r0
 8006672:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006674:	7dfb      	ldrb	r3, [r7, #23]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800667a:	7dfb      	ldrb	r3, [r7, #23]
 800667c:	e000      	b.n	8006680 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e02f      	b.n	800671c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00f      	beq.n	80066e6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	6852      	ldr	r2, [r2, #4]
 80066de:	b2d2      	uxtb	r2, r2
 80066e0:	4611      	mov	r1, r2
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066e6:	2340      	movs	r3, #64	; 0x40
 80066e8:	2200      	movs	r2, #0
 80066ea:	2100      	movs	r1, #0
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f001 fb0a 	bl	8007d06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2240      	movs	r2, #64	; 0x40
 80066fe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006702:	2340      	movs	r3, #64	; 0x40
 8006704:	2200      	movs	r2, #0
 8006706:	2180      	movs	r1, #128	; 0x80
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f001 fafc 	bl	8007d06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2240      	movs	r2, #64	; 0x40
 8006718:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	78fa      	ldrb	r2, [r7, #3]
 8006734:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006752:	b2da      	uxtb	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2204      	movs	r2, #4
 800675e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b04      	cmp	r3, #4
 8006782:	d106      	bne.n	8006792 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800678a:	b2da      	uxtb	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e012      	b.n	80067dc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d10b      	bne.n	80067da <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d005      	beq.n	80067da <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e014      	b.n	8006828 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b03      	cmp	r3, #3
 8006808:	d10d      	bne.n	8006826 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d007      	beq.n	8006826 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	78fa      	ldrb	r2, [r7, #3]
 8006820:	4611      	mov	r1, r2
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006846:	2303      	movs	r3, #3
 8006848:	e014      	b.n	8006874 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b03      	cmp	r3, #3
 8006854:	d10d      	bne.n	8006872 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	2b00      	cmp	r3, #0
 8006860:	d007      	beq.n	8006872 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	78fa      	ldrb	r2, [r7, #3]
 800686c:	4611      	mov	r1, r2
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b082      	sub	sp, #8
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d009      	beq.n	80068c0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	6852      	ldr	r2, [r2, #4]
 80068b8:	b2d2      	uxtb	r2, r2
 80068ba:	4611      	mov	r1, r2
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4798      	blx	r3
  }

  return USBD_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b087      	sub	sp, #28
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	3301      	adds	r3, #1
 80068e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80068e8:	8a3b      	ldrh	r3, [r7, #16]
 80068ea:	021b      	lsls	r3, r3, #8
 80068ec:	b21a      	sxth	r2, r3
 80068ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	b21b      	sxth	r3, r3
 80068f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80068f8:	89fb      	ldrh	r3, [r7, #14]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
	...

08006908 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800691e:	2b40      	cmp	r3, #64	; 0x40
 8006920:	d005      	beq.n	800692e <USBD_StdDevReq+0x26>
 8006922:	2b40      	cmp	r3, #64	; 0x40
 8006924:	d853      	bhi.n	80069ce <USBD_StdDevReq+0xc6>
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00b      	beq.n	8006942 <USBD_StdDevReq+0x3a>
 800692a:	2b20      	cmp	r3, #32
 800692c:	d14f      	bne.n	80069ce <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	4798      	blx	r3
 800693c:	4603      	mov	r3, r0
 800693e:	73fb      	strb	r3, [r7, #15]
      break;
 8006940:	e04a      	b.n	80069d8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	785b      	ldrb	r3, [r3, #1]
 8006946:	2b09      	cmp	r3, #9
 8006948:	d83b      	bhi.n	80069c2 <USBD_StdDevReq+0xba>
 800694a:	a201      	add	r2, pc, #4	; (adr r2, 8006950 <USBD_StdDevReq+0x48>)
 800694c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006950:	080069a5 	.word	0x080069a5
 8006954:	080069b9 	.word	0x080069b9
 8006958:	080069c3 	.word	0x080069c3
 800695c:	080069af 	.word	0x080069af
 8006960:	080069c3 	.word	0x080069c3
 8006964:	08006983 	.word	0x08006983
 8006968:	08006979 	.word	0x08006979
 800696c:	080069c3 	.word	0x080069c3
 8006970:	0800699b 	.word	0x0800699b
 8006974:	0800698d 	.word	0x0800698d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f9de 	bl	8006d3c <USBD_GetDescriptor>
          break;
 8006980:	e024      	b.n	80069cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fb43 	bl	8007010 <USBD_SetAddress>
          break;
 800698a:	e01f      	b.n	80069cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fb82 	bl	8007098 <USBD_SetConfig>
 8006994:	4603      	mov	r3, r0
 8006996:	73fb      	strb	r3, [r7, #15]
          break;
 8006998:	e018      	b.n	80069cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fc21 	bl	80071e4 <USBD_GetConfig>
          break;
 80069a2:	e013      	b.n	80069cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fc52 	bl	8007250 <USBD_GetStatus>
          break;
 80069ac:	e00e      	b.n	80069cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fc81 	bl	80072b8 <USBD_SetFeature>
          break;
 80069b6:	e009      	b.n	80069cc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fc90 	bl	80072e0 <USBD_ClrFeature>
          break;
 80069c0:	e004      	b.n	80069cc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fce7 	bl	8007398 <USBD_CtlError>
          break;
 80069ca:	bf00      	nop
      }
      break;
 80069cc:	e004      	b.n	80069d8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fce1 	bl	8007398 <USBD_CtlError>
      break;
 80069d6:	bf00      	nop
  }

  return ret;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop

080069e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069fa:	2b40      	cmp	r3, #64	; 0x40
 80069fc:	d005      	beq.n	8006a0a <USBD_StdItfReq+0x26>
 80069fe:	2b40      	cmp	r3, #64	; 0x40
 8006a00:	d82f      	bhi.n	8006a62 <USBD_StdItfReq+0x7e>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <USBD_StdItfReq+0x26>
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d12b      	bne.n	8006a62 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	3b01      	subs	r3, #1
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d81d      	bhi.n	8006a54 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	889b      	ldrh	r3, [r3, #4]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d813      	bhi.n	8006a4a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	4798      	blx	r3
 8006a30:	4603      	mov	r3, r0
 8006a32:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	88db      	ldrh	r3, [r3, #6]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d110      	bne.n	8006a5e <USBD_StdItfReq+0x7a>
 8006a3c:	7bfb      	ldrb	r3, [r7, #15]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10d      	bne.n	8006a5e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fd73 	bl	800752e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a48:	e009      	b.n	8006a5e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fca3 	bl	8007398 <USBD_CtlError>
          break;
 8006a52:	e004      	b.n	8006a5e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fc9e 	bl	8007398 <USBD_CtlError>
          break;
 8006a5c:	e000      	b.n	8006a60 <USBD_StdItfReq+0x7c>
          break;
 8006a5e:	bf00      	nop
      }
      break;
 8006a60:	e004      	b.n	8006a6c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fc97 	bl	8007398 <USBD_CtlError>
      break;
 8006a6a:	bf00      	nop
  }

  return ret;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	889b      	ldrh	r3, [r3, #4]
 8006a88:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a92:	2b40      	cmp	r3, #64	; 0x40
 8006a94:	d007      	beq.n	8006aa6 <USBD_StdEPReq+0x30>
 8006a96:	2b40      	cmp	r3, #64	; 0x40
 8006a98:	f200 8145 	bhi.w	8006d26 <USBD_StdEPReq+0x2b0>
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00c      	beq.n	8006aba <USBD_StdEPReq+0x44>
 8006aa0:	2b20      	cmp	r3, #32
 8006aa2:	f040 8140 	bne.w	8006d26 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	4798      	blx	r3
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab8:	e13a      	b.n	8006d30 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	785b      	ldrb	r3, [r3, #1]
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d007      	beq.n	8006ad2 <USBD_StdEPReq+0x5c>
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	f300 8129 	bgt.w	8006d1a <USBD_StdEPReq+0x2a4>
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d07f      	beq.n	8006bcc <USBD_StdEPReq+0x156>
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d03c      	beq.n	8006b4a <USBD_StdEPReq+0xd4>
 8006ad0:	e123      	b.n	8006d1a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d002      	beq.n	8006ae4 <USBD_StdEPReq+0x6e>
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d016      	beq.n	8006b10 <USBD_StdEPReq+0x9a>
 8006ae2:	e02c      	b.n	8006b3e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ae4:	7bbb      	ldrb	r3, [r7, #14]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00d      	beq.n	8006b06 <USBD_StdEPReq+0x90>
 8006aea:	7bbb      	ldrb	r3, [r7, #14]
 8006aec:	2b80      	cmp	r3, #128	; 0x80
 8006aee:	d00a      	beq.n	8006b06 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006af0:	7bbb      	ldrb	r3, [r7, #14]
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 f94b 	bl	8007d90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006afa:	2180      	movs	r1, #128	; 0x80
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 f947 	bl	8007d90 <USBD_LL_StallEP>
 8006b02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b04:	e020      	b.n	8006b48 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fc45 	bl	8007398 <USBD_CtlError>
              break;
 8006b0e:	e01b      	b.n	8006b48 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	885b      	ldrh	r3, [r3, #2]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10e      	bne.n	8006b36 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00b      	beq.n	8006b36 <USBD_StdEPReq+0xc0>
 8006b1e:	7bbb      	ldrb	r3, [r7, #14]
 8006b20:	2b80      	cmp	r3, #128	; 0x80
 8006b22:	d008      	beq.n	8006b36 <USBD_StdEPReq+0xc0>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	88db      	ldrh	r3, [r3, #6]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d104      	bne.n	8006b36 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b2c:	7bbb      	ldrb	r3, [r7, #14]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 f92d 	bl	8007d90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fcf9 	bl	800752e <USBD_CtlSendStatus>

              break;
 8006b3c:	e004      	b.n	8006b48 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fc29 	bl	8007398 <USBD_CtlError>
              break;
 8006b46:	bf00      	nop
          }
          break;
 8006b48:	e0ec      	b.n	8006d24 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d002      	beq.n	8006b5c <USBD_StdEPReq+0xe6>
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d016      	beq.n	8006b88 <USBD_StdEPReq+0x112>
 8006b5a:	e030      	b.n	8006bbe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00d      	beq.n	8006b7e <USBD_StdEPReq+0x108>
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	2b80      	cmp	r3, #128	; 0x80
 8006b66:	d00a      	beq.n	8006b7e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f001 f90f 	bl	8007d90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b72:	2180      	movs	r1, #128	; 0x80
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f001 f90b 	bl	8007d90 <USBD_LL_StallEP>
 8006b7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b7c:	e025      	b.n	8006bca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fc09 	bl	8007398 <USBD_CtlError>
              break;
 8006b86:	e020      	b.n	8006bca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	885b      	ldrh	r3, [r3, #2]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d11b      	bne.n	8006bc8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b90:	7bbb      	ldrb	r3, [r7, #14]
 8006b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d004      	beq.n	8006ba4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b9a:	7bbb      	ldrb	r3, [r7, #14]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f001 f915 	bl	8007dce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fcc2 	bl	800752e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	4798      	blx	r3
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006bbc:	e004      	b.n	8006bc8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fbe9 	bl	8007398 <USBD_CtlError>
              break;
 8006bc6:	e000      	b.n	8006bca <USBD_StdEPReq+0x154>
              break;
 8006bc8:	bf00      	nop
          }
          break;
 8006bca:	e0ab      	b.n	8006d24 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d002      	beq.n	8006bde <USBD_StdEPReq+0x168>
 8006bd8:	2b03      	cmp	r3, #3
 8006bda:	d032      	beq.n	8006c42 <USBD_StdEPReq+0x1cc>
 8006bdc:	e097      	b.n	8006d0e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bde:	7bbb      	ldrb	r3, [r7, #14]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d007      	beq.n	8006bf4 <USBD_StdEPReq+0x17e>
 8006be4:	7bbb      	ldrb	r3, [r7, #14]
 8006be6:	2b80      	cmp	r3, #128	; 0x80
 8006be8:	d004      	beq.n	8006bf4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fbd3 	bl	8007398 <USBD_CtlError>
                break;
 8006bf2:	e091      	b.n	8006d18 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	da0b      	bge.n	8006c14 <USBD_StdEPReq+0x19e>
 8006bfc:	7bbb      	ldrb	r3, [r7, #14]
 8006bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c02:	4613      	mov	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	3310      	adds	r3, #16
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	4413      	add	r3, r2
 8006c10:	3304      	adds	r3, #4
 8006c12:	e00b      	b.n	8006c2c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c14:	7bbb      	ldrb	r3, [r7, #14]
 8006c16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	4413      	add	r3, r2
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2200      	movs	r2, #0
 8006c32:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2202      	movs	r2, #2
 8006c38:	4619      	mov	r1, r3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fc1d 	bl	800747a <USBD_CtlSendData>
              break;
 8006c40:	e06a      	b.n	8006d18 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	da11      	bge.n	8006c6e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c4a:	7bbb      	ldrb	r3, [r7, #14]
 8006c4c:	f003 020f 	and.w	r2, r3, #15
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	4613      	mov	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	440b      	add	r3, r1
 8006c5c:	3324      	adds	r3, #36	; 0x24
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d117      	bne.n	8006c94 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006c64:	6839      	ldr	r1, [r7, #0]
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fb96 	bl	8007398 <USBD_CtlError>
                  break;
 8006c6c:	e054      	b.n	8006d18 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c6e:	7bbb      	ldrb	r3, [r7, #14]
 8006c70:	f003 020f 	and.w	r2, r3, #15
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	4613      	mov	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	440b      	add	r3, r1
 8006c80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d104      	bne.n	8006c94 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fb83 	bl	8007398 <USBD_CtlError>
                  break;
 8006c92:	e041      	b.n	8006d18 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	da0b      	bge.n	8006cb4 <USBD_StdEPReq+0x23e>
 8006c9c:	7bbb      	ldrb	r3, [r7, #14]
 8006c9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	3310      	adds	r3, #16
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	4413      	add	r3, r2
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	e00b      	b.n	8006ccc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cba:	4613      	mov	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	4413      	add	r3, r2
 8006cca:	3304      	adds	r3, #4
 8006ccc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <USBD_StdEPReq+0x264>
 8006cd4:	7bbb      	ldrb	r3, [r7, #14]
 8006cd6:	2b80      	cmp	r3, #128	; 0x80
 8006cd8:	d103      	bne.n	8006ce2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	e00e      	b.n	8006d00 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006ce2:	7bbb      	ldrb	r3, [r7, #14]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 f890 	bl	8007e0c <USBD_LL_IsStallEP>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	e002      	b.n	8006d00 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2202      	movs	r2, #2
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fbb7 	bl	800747a <USBD_CtlSendData>
              break;
 8006d0c:	e004      	b.n	8006d18 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fb41 	bl	8007398 <USBD_CtlError>
              break;
 8006d16:	bf00      	nop
          }
          break;
 8006d18:	e004      	b.n	8006d24 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fb3b 	bl	8007398 <USBD_CtlError>
          break;
 8006d22:	bf00      	nop
      }
      break;
 8006d24:	e004      	b.n	8006d30 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fb35 	bl	8007398 <USBD_CtlError>
      break;
 8006d2e:	bf00      	nop
  }

  return ret;
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	885b      	ldrh	r3, [r3, #2]
 8006d56:	0a1b      	lsrs	r3, r3, #8
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	2b06      	cmp	r3, #6
 8006d5e:	f200 8128 	bhi.w	8006fb2 <USBD_GetDescriptor+0x276>
 8006d62:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <USBD_GetDescriptor+0x2c>)
 8006d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d68:	08006d85 	.word	0x08006d85
 8006d6c:	08006d9d 	.word	0x08006d9d
 8006d70:	08006ddd 	.word	0x08006ddd
 8006d74:	08006fb3 	.word	0x08006fb3
 8006d78:	08006fb3 	.word	0x08006fb3
 8006d7c:	08006f53 	.word	0x08006f53
 8006d80:	08006f7f 	.word	0x08006f7f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	7c12      	ldrb	r2, [r2, #16]
 8006d90:	f107 0108 	add.w	r1, r7, #8
 8006d94:	4610      	mov	r0, r2
 8006d96:	4798      	blx	r3
 8006d98:	60f8      	str	r0, [r7, #12]
      break;
 8006d9a:	e112      	b.n	8006fc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	7c1b      	ldrb	r3, [r3, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10d      	bne.n	8006dc0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dac:	f107 0208 	add.w	r2, r7, #8
 8006db0:	4610      	mov	r0, r2
 8006db2:	4798      	blx	r3
 8006db4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	3301      	adds	r3, #1
 8006dba:	2202      	movs	r2, #2
 8006dbc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006dbe:	e100      	b.n	8006fc2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	f107 0208 	add.w	r2, r7, #8
 8006dcc:	4610      	mov	r0, r2
 8006dce:	4798      	blx	r3
 8006dd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	701a      	strb	r2, [r3, #0]
      break;
 8006dda:	e0f2      	b.n	8006fc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	885b      	ldrh	r3, [r3, #2]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b05      	cmp	r3, #5
 8006de4:	f200 80ac 	bhi.w	8006f40 <USBD_GetDescriptor+0x204>
 8006de8:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <USBD_GetDescriptor+0xb4>)
 8006dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dee:	bf00      	nop
 8006df0:	08006e09 	.word	0x08006e09
 8006df4:	08006e3d 	.word	0x08006e3d
 8006df8:	08006e71 	.word	0x08006e71
 8006dfc:	08006ea5 	.word	0x08006ea5
 8006e00:	08006ed9 	.word	0x08006ed9
 8006e04:	08006f0d 	.word	0x08006f0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	7c12      	ldrb	r2, [r2, #16]
 8006e20:	f107 0108 	add.w	r1, r7, #8
 8006e24:	4610      	mov	r0, r2
 8006e26:	4798      	blx	r3
 8006e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e2a:	e091      	b.n	8006f50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fab2 	bl	8007398 <USBD_CtlError>
            err++;
 8006e34:	7afb      	ldrb	r3, [r7, #11]
 8006e36:	3301      	adds	r3, #1
 8006e38:	72fb      	strb	r3, [r7, #11]
          break;
 8006e3a:	e089      	b.n	8006f50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00b      	beq.n	8006e60 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	7c12      	ldrb	r2, [r2, #16]
 8006e54:	f107 0108 	add.w	r1, r7, #8
 8006e58:	4610      	mov	r0, r2
 8006e5a:	4798      	blx	r3
 8006e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e5e:	e077      	b.n	8006f50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fa98 	bl	8007398 <USBD_CtlError>
            err++;
 8006e68:	7afb      	ldrb	r3, [r7, #11]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e6e:	e06f      	b.n	8006f50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00b      	beq.n	8006e94 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	7c12      	ldrb	r2, [r2, #16]
 8006e88:	f107 0108 	add.w	r1, r7, #8
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	4798      	blx	r3
 8006e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e92:	e05d      	b.n	8006f50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fa7e 	bl	8007398 <USBD_CtlError>
            err++;
 8006e9c:	7afb      	ldrb	r3, [r7, #11]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ea2:	e055      	b.n	8006f50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00b      	beq.n	8006ec8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	7c12      	ldrb	r2, [r2, #16]
 8006ebc:	f107 0108 	add.w	r1, r7, #8
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4798      	blx	r3
 8006ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ec6:	e043      	b.n	8006f50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fa64 	bl	8007398 <USBD_CtlError>
            err++;
 8006ed0:	7afb      	ldrb	r3, [r7, #11]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ed6:	e03b      	b.n	8006f50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00b      	beq.n	8006efc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	7c12      	ldrb	r2, [r2, #16]
 8006ef0:	f107 0108 	add.w	r1, r7, #8
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	4798      	blx	r3
 8006ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006efa:	e029      	b.n	8006f50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fa4a 	bl	8007398 <USBD_CtlError>
            err++;
 8006f04:	7afb      	ldrb	r3, [r7, #11]
 8006f06:	3301      	adds	r3, #1
 8006f08:	72fb      	strb	r3, [r7, #11]
          break;
 8006f0a:	e021      	b.n	8006f50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00b      	beq.n	8006f30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	7c12      	ldrb	r2, [r2, #16]
 8006f24:	f107 0108 	add.w	r1, r7, #8
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4798      	blx	r3
 8006f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f2e:	e00f      	b.n	8006f50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fa30 	bl	8007398 <USBD_CtlError>
            err++;
 8006f38:	7afb      	ldrb	r3, [r7, #11]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f3e:	e007      	b.n	8006f50 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fa28 	bl	8007398 <USBD_CtlError>
          err++;
 8006f48:	7afb      	ldrb	r3, [r7, #11]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006f4e:	bf00      	nop
      }
      break;
 8006f50:	e037      	b.n	8006fc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	7c1b      	ldrb	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d109      	bne.n	8006f6e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f62:	f107 0208 	add.w	r2, r7, #8
 8006f66:	4610      	mov	r0, r2
 8006f68:	4798      	blx	r3
 8006f6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f6c:	e029      	b.n	8006fc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fa11 	bl	8007398 <USBD_CtlError>
        err++;
 8006f76:	7afb      	ldrb	r3, [r7, #11]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f7c:	e021      	b.n	8006fc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	7c1b      	ldrb	r3, [r3, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10d      	bne.n	8006fa2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8e:	f107 0208 	add.w	r2, r7, #8
 8006f92:	4610      	mov	r0, r2
 8006f94:	4798      	blx	r3
 8006f96:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	2207      	movs	r2, #7
 8006f9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fa0:	e00f      	b.n	8006fc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f9f7 	bl	8007398 <USBD_CtlError>
        err++;
 8006faa:	7afb      	ldrb	r3, [r7, #11]
 8006fac:	3301      	adds	r3, #1
 8006fae:	72fb      	strb	r3, [r7, #11]
      break;
 8006fb0:	e007      	b.n	8006fc2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f9ef 	bl	8007398 <USBD_CtlError>
      err++;
 8006fba:	7afb      	ldrb	r3, [r7, #11]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	72fb      	strb	r3, [r7, #11]
      break;
 8006fc0:	bf00      	nop
  }

  if (err != 0U)
 8006fc2:	7afb      	ldrb	r3, [r7, #11]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d11e      	bne.n	8007006 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	88db      	ldrh	r3, [r3, #6]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d016      	beq.n	8006ffe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006fd0:	893b      	ldrh	r3, [r7, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00e      	beq.n	8006ff4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	88da      	ldrh	r2, [r3, #6]
 8006fda:	893b      	ldrh	r3, [r7, #8]
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	bf28      	it	cs
 8006fe0:	4613      	movcs	r3, r2
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006fe6:	893b      	ldrh	r3, [r7, #8]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	68f9      	ldr	r1, [r7, #12]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fa44 	bl	800747a <USBD_CtlSendData>
 8006ff2:	e009      	b.n	8007008 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f9ce 	bl	8007398 <USBD_CtlError>
 8006ffc:	e004      	b.n	8007008 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fa95 	bl	800752e <USBD_CtlSendStatus>
 8007004:	e000      	b.n	8007008 <USBD_GetDescriptor+0x2cc>
    return;
 8007006:	bf00      	nop
  }
}
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop

08007010 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	889b      	ldrh	r3, [r3, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d131      	bne.n	8007086 <USBD_SetAddress+0x76>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	88db      	ldrh	r3, [r3, #6]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d12d      	bne.n	8007086 <USBD_SetAddress+0x76>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	885b      	ldrh	r3, [r3, #2]
 800702e:	2b7f      	cmp	r3, #127	; 0x7f
 8007030:	d829      	bhi.n	8007086 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	885b      	ldrh	r3, [r3, #2]
 8007036:	b2db      	uxtb	r3, r3
 8007038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800703c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b03      	cmp	r3, #3
 8007048:	d104      	bne.n	8007054 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f9a3 	bl	8007398 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007052:	e01d      	b.n	8007090 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	7bfa      	ldrb	r2, [r7, #15]
 8007058:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800705c:	7bfb      	ldrb	r3, [r7, #15]
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 feff 	bl	8007e64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fa61 	bl	800752e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d004      	beq.n	800707c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2202      	movs	r2, #2
 8007076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800707a:	e009      	b.n	8007090 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007084:	e004      	b.n	8007090 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007086:	6839      	ldr	r1, [r7, #0]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f985 	bl	8007398 <USBD_CtlError>
  }
}
 800708e:	bf00      	nop
 8007090:	bf00      	nop
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	885b      	ldrh	r3, [r3, #2]
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	4b4c      	ldr	r3, [pc, #304]	; (80071e0 <USBD_SetConfig+0x148>)
 80070ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80070b0:	4b4b      	ldr	r3, [pc, #300]	; (80071e0 <USBD_SetConfig+0x148>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d905      	bls.n	80070c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f96c 	bl	8007398 <USBD_CtlError>
    return USBD_FAIL;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e088      	b.n	80071d6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d002      	beq.n	80070d6 <USBD_SetConfig+0x3e>
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d025      	beq.n	8007120 <USBD_SetConfig+0x88>
 80070d4:	e071      	b.n	80071ba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80070d6:	4b42      	ldr	r3, [pc, #264]	; (80071e0 <USBD_SetConfig+0x148>)
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d01c      	beq.n	8007118 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80070de:	4b40      	ldr	r3, [pc, #256]	; (80071e0 <USBD_SetConfig+0x148>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	461a      	mov	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070e8:	4b3d      	ldr	r3, [pc, #244]	; (80071e0 <USBD_SetConfig+0x148>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7ff f948 	bl	8006384 <USBD_SetClassConfig>
 80070f4:	4603      	mov	r3, r0
 80070f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d004      	beq.n	8007108 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f949 	bl	8007398 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007106:	e065      	b.n	80071d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fa10 	bl	800752e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2203      	movs	r2, #3
 8007112:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007116:	e05d      	b.n	80071d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fa08 	bl	800752e <USBD_CtlSendStatus>
      break;
 800711e:	e059      	b.n	80071d4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007120:	4b2f      	ldr	r3, [pc, #188]	; (80071e0 <USBD_SetConfig+0x148>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d112      	bne.n	800714e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007130:	4b2b      	ldr	r3, [pc, #172]	; (80071e0 <USBD_SetConfig+0x148>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	461a      	mov	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800713a:	4b29      	ldr	r3, [pc, #164]	; (80071e0 <USBD_SetConfig+0x148>)
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7ff f93b 	bl	80063bc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f9f1 	bl	800752e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800714c:	e042      	b.n	80071d4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800714e:	4b24      	ldr	r3, [pc, #144]	; (80071e0 <USBD_SetConfig+0x148>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	461a      	mov	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	429a      	cmp	r2, r3
 800715a:	d02a      	beq.n	80071b2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	b2db      	uxtb	r3, r3
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7ff f929 	bl	80063bc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800716a:	4b1d      	ldr	r3, [pc, #116]	; (80071e0 <USBD_SetConfig+0x148>)
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007174:	4b1a      	ldr	r3, [pc, #104]	; (80071e0 <USBD_SetConfig+0x148>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	4619      	mov	r1, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7ff f902 	bl	8006384 <USBD_SetClassConfig>
 8007180:	4603      	mov	r3, r0
 8007182:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007184:	7bfb      	ldrb	r3, [r7, #15]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00f      	beq.n	80071aa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f903 	bl	8007398 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff f90e 	bl	80063bc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80071a8:	e014      	b.n	80071d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f9bf 	bl	800752e <USBD_CtlSendStatus>
      break;
 80071b0:	e010      	b.n	80071d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f9bb 	bl	800752e <USBD_CtlSendStatus>
      break;
 80071b8:	e00c      	b.n	80071d4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80071ba:	6839      	ldr	r1, [r7, #0]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f8eb 	bl	8007398 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071c2:	4b07      	ldr	r3, [pc, #28]	; (80071e0 <USBD_SetConfig+0x148>)
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7ff f8f7 	bl	80063bc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80071ce:	2303      	movs	r3, #3
 80071d0:	73fb      	strb	r3, [r7, #15]
      break;
 80071d2:	bf00      	nop
  }

  return ret;
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	2000020c 	.word	0x2000020c

080071e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	88db      	ldrh	r3, [r3, #6]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d004      	beq.n	8007200 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f8cd 	bl	8007398 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80071fe:	e023      	b.n	8007248 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b02      	cmp	r3, #2
 800720a:	dc02      	bgt.n	8007212 <USBD_GetConfig+0x2e>
 800720c:	2b00      	cmp	r3, #0
 800720e:	dc03      	bgt.n	8007218 <USBD_GetConfig+0x34>
 8007210:	e015      	b.n	800723e <USBD_GetConfig+0x5a>
 8007212:	2b03      	cmp	r3, #3
 8007214:	d00b      	beq.n	800722e <USBD_GetConfig+0x4a>
 8007216:	e012      	b.n	800723e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	3308      	adds	r3, #8
 8007222:	2201      	movs	r2, #1
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f927 	bl	800747a <USBD_CtlSendData>
        break;
 800722c:	e00c      	b.n	8007248 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3304      	adds	r3, #4
 8007232:	2201      	movs	r2, #1
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f91f 	bl	800747a <USBD_CtlSendData>
        break;
 800723c:	e004      	b.n	8007248 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f8a9 	bl	8007398 <USBD_CtlError>
        break;
 8007246:	bf00      	nop
}
 8007248:	bf00      	nop
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007260:	b2db      	uxtb	r3, r3
 8007262:	3b01      	subs	r3, #1
 8007264:	2b02      	cmp	r3, #2
 8007266:	d81e      	bhi.n	80072a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	88db      	ldrh	r3, [r3, #6]
 800726c:	2b02      	cmp	r3, #2
 800726e:	d004      	beq.n	800727a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f890 	bl	8007398 <USBD_CtlError>
        break;
 8007278:	e01a      	b.n	80072b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007286:	2b00      	cmp	r3, #0
 8007288:	d005      	beq.n	8007296 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f043 0202 	orr.w	r2, r3, #2
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	330c      	adds	r3, #12
 800729a:	2202      	movs	r2, #2
 800729c:	4619      	mov	r1, r3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f8eb 	bl	800747a <USBD_CtlSendData>
      break;
 80072a4:	e004      	b.n	80072b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f875 	bl	8007398 <USBD_CtlError>
      break;
 80072ae:	bf00      	nop
  }
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	885b      	ldrh	r3, [r3, #2]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d106      	bne.n	80072d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f92b 	bl	800752e <USBD_CtlSendStatus>
  }
}
 80072d8:	bf00      	nop
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	3b01      	subs	r3, #1
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d80b      	bhi.n	8007310 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	885b      	ldrh	r3, [r3, #2]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d10c      	bne.n	800731a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f910 	bl	800752e <USBD_CtlSendStatus>
      }
      break;
 800730e:	e004      	b.n	800731a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f840 	bl	8007398 <USBD_CtlError>
      break;
 8007318:	e000      	b.n	800731c <USBD_ClrFeature+0x3c>
      break;
 800731a:	bf00      	nop
  }
}
 800731c:	bf00      	nop
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	781a      	ldrb	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	3301      	adds	r3, #1
 800733e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	781a      	ldrb	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3301      	adds	r3, #1
 800734c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f7ff fabb 	bl	80068ca <SWAPBYTE>
 8007354:	4603      	mov	r3, r0
 8007356:	461a      	mov	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3301      	adds	r3, #1
 8007360:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3301      	adds	r3, #1
 8007366:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f7ff faae 	bl	80068ca <SWAPBYTE>
 800736e:	4603      	mov	r3, r0
 8007370:	461a      	mov	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3301      	adds	r3, #1
 800737a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3301      	adds	r3, #1
 8007380:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f7ff faa1 	bl	80068ca <SWAPBYTE>
 8007388:	4603      	mov	r3, r0
 800738a:	461a      	mov	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	80da      	strh	r2, [r3, #6]
}
 8007390:	bf00      	nop
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80073a2:	2180      	movs	r1, #128	; 0x80
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fcf3 	bl	8007d90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80073aa:	2100      	movs	r1, #0
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fcef 	bl	8007d90 <USBD_LL_StallEP>
}
 80073b2:	bf00      	nop
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b086      	sub	sp, #24
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d036      	beq.n	800743e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80073d4:	6938      	ldr	r0, [r7, #16]
 80073d6:	f000 f836 	bl	8007446 <USBD_GetLen>
 80073da:	4603      	mov	r3, r0
 80073dc:	3301      	adds	r3, #1
 80073de:	b29b      	uxth	r3, r3
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80073e8:	7dfb      	ldrb	r3, [r7, #23]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	4413      	add	r3, r2
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	7812      	ldrb	r2, [r2, #0]
 80073f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80073f4:	7dfb      	ldrb	r3, [r7, #23]
 80073f6:	3301      	adds	r3, #1
 80073f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	4413      	add	r3, r2
 8007400:	2203      	movs	r2, #3
 8007402:	701a      	strb	r2, [r3, #0]
  idx++;
 8007404:	7dfb      	ldrb	r3, [r7, #23]
 8007406:	3301      	adds	r3, #1
 8007408:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800740a:	e013      	b.n	8007434 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	4413      	add	r3, r2
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	7812      	ldrb	r2, [r2, #0]
 8007416:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	3301      	adds	r3, #1
 800741c:	613b      	str	r3, [r7, #16]
    idx++;
 800741e:	7dfb      	ldrb	r3, [r7, #23]
 8007420:	3301      	adds	r3, #1
 8007422:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007424:	7dfb      	ldrb	r3, [r7, #23]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	4413      	add	r3, r2
 800742a:	2200      	movs	r2, #0
 800742c:	701a      	strb	r2, [r3, #0]
    idx++;
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	3301      	adds	r3, #1
 8007432:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e7      	bne.n	800740c <USBD_GetString+0x52>
 800743c:	e000      	b.n	8007440 <USBD_GetString+0x86>
    return;
 800743e:	bf00      	nop
  }
}
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007446:	b480      	push	{r7}
 8007448:	b085      	sub	sp, #20
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007456:	e005      	b.n	8007464 <USBD_GetLen+0x1e>
  {
    len++;
 8007458:	7bfb      	ldrb	r3, [r7, #15]
 800745a:	3301      	adds	r3, #1
 800745c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	3301      	adds	r3, #1
 8007462:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1f5      	bne.n	8007458 <USBD_GetLen+0x12>
  }

  return len;
 800746c:	7bfb      	ldrb	r3, [r7, #15]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b084      	sub	sp, #16
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	60b9      	str	r1, [r7, #8]
 8007484:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2202      	movs	r2, #2
 800748a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	2100      	movs	r1, #0
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 fcfe 	bl	8007ea2 <USBD_LL_Transmit>

  return USBD_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	2100      	movs	r1, #0
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 fced 	bl	8007ea2 <USBD_LL_Transmit>

  return USBD_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2203      	movs	r2, #3
 80074e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	2100      	movs	r1, #0
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 fcf1 	bl	8007ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	2100      	movs	r1, #0
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 fce0 	bl	8007ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2204      	movs	r2, #4
 800753a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800753e:	2300      	movs	r3, #0
 8007540:	2200      	movs	r2, #0
 8007542:	2100      	movs	r1, #0
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fcac 	bl	8007ea2 <USBD_LL_Transmit>

  return USBD_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2205      	movs	r2, #5
 8007560:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007564:	2300      	movs	r3, #0
 8007566:	2200      	movs	r2, #0
 8007568:	2100      	movs	r1, #0
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fcba 	bl	8007ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007580:	2200      	movs	r2, #0
 8007582:	4912      	ldr	r1, [pc, #72]	; (80075cc <MX_USB_DEVICE_Init+0x50>)
 8007584:	4812      	ldr	r0, [pc, #72]	; (80075d0 <MX_USB_DEVICE_Init+0x54>)
 8007586:	f7fe fe8f 	bl	80062a8 <USBD_Init>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007590:	f7f9 fc34 	bl	8000dfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007594:	490f      	ldr	r1, [pc, #60]	; (80075d4 <MX_USB_DEVICE_Init+0x58>)
 8007596:	480e      	ldr	r0, [pc, #56]	; (80075d0 <MX_USB_DEVICE_Init+0x54>)
 8007598:	f7fe feb6 	bl	8006308 <USBD_RegisterClass>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80075a2:	f7f9 fc2b 	bl	8000dfc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80075a6:	490c      	ldr	r1, [pc, #48]	; (80075d8 <MX_USB_DEVICE_Init+0x5c>)
 80075a8:	4809      	ldr	r0, [pc, #36]	; (80075d0 <MX_USB_DEVICE_Init+0x54>)
 80075aa:	f7fe fdd7 	bl	800615c <USBD_CDC_RegisterInterface>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80075b4:	f7f9 fc22 	bl	8000dfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80075b8:	4805      	ldr	r0, [pc, #20]	; (80075d0 <MX_USB_DEVICE_Init+0x54>)
 80075ba:	f7fe fecc 	bl	8006356 <USBD_Start>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80075c4:	f7f9 fc1a 	bl	8000dfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80075c8:	bf00      	nop
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20000130 	.word	0x20000130
 80075d0:	20000864 	.word	0x20000864
 80075d4:	20000018 	.word	0x20000018
 80075d8:	2000011c 	.word	0x2000011c

080075dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80075e0:	2200      	movs	r2, #0
 80075e2:	4905      	ldr	r1, [pc, #20]	; (80075f8 <CDC_Init_FS+0x1c>)
 80075e4:	4805      	ldr	r0, [pc, #20]	; (80075fc <CDC_Init_FS+0x20>)
 80075e6:	f7fe fdce 	bl	8006186 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80075ea:	4905      	ldr	r1, [pc, #20]	; (8007600 <CDC_Init_FS+0x24>)
 80075ec:	4803      	ldr	r0, [pc, #12]	; (80075fc <CDC_Init_FS+0x20>)
 80075ee:	f7fe fde8 	bl	80061c2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80075f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	20001334 	.word	0x20001334
 80075fc:	20000864 	.word	0x20000864
 8007600:	20000b34 	.word	0x20000b34

08007604 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007604:	b480      	push	{r7}
 8007606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007608:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800760a:	4618      	mov	r0, r3
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	4603      	mov	r3, r0
 800761c:	6039      	str	r1, [r7, #0]
 800761e:	71fb      	strb	r3, [r7, #7]
 8007620:	4613      	mov	r3, r2
 8007622:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007624:	79fb      	ldrb	r3, [r7, #7]
 8007626:	2b23      	cmp	r3, #35	; 0x23
 8007628:	d84a      	bhi.n	80076c0 <CDC_Control_FS+0xac>
 800762a:	a201      	add	r2, pc, #4	; (adr r2, 8007630 <CDC_Control_FS+0x1c>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	080076c1 	.word	0x080076c1
 8007634:	080076c1 	.word	0x080076c1
 8007638:	080076c1 	.word	0x080076c1
 800763c:	080076c1 	.word	0x080076c1
 8007640:	080076c1 	.word	0x080076c1
 8007644:	080076c1 	.word	0x080076c1
 8007648:	080076c1 	.word	0x080076c1
 800764c:	080076c1 	.word	0x080076c1
 8007650:	080076c1 	.word	0x080076c1
 8007654:	080076c1 	.word	0x080076c1
 8007658:	080076c1 	.word	0x080076c1
 800765c:	080076c1 	.word	0x080076c1
 8007660:	080076c1 	.word	0x080076c1
 8007664:	080076c1 	.word	0x080076c1
 8007668:	080076c1 	.word	0x080076c1
 800766c:	080076c1 	.word	0x080076c1
 8007670:	080076c1 	.word	0x080076c1
 8007674:	080076c1 	.word	0x080076c1
 8007678:	080076c1 	.word	0x080076c1
 800767c:	080076c1 	.word	0x080076c1
 8007680:	080076c1 	.word	0x080076c1
 8007684:	080076c1 	.word	0x080076c1
 8007688:	080076c1 	.word	0x080076c1
 800768c:	080076c1 	.word	0x080076c1
 8007690:	080076c1 	.word	0x080076c1
 8007694:	080076c1 	.word	0x080076c1
 8007698:	080076c1 	.word	0x080076c1
 800769c:	080076c1 	.word	0x080076c1
 80076a0:	080076c1 	.word	0x080076c1
 80076a4:	080076c1 	.word	0x080076c1
 80076a8:	080076c1 	.word	0x080076c1
 80076ac:	080076c1 	.word	0x080076c1
 80076b0:	080076c1 	.word	0x080076c1
 80076b4:	080076c1 	.word	0x080076c1
 80076b8:	080076c1 	.word	0x080076c1
 80076bc:	080076c1 	.word	0x080076c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80076c0:	bf00      	nop
  }

  return (USBD_OK);
 80076c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80076da:	6879      	ldr	r1, [r7, #4]
 80076dc:	4811      	ldr	r0, [pc, #68]	; (8007724 <CDC_Receive_FS+0x54>)
 80076de:	f7fe fd70 	bl	80061c2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80076e2:	4810      	ldr	r0, [pc, #64]	; (8007724 <CDC_Receive_FS+0x54>)
 80076e4:	f7fe fdb6 	bl	8006254 <USBD_CDC_ReceivePacket>
   extern uint8_t ReceivedData[40]; // Tablica przechowujaca odebrane dane
   extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych

   // Wyczyszczenie tablicy odebranych danych
   uint8_t iter;
   for(iter = 0; iter<40; ++iter){
 80076e8:	2300      	movs	r3, #0
 80076ea:	73fb      	strb	r3, [r7, #15]
 80076ec:	e006      	b.n	80076fc <CDC_Receive_FS+0x2c>
 	  ReceivedData[iter] = 0;
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
 80076f0:	4a0d      	ldr	r2, [pc, #52]	; (8007728 <CDC_Receive_FS+0x58>)
 80076f2:	2100      	movs	r1, #0
 80076f4:	54d1      	strb	r1, [r2, r3]
   for(iter = 0; iter<40; ++iter){
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	3301      	adds	r3, #1
 80076fa:	73fb      	strb	r3, [r7, #15]
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
 80076fe:	2b27      	cmp	r3, #39	; 0x27
 8007700:	d9f5      	bls.n	80076ee <CDC_Receive_FS+0x1e>
   }

   strlcpy(ReceivedData, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3301      	adds	r3, #1
 8007708:	461a      	mov	r2, r3
 800770a:	6879      	ldr	r1, [r7, #4]
 800770c:	4806      	ldr	r0, [pc, #24]	; (8007728 <CDC_Receive_FS+0x58>)
 800770e:	f000 fcc0 	bl	8008092 <strlcpy>
   ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 8007712:	4b06      	ldr	r3, [pc, #24]	; (800772c <CDC_Receive_FS+0x5c>)
 8007714:	2201      	movs	r2, #1
 8007716:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 8007718:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	20000864 	.word	0x20000864
 8007728:	200006d8 	.word	0x200006d8
 800772c:	20000204 	.word	0x20000204

08007730 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007740:	4b0d      	ldr	r3, [pc, #52]	; (8007778 <CDC_Transmit_FS+0x48>)
 8007742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007746:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007752:	2301      	movs	r3, #1
 8007754:	e00b      	b.n	800776e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007756:	887b      	ldrh	r3, [r7, #2]
 8007758:	461a      	mov	r2, r3
 800775a:	6879      	ldr	r1, [r7, #4]
 800775c:	4806      	ldr	r0, [pc, #24]	; (8007778 <CDC_Transmit_FS+0x48>)
 800775e:	f7fe fd12 	bl	8006186 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007762:	4805      	ldr	r0, [pc, #20]	; (8007778 <CDC_Transmit_FS+0x48>)
 8007764:	f7fe fd46 	bl	80061f4 <USBD_CDC_TransmitPacket>
 8007768:	4603      	mov	r3, r0
 800776a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800776c:	7bfb      	ldrb	r3, [r7, #15]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	20000864 	.word	0x20000864

0800777c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	4613      	mov	r3, r2
 8007788:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800778e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007792:	4618      	mov	r0, r3
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
	...

080077a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	6039      	str	r1, [r7, #0]
 80077aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2212      	movs	r2, #18
 80077b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077b2:	4b03      	ldr	r3, [pc, #12]	; (80077c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	2000014c 	.word	0x2000014c

080077c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	4603      	mov	r3, r0
 80077cc:	6039      	str	r1, [r7, #0]
 80077ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2204      	movs	r2, #4
 80077d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077d6:	4b03      	ldr	r3, [pc, #12]	; (80077e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077d8:	4618      	mov	r0, r3
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	20000160 	.word	0x20000160

080077e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	4603      	mov	r3, r0
 80077f0:	6039      	str	r1, [r7, #0]
 80077f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077f4:	79fb      	ldrb	r3, [r7, #7]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d105      	bne.n	8007806 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	4907      	ldr	r1, [pc, #28]	; (800781c <USBD_FS_ProductStrDescriptor+0x34>)
 80077fe:	4808      	ldr	r0, [pc, #32]	; (8007820 <USBD_FS_ProductStrDescriptor+0x38>)
 8007800:	f7ff fddb 	bl	80073ba <USBD_GetString>
 8007804:	e004      	b.n	8007810 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	4904      	ldr	r1, [pc, #16]	; (800781c <USBD_FS_ProductStrDescriptor+0x34>)
 800780a:	4805      	ldr	r0, [pc, #20]	; (8007820 <USBD_FS_ProductStrDescriptor+0x38>)
 800780c:	f7ff fdd5 	bl	80073ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8007810:	4b02      	ldr	r3, [pc, #8]	; (800781c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20001b34 	.word	0x20001b34
 8007820:	08008aac 	.word	0x08008aac

08007824 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	4603      	mov	r3, r0
 800782c:	6039      	str	r1, [r7, #0]
 800782e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	4904      	ldr	r1, [pc, #16]	; (8007844 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007834:	4804      	ldr	r0, [pc, #16]	; (8007848 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007836:	f7ff fdc0 	bl	80073ba <USBD_GetString>
  return USBD_StrDesc;
 800783a:	4b02      	ldr	r3, [pc, #8]	; (8007844 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800783c:	4618      	mov	r0, r3
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	20001b34 	.word	0x20001b34
 8007848:	08008ac4 	.word	0x08008ac4

0800784c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	4603      	mov	r3, r0
 8007854:	6039      	str	r1, [r7, #0]
 8007856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	221a      	movs	r2, #26
 800785c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800785e:	f000 f843 	bl	80078e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007862:	4b02      	ldr	r3, [pc, #8]	; (800786c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	20000164 	.word	0x20000164

08007870 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	6039      	str	r1, [r7, #0]
 800787a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800787c:	79fb      	ldrb	r3, [r7, #7]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d105      	bne.n	800788e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	4907      	ldr	r1, [pc, #28]	; (80078a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007886:	4808      	ldr	r0, [pc, #32]	; (80078a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007888:	f7ff fd97 	bl	80073ba <USBD_GetString>
 800788c:	e004      	b.n	8007898 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	4904      	ldr	r1, [pc, #16]	; (80078a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007892:	4805      	ldr	r0, [pc, #20]	; (80078a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007894:	f7ff fd91 	bl	80073ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8007898:	4b02      	ldr	r3, [pc, #8]	; (80078a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20001b34 	.word	0x20001b34
 80078a8:	08008ad8 	.word	0x08008ad8

080078ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	4603      	mov	r3, r0
 80078b4:	6039      	str	r1, [r7, #0]
 80078b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d105      	bne.n	80078ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	4907      	ldr	r1, [pc, #28]	; (80078e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078c2:	4808      	ldr	r0, [pc, #32]	; (80078e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078c4:	f7ff fd79 	bl	80073ba <USBD_GetString>
 80078c8:	e004      	b.n	80078d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	4904      	ldr	r1, [pc, #16]	; (80078e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078ce:	4805      	ldr	r0, [pc, #20]	; (80078e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078d0:	f7ff fd73 	bl	80073ba <USBD_GetString>
  }
  return USBD_StrDesc;
 80078d4:	4b02      	ldr	r3, [pc, #8]	; (80078e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20001b34 	.word	0x20001b34
 80078e4:	08008ae4 	.word	0x08008ae4

080078e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078ee:	4b0f      	ldr	r3, [pc, #60]	; (800792c <Get_SerialNum+0x44>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078f4:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <Get_SerialNum+0x48>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078fa:	4b0e      	ldr	r3, [pc, #56]	; (8007934 <Get_SerialNum+0x4c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4413      	add	r3, r2
 8007906:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d009      	beq.n	8007922 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800790e:	2208      	movs	r2, #8
 8007910:	4909      	ldr	r1, [pc, #36]	; (8007938 <Get_SerialNum+0x50>)
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 f814 	bl	8007940 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007918:	2204      	movs	r2, #4
 800791a:	4908      	ldr	r1, [pc, #32]	; (800793c <Get_SerialNum+0x54>)
 800791c:	68b8      	ldr	r0, [r7, #8]
 800791e:	f000 f80f 	bl	8007940 <IntToUnicode>
  }
}
 8007922:	bf00      	nop
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	1fff7a10 	.word	0x1fff7a10
 8007930:	1fff7a14 	.word	0x1fff7a14
 8007934:	1fff7a18 	.word	0x1fff7a18
 8007938:	20000166 	.word	0x20000166
 800793c:	20000176 	.word	0x20000176

08007940 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	4613      	mov	r3, r2
 800794c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800794e:	2300      	movs	r3, #0
 8007950:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007952:	2300      	movs	r3, #0
 8007954:	75fb      	strb	r3, [r7, #23]
 8007956:	e027      	b.n	80079a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	0f1b      	lsrs	r3, r3, #28
 800795c:	2b09      	cmp	r3, #9
 800795e:	d80b      	bhi.n	8007978 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	0f1b      	lsrs	r3, r3, #28
 8007964:	b2da      	uxtb	r2, r3
 8007966:	7dfb      	ldrb	r3, [r7, #23]
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	4619      	mov	r1, r3
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	440b      	add	r3, r1
 8007970:	3230      	adds	r2, #48	; 0x30
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	e00a      	b.n	800798e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	0f1b      	lsrs	r3, r3, #28
 800797c:	b2da      	uxtb	r2, r3
 800797e:	7dfb      	ldrb	r3, [r7, #23]
 8007980:	005b      	lsls	r3, r3, #1
 8007982:	4619      	mov	r1, r3
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	440b      	add	r3, r1
 8007988:	3237      	adds	r2, #55	; 0x37
 800798a:	b2d2      	uxtb	r2, r2
 800798c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007994:	7dfb      	ldrb	r3, [r7, #23]
 8007996:	005b      	lsls	r3, r3, #1
 8007998:	3301      	adds	r3, #1
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	4413      	add	r3, r2
 800799e:	2200      	movs	r2, #0
 80079a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
 80079a4:	3301      	adds	r3, #1
 80079a6:	75fb      	strb	r3, [r7, #23]
 80079a8:	7dfa      	ldrb	r2, [r7, #23]
 80079aa:	79fb      	ldrb	r3, [r7, #7]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d3d3      	bcc.n	8007958 <IntToUnicode+0x18>
  }
}
 80079b0:	bf00      	nop
 80079b2:	bf00      	nop
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
	...

080079c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08a      	sub	sp, #40	; 0x28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079c8:	f107 0314 	add.w	r3, r7, #20
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]
 80079d0:	605a      	str	r2, [r3, #4]
 80079d2:	609a      	str	r2, [r3, #8]
 80079d4:	60da      	str	r2, [r3, #12]
 80079d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079e0:	d13a      	bne.n	8007a58 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079e2:	2300      	movs	r3, #0
 80079e4:	613b      	str	r3, [r7, #16]
 80079e6:	4b1e      	ldr	r3, [pc, #120]	; (8007a60 <HAL_PCD_MspInit+0xa0>)
 80079e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ea:	4a1d      	ldr	r2, [pc, #116]	; (8007a60 <HAL_PCD_MspInit+0xa0>)
 80079ec:	f043 0301 	orr.w	r3, r3, #1
 80079f0:	6313      	str	r3, [r2, #48]	; 0x30
 80079f2:	4b1b      	ldr	r3, [pc, #108]	; (8007a60 <HAL_PCD_MspInit+0xa0>)
 80079f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	613b      	str	r3, [r7, #16]
 80079fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80079fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a04:	2302      	movs	r3, #2
 8007a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a10:	230a      	movs	r3, #10
 8007a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a14:	f107 0314 	add.w	r3, r7, #20
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4812      	ldr	r0, [pc, #72]	; (8007a64 <HAL_PCD_MspInit+0xa4>)
 8007a1c:	f7f9 ff78 	bl	8001910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a20:	4b0f      	ldr	r3, [pc, #60]	; (8007a60 <HAL_PCD_MspInit+0xa0>)
 8007a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a24:	4a0e      	ldr	r2, [pc, #56]	; (8007a60 <HAL_PCD_MspInit+0xa0>)
 8007a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a2a:	6353      	str	r3, [r2, #52]	; 0x34
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	4b0b      	ldr	r3, [pc, #44]	; (8007a60 <HAL_PCD_MspInit+0xa0>)
 8007a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a34:	4a0a      	ldr	r2, [pc, #40]	; (8007a60 <HAL_PCD_MspInit+0xa0>)
 8007a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a3a:	6453      	str	r3, [r2, #68]	; 0x44
 8007a3c:	4b08      	ldr	r3, [pc, #32]	; (8007a60 <HAL_PCD_MspInit+0xa0>)
 8007a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	2043      	movs	r0, #67	; 0x43
 8007a4e:	f7f9 ff28 	bl	80018a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a52:	2043      	movs	r0, #67	; 0x43
 8007a54:	f7f9 ff41 	bl	80018da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a58:	bf00      	nop
 8007a5a:	3728      	adds	r7, #40	; 0x28
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	40023800 	.word	0x40023800
 8007a64:	40020000 	.word	0x40020000

08007a68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	f7fe fcb4 	bl	80063ec <USBD_LL_SetupStage>
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007a9e:	78fa      	ldrb	r2, [r7, #3]
 8007aa0:	6879      	ldr	r1, [r7, #4]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	00db      	lsls	r3, r3, #3
 8007aa6:	1a9b      	subs	r3, r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	440b      	add	r3, r1
 8007aac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	78fb      	ldrb	r3, [r7, #3]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	f7fe fcee 	bl	8006496 <USBD_LL_DataOutStage>
}
 8007aba:	bf00      	nop
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b082      	sub	sp, #8
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	460b      	mov	r3, r1
 8007acc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007ad4:	78fa      	ldrb	r2, [r7, #3]
 8007ad6:	6879      	ldr	r1, [r7, #4]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	00db      	lsls	r3, r3, #3
 8007adc:	1a9b      	subs	r3, r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	440b      	add	r3, r1
 8007ae2:	3348      	adds	r3, #72	; 0x48
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	78fb      	ldrb	r3, [r7, #3]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	f7fe fd37 	bl	800655c <USBD_LL_DataInStage>
}
 8007aee:	bf00      	nop
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b082      	sub	sp, #8
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fe fe4b 	bl	80067a0 <USBD_LL_SOF>
}
 8007b0a:	bf00      	nop
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b084      	sub	sp, #16
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d001      	beq.n	8007b2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007b26:	f7f9 f969 	bl	8000dfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b30:	7bfa      	ldrb	r2, [r7, #15]
 8007b32:	4611      	mov	r1, r2
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fe fdf5 	bl	8006724 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fe fda1 	bl	8006688 <USBD_LL_Reset>
}
 8007b46:	bf00      	nop
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe fdf0 	bl	8006744 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	6812      	ldr	r2, [r2, #0]
 8007b72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b76:	f043 0301 	orr.w	r3, r3, #1
 8007b7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d005      	beq.n	8007b90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b84:	4b04      	ldr	r3, [pc, #16]	; (8007b98 <HAL_PCD_SuspendCallback+0x48>)
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	4a03      	ldr	r2, [pc, #12]	; (8007b98 <HAL_PCD_SuspendCallback+0x48>)
 8007b8a:	f043 0306 	orr.w	r3, r3, #6
 8007b8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	e000ed00 	.word	0xe000ed00

08007b9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fe fde0 	bl	8006770 <USBD_LL_Resume>
}
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bca:	78fa      	ldrb	r2, [r7, #3]
 8007bcc:	4611      	mov	r1, r2
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fe fe2e 	bl	8006830 <USBD_LL_IsoOUTIncomplete>
}
 8007bd4:	bf00      	nop
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bee:	78fa      	ldrb	r2, [r7, #3]
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fe fdf6 	bl	80067e4 <USBD_LL_IsoINIncomplete>
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fe fe34 	bl	800687c <USBD_LL_DevConnected>
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fe fe31 	bl	8006892 <USBD_LL_DevDisconnected>
}
 8007c30:	bf00      	nop
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d13c      	bne.n	8007cc2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007c48:	4a20      	ldr	r2, [pc, #128]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a1e      	ldr	r2, [pc, #120]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c58:	4b1c      	ldr	r3, [pc, #112]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007c5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007c60:	4b1a      	ldr	r3, [pc, #104]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c62:	2204      	movs	r2, #4
 8007c64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c66:	4b19      	ldr	r3, [pc, #100]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c68:	2202      	movs	r2, #2
 8007c6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c6c:	4b17      	ldr	r3, [pc, #92]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c72:	4b16      	ldr	r3, [pc, #88]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c74:	2202      	movs	r2, #2
 8007c76:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c78:	4b14      	ldr	r3, [pc, #80]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c7e:	4b13      	ldr	r3, [pc, #76]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c84:	4b11      	ldr	r3, [pc, #68]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007c8a:	4b10      	ldr	r3, [pc, #64]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c90:	4b0e      	ldr	r3, [pc, #56]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c96:	480d      	ldr	r0, [pc, #52]	; (8007ccc <USBD_LL_Init+0x94>)
 8007c98:	f7f9 ffbe 	bl	8001c18 <HAL_PCD_Init>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ca2:	f7f9 f8ab 	bl	8000dfc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ca6:	2180      	movs	r1, #128	; 0x80
 8007ca8:	4808      	ldr	r0, [pc, #32]	; (8007ccc <USBD_LL_Init+0x94>)
 8007caa:	f7fb f91c 	bl	8002ee6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007cae:	2240      	movs	r2, #64	; 0x40
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	4806      	ldr	r0, [pc, #24]	; (8007ccc <USBD_LL_Init+0x94>)
 8007cb4:	f7fb f8d0 	bl	8002e58 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007cb8:	2280      	movs	r2, #128	; 0x80
 8007cba:	2101      	movs	r1, #1
 8007cbc:	4803      	ldr	r0, [pc, #12]	; (8007ccc <USBD_LL_Init+0x94>)
 8007cbe:	f7fb f8cb 	bl	8002e58 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	20001d34 	.word	0x20001d34

08007cd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fa f8b3 	bl	8001e52 <HAL_PCD_Start>
 8007cec:	4603      	mov	r3, r0
 8007cee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 f942 	bl	8007f7c <USBD_Get_USB_Status>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b084      	sub	sp, #16
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	4608      	mov	r0, r1
 8007d10:	4611      	mov	r1, r2
 8007d12:	461a      	mov	r2, r3
 8007d14:	4603      	mov	r3, r0
 8007d16:	70fb      	strb	r3, [r7, #3]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	70bb      	strb	r3, [r7, #2]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d2e:	78bb      	ldrb	r3, [r7, #2]
 8007d30:	883a      	ldrh	r2, [r7, #0]
 8007d32:	78f9      	ldrb	r1, [r7, #3]
 8007d34:	f7fa fc97 	bl	8002666 <HAL_PCD_EP_Open>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 f91c 	bl	8007f7c <USBD_Get_USB_Status>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d6c:	78fa      	ldrb	r2, [r7, #3]
 8007d6e:	4611      	mov	r1, r2
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fa fce0 	bl	8002736 <HAL_PCD_EP_Close>
 8007d76:	4603      	mov	r3, r0
 8007d78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 f8fd 	bl	8007f7c <USBD_Get_USB_Status>
 8007d82:	4603      	mov	r3, r0
 8007d84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d86:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007daa:	78fa      	ldrb	r2, [r7, #3]
 8007dac:	4611      	mov	r1, r2
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fa fdb8 	bl	8002924 <HAL_PCD_EP_SetStall>
 8007db4:	4603      	mov	r3, r0
 8007db6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 f8de 	bl	8007f7c <USBD_Get_USB_Status>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007de8:	78fa      	ldrb	r2, [r7, #3]
 8007dea:	4611      	mov	r1, r2
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fa fdfd 	bl	80029ec <HAL_PCD_EP_ClrStall>
 8007df2:	4603      	mov	r3, r0
 8007df4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 f8bf 	bl	8007f7c <USBD_Get_USB_Status>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e02:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	da0b      	bge.n	8007e40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e2e:	68f9      	ldr	r1, [r7, #12]
 8007e30:	4613      	mov	r3, r2
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	1a9b      	subs	r3, r3, r2
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	440b      	add	r3, r1
 8007e3a:	333e      	adds	r3, #62	; 0x3e
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	e00b      	b.n	8007e58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e46:	68f9      	ldr	r1, [r7, #12]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	00db      	lsls	r3, r3, #3
 8007e4c:	1a9b      	subs	r3, r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	440b      	add	r3, r1
 8007e52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e7e:	78fa      	ldrb	r2, [r7, #3]
 8007e80:	4611      	mov	r1, r2
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fa fbca 	bl	800261c <HAL_PCD_SetAddress>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 f874 	bl	8007f7c <USBD_Get_USB_Status>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b086      	sub	sp, #24
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	603b      	str	r3, [r7, #0]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ec0:	7af9      	ldrb	r1, [r7, #11]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	f7fa fce3 	bl	8002890 <HAL_PCD_EP_Transmit>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 f853 	bl	8007f7c <USBD_Get_USB_Status>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007eda:	7dbb      	ldrb	r3, [r7, #22]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	607a      	str	r2, [r7, #4]
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f02:	7af9      	ldrb	r1, [r7, #11]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	f7fa fc5f 	bl	80027ca <HAL_PCD_EP_Receive>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 f832 	bl	8007f7c <USBD_Get_USB_Status>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f1c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b082      	sub	sp, #8
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f38:	78fa      	ldrb	r2, [r7, #3]
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fa fc8f 	bl	8002860 <HAL_PCD_EP_GetRxCount>
 8007f42:	4603      	mov	r3, r0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f54:	4b03      	ldr	r3, [pc, #12]	; (8007f64 <USBD_static_malloc+0x18>)
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20000210 	.word	0x20000210

08007f68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]

}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4603      	mov	r3, r0
 8007f84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d817      	bhi.n	8007fc0 <USBD_Get_USB_Status+0x44>
 8007f90:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <USBD_Get_USB_Status+0x1c>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08007fa9 	.word	0x08007fa9
 8007f9c:	08007faf 	.word	0x08007faf
 8007fa0:	08007fb5 	.word	0x08007fb5
 8007fa4:	08007fbb 	.word	0x08007fbb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73fb      	strb	r3, [r7, #15]
    break;
 8007fac:	e00b      	b.n	8007fc6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb2:	e008      	b.n	8007fc6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb8:	e005      	b.n	8007fc6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	73fb      	strb	r3, [r7, #15]
    break;
 8007fbe:	e002      	b.n	8007fc6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc4:	bf00      	nop
  }
  return usb_status;
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <__errno>:
 8007fd4:	4b01      	ldr	r3, [pc, #4]	; (8007fdc <__errno+0x8>)
 8007fd6:	6818      	ldr	r0, [r3, #0]
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	20000180 	.word	0x20000180

08007fe0 <__libc_init_array>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	4d0d      	ldr	r5, [pc, #52]	; (8008018 <__libc_init_array+0x38>)
 8007fe4:	4c0d      	ldr	r4, [pc, #52]	; (800801c <__libc_init_array+0x3c>)
 8007fe6:	1b64      	subs	r4, r4, r5
 8007fe8:	10a4      	asrs	r4, r4, #2
 8007fea:	2600      	movs	r6, #0
 8007fec:	42a6      	cmp	r6, r4
 8007fee:	d109      	bne.n	8008004 <__libc_init_array+0x24>
 8007ff0:	4d0b      	ldr	r5, [pc, #44]	; (8008020 <__libc_init_array+0x40>)
 8007ff2:	4c0c      	ldr	r4, [pc, #48]	; (8008024 <__libc_init_array+0x44>)
 8007ff4:	f000 fcfe 	bl	80089f4 <_init>
 8007ff8:	1b64      	subs	r4, r4, r5
 8007ffa:	10a4      	asrs	r4, r4, #2
 8007ffc:	2600      	movs	r6, #0
 8007ffe:	42a6      	cmp	r6, r4
 8008000:	d105      	bne.n	800800e <__libc_init_array+0x2e>
 8008002:	bd70      	pop	{r4, r5, r6, pc}
 8008004:	f855 3b04 	ldr.w	r3, [r5], #4
 8008008:	4798      	blx	r3
 800800a:	3601      	adds	r6, #1
 800800c:	e7ee      	b.n	8007fec <__libc_init_array+0xc>
 800800e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008012:	4798      	blx	r3
 8008014:	3601      	adds	r6, #1
 8008016:	e7f2      	b.n	8007ffe <__libc_init_array+0x1e>
 8008018:	08008c40 	.word	0x08008c40
 800801c:	08008c40 	.word	0x08008c40
 8008020:	08008c40 	.word	0x08008c40
 8008024:	08008c44 	.word	0x08008c44

08008028 <memset>:
 8008028:	4402      	add	r2, r0
 800802a:	4603      	mov	r3, r0
 800802c:	4293      	cmp	r3, r2
 800802e:	d100      	bne.n	8008032 <memset+0xa>
 8008030:	4770      	bx	lr
 8008032:	f803 1b01 	strb.w	r1, [r3], #1
 8008036:	e7f9      	b.n	800802c <memset+0x4>

08008038 <siprintf>:
 8008038:	b40e      	push	{r1, r2, r3}
 800803a:	b500      	push	{lr}
 800803c:	b09c      	sub	sp, #112	; 0x70
 800803e:	ab1d      	add	r3, sp, #116	; 0x74
 8008040:	9002      	str	r0, [sp, #8]
 8008042:	9006      	str	r0, [sp, #24]
 8008044:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008048:	4809      	ldr	r0, [pc, #36]	; (8008070 <siprintf+0x38>)
 800804a:	9107      	str	r1, [sp, #28]
 800804c:	9104      	str	r1, [sp, #16]
 800804e:	4909      	ldr	r1, [pc, #36]	; (8008074 <siprintf+0x3c>)
 8008050:	f853 2b04 	ldr.w	r2, [r3], #4
 8008054:	9105      	str	r1, [sp, #20]
 8008056:	6800      	ldr	r0, [r0, #0]
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	a902      	add	r1, sp, #8
 800805c:	f000 f918 	bl	8008290 <_svfiprintf_r>
 8008060:	9b02      	ldr	r3, [sp, #8]
 8008062:	2200      	movs	r2, #0
 8008064:	701a      	strb	r2, [r3, #0]
 8008066:	b01c      	add	sp, #112	; 0x70
 8008068:	f85d eb04 	ldr.w	lr, [sp], #4
 800806c:	b003      	add	sp, #12
 800806e:	4770      	bx	lr
 8008070:	20000180 	.word	0x20000180
 8008074:	ffff0208 	.word	0xffff0208

08008078 <strchr>:
 8008078:	b2c9      	uxtb	r1, r1
 800807a:	4603      	mov	r3, r0
 800807c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008080:	b11a      	cbz	r2, 800808a <strchr+0x12>
 8008082:	428a      	cmp	r2, r1
 8008084:	d1f9      	bne.n	800807a <strchr+0x2>
 8008086:	4618      	mov	r0, r3
 8008088:	4770      	bx	lr
 800808a:	2900      	cmp	r1, #0
 800808c:	bf18      	it	ne
 800808e:	2300      	movne	r3, #0
 8008090:	e7f9      	b.n	8008086 <strchr+0xe>

08008092 <strlcpy>:
 8008092:	b510      	push	{r4, lr}
 8008094:	460b      	mov	r3, r1
 8008096:	b162      	cbz	r2, 80080b2 <strlcpy+0x20>
 8008098:	3a01      	subs	r2, #1
 800809a:	d008      	beq.n	80080ae <strlcpy+0x1c>
 800809c:	f813 4b01 	ldrb.w	r4, [r3], #1
 80080a0:	f800 4b01 	strb.w	r4, [r0], #1
 80080a4:	2c00      	cmp	r4, #0
 80080a6:	d1f7      	bne.n	8008098 <strlcpy+0x6>
 80080a8:	1a58      	subs	r0, r3, r1
 80080aa:	3801      	subs	r0, #1
 80080ac:	bd10      	pop	{r4, pc}
 80080ae:	2200      	movs	r2, #0
 80080b0:	7002      	strb	r2, [r0, #0]
 80080b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080b6:	2a00      	cmp	r2, #0
 80080b8:	d1fb      	bne.n	80080b2 <strlcpy+0x20>
 80080ba:	e7f5      	b.n	80080a8 <strlcpy+0x16>

080080bc <_strtol_l.isra.0>:
 80080bc:	2b01      	cmp	r3, #1
 80080be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c2:	d001      	beq.n	80080c8 <_strtol_l.isra.0+0xc>
 80080c4:	2b24      	cmp	r3, #36	; 0x24
 80080c6:	d906      	bls.n	80080d6 <_strtol_l.isra.0+0x1a>
 80080c8:	f7ff ff84 	bl	8007fd4 <__errno>
 80080cc:	2316      	movs	r3, #22
 80080ce:	6003      	str	r3, [r0, #0]
 80080d0:	2000      	movs	r0, #0
 80080d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d6:	4f3a      	ldr	r7, [pc, #232]	; (80081c0 <_strtol_l.isra.0+0x104>)
 80080d8:	468e      	mov	lr, r1
 80080da:	4676      	mov	r6, lr
 80080dc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80080e0:	5de5      	ldrb	r5, [r4, r7]
 80080e2:	f015 0508 	ands.w	r5, r5, #8
 80080e6:	d1f8      	bne.n	80080da <_strtol_l.isra.0+0x1e>
 80080e8:	2c2d      	cmp	r4, #45	; 0x2d
 80080ea:	d134      	bne.n	8008156 <_strtol_l.isra.0+0x9a>
 80080ec:	f89e 4000 	ldrb.w	r4, [lr]
 80080f0:	f04f 0801 	mov.w	r8, #1
 80080f4:	f106 0e02 	add.w	lr, r6, #2
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d05c      	beq.n	80081b6 <_strtol_l.isra.0+0xfa>
 80080fc:	2b10      	cmp	r3, #16
 80080fe:	d10c      	bne.n	800811a <_strtol_l.isra.0+0x5e>
 8008100:	2c30      	cmp	r4, #48	; 0x30
 8008102:	d10a      	bne.n	800811a <_strtol_l.isra.0+0x5e>
 8008104:	f89e 4000 	ldrb.w	r4, [lr]
 8008108:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800810c:	2c58      	cmp	r4, #88	; 0x58
 800810e:	d14d      	bne.n	80081ac <_strtol_l.isra.0+0xf0>
 8008110:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008114:	2310      	movs	r3, #16
 8008116:	f10e 0e02 	add.w	lr, lr, #2
 800811a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800811e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008122:	2600      	movs	r6, #0
 8008124:	fbbc f9f3 	udiv	r9, ip, r3
 8008128:	4635      	mov	r5, r6
 800812a:	fb03 ca19 	mls	sl, r3, r9, ip
 800812e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008132:	2f09      	cmp	r7, #9
 8008134:	d818      	bhi.n	8008168 <_strtol_l.isra.0+0xac>
 8008136:	463c      	mov	r4, r7
 8008138:	42a3      	cmp	r3, r4
 800813a:	dd24      	ble.n	8008186 <_strtol_l.isra.0+0xca>
 800813c:	2e00      	cmp	r6, #0
 800813e:	db1f      	blt.n	8008180 <_strtol_l.isra.0+0xc4>
 8008140:	45a9      	cmp	r9, r5
 8008142:	d31d      	bcc.n	8008180 <_strtol_l.isra.0+0xc4>
 8008144:	d101      	bne.n	800814a <_strtol_l.isra.0+0x8e>
 8008146:	45a2      	cmp	sl, r4
 8008148:	db1a      	blt.n	8008180 <_strtol_l.isra.0+0xc4>
 800814a:	fb05 4503 	mla	r5, r5, r3, r4
 800814e:	2601      	movs	r6, #1
 8008150:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008154:	e7eb      	b.n	800812e <_strtol_l.isra.0+0x72>
 8008156:	2c2b      	cmp	r4, #43	; 0x2b
 8008158:	bf08      	it	eq
 800815a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800815e:	46a8      	mov	r8, r5
 8008160:	bf08      	it	eq
 8008162:	f106 0e02 	addeq.w	lr, r6, #2
 8008166:	e7c7      	b.n	80080f8 <_strtol_l.isra.0+0x3c>
 8008168:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800816c:	2f19      	cmp	r7, #25
 800816e:	d801      	bhi.n	8008174 <_strtol_l.isra.0+0xb8>
 8008170:	3c37      	subs	r4, #55	; 0x37
 8008172:	e7e1      	b.n	8008138 <_strtol_l.isra.0+0x7c>
 8008174:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008178:	2f19      	cmp	r7, #25
 800817a:	d804      	bhi.n	8008186 <_strtol_l.isra.0+0xca>
 800817c:	3c57      	subs	r4, #87	; 0x57
 800817e:	e7db      	b.n	8008138 <_strtol_l.isra.0+0x7c>
 8008180:	f04f 36ff 	mov.w	r6, #4294967295
 8008184:	e7e4      	b.n	8008150 <_strtol_l.isra.0+0x94>
 8008186:	2e00      	cmp	r6, #0
 8008188:	da05      	bge.n	8008196 <_strtol_l.isra.0+0xda>
 800818a:	2322      	movs	r3, #34	; 0x22
 800818c:	6003      	str	r3, [r0, #0]
 800818e:	4665      	mov	r5, ip
 8008190:	b942      	cbnz	r2, 80081a4 <_strtol_l.isra.0+0xe8>
 8008192:	4628      	mov	r0, r5
 8008194:	e79d      	b.n	80080d2 <_strtol_l.isra.0+0x16>
 8008196:	f1b8 0f00 	cmp.w	r8, #0
 800819a:	d000      	beq.n	800819e <_strtol_l.isra.0+0xe2>
 800819c:	426d      	negs	r5, r5
 800819e:	2a00      	cmp	r2, #0
 80081a0:	d0f7      	beq.n	8008192 <_strtol_l.isra.0+0xd6>
 80081a2:	b10e      	cbz	r6, 80081a8 <_strtol_l.isra.0+0xec>
 80081a4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80081a8:	6011      	str	r1, [r2, #0]
 80081aa:	e7f2      	b.n	8008192 <_strtol_l.isra.0+0xd6>
 80081ac:	2430      	movs	r4, #48	; 0x30
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1b3      	bne.n	800811a <_strtol_l.isra.0+0x5e>
 80081b2:	2308      	movs	r3, #8
 80081b4:	e7b1      	b.n	800811a <_strtol_l.isra.0+0x5e>
 80081b6:	2c30      	cmp	r4, #48	; 0x30
 80081b8:	d0a4      	beq.n	8008104 <_strtol_l.isra.0+0x48>
 80081ba:	230a      	movs	r3, #10
 80081bc:	e7ad      	b.n	800811a <_strtol_l.isra.0+0x5e>
 80081be:	bf00      	nop
 80081c0:	08008b05 	.word	0x08008b05

080081c4 <strtol>:
 80081c4:	4613      	mov	r3, r2
 80081c6:	460a      	mov	r2, r1
 80081c8:	4601      	mov	r1, r0
 80081ca:	4802      	ldr	r0, [pc, #8]	; (80081d4 <strtol+0x10>)
 80081cc:	6800      	ldr	r0, [r0, #0]
 80081ce:	f7ff bf75 	b.w	80080bc <_strtol_l.isra.0>
 80081d2:	bf00      	nop
 80081d4:	20000180 	.word	0x20000180

080081d8 <__ssputs_r>:
 80081d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081dc:	688e      	ldr	r6, [r1, #8]
 80081de:	429e      	cmp	r6, r3
 80081e0:	4682      	mov	sl, r0
 80081e2:	460c      	mov	r4, r1
 80081e4:	4690      	mov	r8, r2
 80081e6:	461f      	mov	r7, r3
 80081e8:	d838      	bhi.n	800825c <__ssputs_r+0x84>
 80081ea:	898a      	ldrh	r2, [r1, #12]
 80081ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081f0:	d032      	beq.n	8008258 <__ssputs_r+0x80>
 80081f2:	6825      	ldr	r5, [r4, #0]
 80081f4:	6909      	ldr	r1, [r1, #16]
 80081f6:	eba5 0901 	sub.w	r9, r5, r1
 80081fa:	6965      	ldr	r5, [r4, #20]
 80081fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008200:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008204:	3301      	adds	r3, #1
 8008206:	444b      	add	r3, r9
 8008208:	106d      	asrs	r5, r5, #1
 800820a:	429d      	cmp	r5, r3
 800820c:	bf38      	it	cc
 800820e:	461d      	movcc	r5, r3
 8008210:	0553      	lsls	r3, r2, #21
 8008212:	d531      	bpl.n	8008278 <__ssputs_r+0xa0>
 8008214:	4629      	mov	r1, r5
 8008216:	f000 fb47 	bl	80088a8 <_malloc_r>
 800821a:	4606      	mov	r6, r0
 800821c:	b950      	cbnz	r0, 8008234 <__ssputs_r+0x5c>
 800821e:	230c      	movs	r3, #12
 8008220:	f8ca 3000 	str.w	r3, [sl]
 8008224:	89a3      	ldrh	r3, [r4, #12]
 8008226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800822a:	81a3      	strh	r3, [r4, #12]
 800822c:	f04f 30ff 	mov.w	r0, #4294967295
 8008230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008234:	6921      	ldr	r1, [r4, #16]
 8008236:	464a      	mov	r2, r9
 8008238:	f000 fabe 	bl	80087b8 <memcpy>
 800823c:	89a3      	ldrh	r3, [r4, #12]
 800823e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008246:	81a3      	strh	r3, [r4, #12]
 8008248:	6126      	str	r6, [r4, #16]
 800824a:	6165      	str	r5, [r4, #20]
 800824c:	444e      	add	r6, r9
 800824e:	eba5 0509 	sub.w	r5, r5, r9
 8008252:	6026      	str	r6, [r4, #0]
 8008254:	60a5      	str	r5, [r4, #8]
 8008256:	463e      	mov	r6, r7
 8008258:	42be      	cmp	r6, r7
 800825a:	d900      	bls.n	800825e <__ssputs_r+0x86>
 800825c:	463e      	mov	r6, r7
 800825e:	4632      	mov	r2, r6
 8008260:	6820      	ldr	r0, [r4, #0]
 8008262:	4641      	mov	r1, r8
 8008264:	f000 fab6 	bl	80087d4 <memmove>
 8008268:	68a3      	ldr	r3, [r4, #8]
 800826a:	6822      	ldr	r2, [r4, #0]
 800826c:	1b9b      	subs	r3, r3, r6
 800826e:	4432      	add	r2, r6
 8008270:	60a3      	str	r3, [r4, #8]
 8008272:	6022      	str	r2, [r4, #0]
 8008274:	2000      	movs	r0, #0
 8008276:	e7db      	b.n	8008230 <__ssputs_r+0x58>
 8008278:	462a      	mov	r2, r5
 800827a:	f000 fb6f 	bl	800895c <_realloc_r>
 800827e:	4606      	mov	r6, r0
 8008280:	2800      	cmp	r0, #0
 8008282:	d1e1      	bne.n	8008248 <__ssputs_r+0x70>
 8008284:	6921      	ldr	r1, [r4, #16]
 8008286:	4650      	mov	r0, sl
 8008288:	f000 fabe 	bl	8008808 <_free_r>
 800828c:	e7c7      	b.n	800821e <__ssputs_r+0x46>
	...

08008290 <_svfiprintf_r>:
 8008290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008294:	4698      	mov	r8, r3
 8008296:	898b      	ldrh	r3, [r1, #12]
 8008298:	061b      	lsls	r3, r3, #24
 800829a:	b09d      	sub	sp, #116	; 0x74
 800829c:	4607      	mov	r7, r0
 800829e:	460d      	mov	r5, r1
 80082a0:	4614      	mov	r4, r2
 80082a2:	d50e      	bpl.n	80082c2 <_svfiprintf_r+0x32>
 80082a4:	690b      	ldr	r3, [r1, #16]
 80082a6:	b963      	cbnz	r3, 80082c2 <_svfiprintf_r+0x32>
 80082a8:	2140      	movs	r1, #64	; 0x40
 80082aa:	f000 fafd 	bl	80088a8 <_malloc_r>
 80082ae:	6028      	str	r0, [r5, #0]
 80082b0:	6128      	str	r0, [r5, #16]
 80082b2:	b920      	cbnz	r0, 80082be <_svfiprintf_r+0x2e>
 80082b4:	230c      	movs	r3, #12
 80082b6:	603b      	str	r3, [r7, #0]
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295
 80082bc:	e0d1      	b.n	8008462 <_svfiprintf_r+0x1d2>
 80082be:	2340      	movs	r3, #64	; 0x40
 80082c0:	616b      	str	r3, [r5, #20]
 80082c2:	2300      	movs	r3, #0
 80082c4:	9309      	str	r3, [sp, #36]	; 0x24
 80082c6:	2320      	movs	r3, #32
 80082c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80082d0:	2330      	movs	r3, #48	; 0x30
 80082d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800847c <_svfiprintf_r+0x1ec>
 80082d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082da:	f04f 0901 	mov.w	r9, #1
 80082de:	4623      	mov	r3, r4
 80082e0:	469a      	mov	sl, r3
 80082e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082e6:	b10a      	cbz	r2, 80082ec <_svfiprintf_r+0x5c>
 80082e8:	2a25      	cmp	r2, #37	; 0x25
 80082ea:	d1f9      	bne.n	80082e0 <_svfiprintf_r+0x50>
 80082ec:	ebba 0b04 	subs.w	fp, sl, r4
 80082f0:	d00b      	beq.n	800830a <_svfiprintf_r+0x7a>
 80082f2:	465b      	mov	r3, fp
 80082f4:	4622      	mov	r2, r4
 80082f6:	4629      	mov	r1, r5
 80082f8:	4638      	mov	r0, r7
 80082fa:	f7ff ff6d 	bl	80081d8 <__ssputs_r>
 80082fe:	3001      	adds	r0, #1
 8008300:	f000 80aa 	beq.w	8008458 <_svfiprintf_r+0x1c8>
 8008304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008306:	445a      	add	r2, fp
 8008308:	9209      	str	r2, [sp, #36]	; 0x24
 800830a:	f89a 3000 	ldrb.w	r3, [sl]
 800830e:	2b00      	cmp	r3, #0
 8008310:	f000 80a2 	beq.w	8008458 <_svfiprintf_r+0x1c8>
 8008314:	2300      	movs	r3, #0
 8008316:	f04f 32ff 	mov.w	r2, #4294967295
 800831a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800831e:	f10a 0a01 	add.w	sl, sl, #1
 8008322:	9304      	str	r3, [sp, #16]
 8008324:	9307      	str	r3, [sp, #28]
 8008326:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800832a:	931a      	str	r3, [sp, #104]	; 0x68
 800832c:	4654      	mov	r4, sl
 800832e:	2205      	movs	r2, #5
 8008330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008334:	4851      	ldr	r0, [pc, #324]	; (800847c <_svfiprintf_r+0x1ec>)
 8008336:	f7f7 ff5b 	bl	80001f0 <memchr>
 800833a:	9a04      	ldr	r2, [sp, #16]
 800833c:	b9d8      	cbnz	r0, 8008376 <_svfiprintf_r+0xe6>
 800833e:	06d0      	lsls	r0, r2, #27
 8008340:	bf44      	itt	mi
 8008342:	2320      	movmi	r3, #32
 8008344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008348:	0711      	lsls	r1, r2, #28
 800834a:	bf44      	itt	mi
 800834c:	232b      	movmi	r3, #43	; 0x2b
 800834e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008352:	f89a 3000 	ldrb.w	r3, [sl]
 8008356:	2b2a      	cmp	r3, #42	; 0x2a
 8008358:	d015      	beq.n	8008386 <_svfiprintf_r+0xf6>
 800835a:	9a07      	ldr	r2, [sp, #28]
 800835c:	4654      	mov	r4, sl
 800835e:	2000      	movs	r0, #0
 8008360:	f04f 0c0a 	mov.w	ip, #10
 8008364:	4621      	mov	r1, r4
 8008366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800836a:	3b30      	subs	r3, #48	; 0x30
 800836c:	2b09      	cmp	r3, #9
 800836e:	d94e      	bls.n	800840e <_svfiprintf_r+0x17e>
 8008370:	b1b0      	cbz	r0, 80083a0 <_svfiprintf_r+0x110>
 8008372:	9207      	str	r2, [sp, #28]
 8008374:	e014      	b.n	80083a0 <_svfiprintf_r+0x110>
 8008376:	eba0 0308 	sub.w	r3, r0, r8
 800837a:	fa09 f303 	lsl.w	r3, r9, r3
 800837e:	4313      	orrs	r3, r2
 8008380:	9304      	str	r3, [sp, #16]
 8008382:	46a2      	mov	sl, r4
 8008384:	e7d2      	b.n	800832c <_svfiprintf_r+0x9c>
 8008386:	9b03      	ldr	r3, [sp, #12]
 8008388:	1d19      	adds	r1, r3, #4
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	9103      	str	r1, [sp, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	bfbb      	ittet	lt
 8008392:	425b      	neglt	r3, r3
 8008394:	f042 0202 	orrlt.w	r2, r2, #2
 8008398:	9307      	strge	r3, [sp, #28]
 800839a:	9307      	strlt	r3, [sp, #28]
 800839c:	bfb8      	it	lt
 800839e:	9204      	strlt	r2, [sp, #16]
 80083a0:	7823      	ldrb	r3, [r4, #0]
 80083a2:	2b2e      	cmp	r3, #46	; 0x2e
 80083a4:	d10c      	bne.n	80083c0 <_svfiprintf_r+0x130>
 80083a6:	7863      	ldrb	r3, [r4, #1]
 80083a8:	2b2a      	cmp	r3, #42	; 0x2a
 80083aa:	d135      	bne.n	8008418 <_svfiprintf_r+0x188>
 80083ac:	9b03      	ldr	r3, [sp, #12]
 80083ae:	1d1a      	adds	r2, r3, #4
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	9203      	str	r2, [sp, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	bfb8      	it	lt
 80083b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80083bc:	3402      	adds	r4, #2
 80083be:	9305      	str	r3, [sp, #20]
 80083c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800848c <_svfiprintf_r+0x1fc>
 80083c4:	7821      	ldrb	r1, [r4, #0]
 80083c6:	2203      	movs	r2, #3
 80083c8:	4650      	mov	r0, sl
 80083ca:	f7f7 ff11 	bl	80001f0 <memchr>
 80083ce:	b140      	cbz	r0, 80083e2 <_svfiprintf_r+0x152>
 80083d0:	2340      	movs	r3, #64	; 0x40
 80083d2:	eba0 000a 	sub.w	r0, r0, sl
 80083d6:	fa03 f000 	lsl.w	r0, r3, r0
 80083da:	9b04      	ldr	r3, [sp, #16]
 80083dc:	4303      	orrs	r3, r0
 80083de:	3401      	adds	r4, #1
 80083e0:	9304      	str	r3, [sp, #16]
 80083e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083e6:	4826      	ldr	r0, [pc, #152]	; (8008480 <_svfiprintf_r+0x1f0>)
 80083e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083ec:	2206      	movs	r2, #6
 80083ee:	f7f7 feff 	bl	80001f0 <memchr>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	d038      	beq.n	8008468 <_svfiprintf_r+0x1d8>
 80083f6:	4b23      	ldr	r3, [pc, #140]	; (8008484 <_svfiprintf_r+0x1f4>)
 80083f8:	bb1b      	cbnz	r3, 8008442 <_svfiprintf_r+0x1b2>
 80083fa:	9b03      	ldr	r3, [sp, #12]
 80083fc:	3307      	adds	r3, #7
 80083fe:	f023 0307 	bic.w	r3, r3, #7
 8008402:	3308      	adds	r3, #8
 8008404:	9303      	str	r3, [sp, #12]
 8008406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008408:	4433      	add	r3, r6
 800840a:	9309      	str	r3, [sp, #36]	; 0x24
 800840c:	e767      	b.n	80082de <_svfiprintf_r+0x4e>
 800840e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008412:	460c      	mov	r4, r1
 8008414:	2001      	movs	r0, #1
 8008416:	e7a5      	b.n	8008364 <_svfiprintf_r+0xd4>
 8008418:	2300      	movs	r3, #0
 800841a:	3401      	adds	r4, #1
 800841c:	9305      	str	r3, [sp, #20]
 800841e:	4619      	mov	r1, r3
 8008420:	f04f 0c0a 	mov.w	ip, #10
 8008424:	4620      	mov	r0, r4
 8008426:	f810 2b01 	ldrb.w	r2, [r0], #1
 800842a:	3a30      	subs	r2, #48	; 0x30
 800842c:	2a09      	cmp	r2, #9
 800842e:	d903      	bls.n	8008438 <_svfiprintf_r+0x1a8>
 8008430:	2b00      	cmp	r3, #0
 8008432:	d0c5      	beq.n	80083c0 <_svfiprintf_r+0x130>
 8008434:	9105      	str	r1, [sp, #20]
 8008436:	e7c3      	b.n	80083c0 <_svfiprintf_r+0x130>
 8008438:	fb0c 2101 	mla	r1, ip, r1, r2
 800843c:	4604      	mov	r4, r0
 800843e:	2301      	movs	r3, #1
 8008440:	e7f0      	b.n	8008424 <_svfiprintf_r+0x194>
 8008442:	ab03      	add	r3, sp, #12
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	462a      	mov	r2, r5
 8008448:	4b0f      	ldr	r3, [pc, #60]	; (8008488 <_svfiprintf_r+0x1f8>)
 800844a:	a904      	add	r1, sp, #16
 800844c:	4638      	mov	r0, r7
 800844e:	f3af 8000 	nop.w
 8008452:	1c42      	adds	r2, r0, #1
 8008454:	4606      	mov	r6, r0
 8008456:	d1d6      	bne.n	8008406 <_svfiprintf_r+0x176>
 8008458:	89ab      	ldrh	r3, [r5, #12]
 800845a:	065b      	lsls	r3, r3, #25
 800845c:	f53f af2c 	bmi.w	80082b8 <_svfiprintf_r+0x28>
 8008460:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008462:	b01d      	add	sp, #116	; 0x74
 8008464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008468:	ab03      	add	r3, sp, #12
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	462a      	mov	r2, r5
 800846e:	4b06      	ldr	r3, [pc, #24]	; (8008488 <_svfiprintf_r+0x1f8>)
 8008470:	a904      	add	r1, sp, #16
 8008472:	4638      	mov	r0, r7
 8008474:	f000 f87a 	bl	800856c <_printf_i>
 8008478:	e7eb      	b.n	8008452 <_svfiprintf_r+0x1c2>
 800847a:	bf00      	nop
 800847c:	08008c05 	.word	0x08008c05
 8008480:	08008c0f 	.word	0x08008c0f
 8008484:	00000000 	.word	0x00000000
 8008488:	080081d9 	.word	0x080081d9
 800848c:	08008c0b 	.word	0x08008c0b

08008490 <_printf_common>:
 8008490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008494:	4616      	mov	r6, r2
 8008496:	4699      	mov	r9, r3
 8008498:	688a      	ldr	r2, [r1, #8]
 800849a:	690b      	ldr	r3, [r1, #16]
 800849c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084a0:	4293      	cmp	r3, r2
 80084a2:	bfb8      	it	lt
 80084a4:	4613      	movlt	r3, r2
 80084a6:	6033      	str	r3, [r6, #0]
 80084a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084ac:	4607      	mov	r7, r0
 80084ae:	460c      	mov	r4, r1
 80084b0:	b10a      	cbz	r2, 80084b6 <_printf_common+0x26>
 80084b2:	3301      	adds	r3, #1
 80084b4:	6033      	str	r3, [r6, #0]
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	0699      	lsls	r1, r3, #26
 80084ba:	bf42      	ittt	mi
 80084bc:	6833      	ldrmi	r3, [r6, #0]
 80084be:	3302      	addmi	r3, #2
 80084c0:	6033      	strmi	r3, [r6, #0]
 80084c2:	6825      	ldr	r5, [r4, #0]
 80084c4:	f015 0506 	ands.w	r5, r5, #6
 80084c8:	d106      	bne.n	80084d8 <_printf_common+0x48>
 80084ca:	f104 0a19 	add.w	sl, r4, #25
 80084ce:	68e3      	ldr	r3, [r4, #12]
 80084d0:	6832      	ldr	r2, [r6, #0]
 80084d2:	1a9b      	subs	r3, r3, r2
 80084d4:	42ab      	cmp	r3, r5
 80084d6:	dc26      	bgt.n	8008526 <_printf_common+0x96>
 80084d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084dc:	1e13      	subs	r3, r2, #0
 80084de:	6822      	ldr	r2, [r4, #0]
 80084e0:	bf18      	it	ne
 80084e2:	2301      	movne	r3, #1
 80084e4:	0692      	lsls	r2, r2, #26
 80084e6:	d42b      	bmi.n	8008540 <_printf_common+0xb0>
 80084e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084ec:	4649      	mov	r1, r9
 80084ee:	4638      	mov	r0, r7
 80084f0:	47c0      	blx	r8
 80084f2:	3001      	adds	r0, #1
 80084f4:	d01e      	beq.n	8008534 <_printf_common+0xa4>
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	68e5      	ldr	r5, [r4, #12]
 80084fa:	6832      	ldr	r2, [r6, #0]
 80084fc:	f003 0306 	and.w	r3, r3, #6
 8008500:	2b04      	cmp	r3, #4
 8008502:	bf08      	it	eq
 8008504:	1aad      	subeq	r5, r5, r2
 8008506:	68a3      	ldr	r3, [r4, #8]
 8008508:	6922      	ldr	r2, [r4, #16]
 800850a:	bf0c      	ite	eq
 800850c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008510:	2500      	movne	r5, #0
 8008512:	4293      	cmp	r3, r2
 8008514:	bfc4      	itt	gt
 8008516:	1a9b      	subgt	r3, r3, r2
 8008518:	18ed      	addgt	r5, r5, r3
 800851a:	2600      	movs	r6, #0
 800851c:	341a      	adds	r4, #26
 800851e:	42b5      	cmp	r5, r6
 8008520:	d11a      	bne.n	8008558 <_printf_common+0xc8>
 8008522:	2000      	movs	r0, #0
 8008524:	e008      	b.n	8008538 <_printf_common+0xa8>
 8008526:	2301      	movs	r3, #1
 8008528:	4652      	mov	r2, sl
 800852a:	4649      	mov	r1, r9
 800852c:	4638      	mov	r0, r7
 800852e:	47c0      	blx	r8
 8008530:	3001      	adds	r0, #1
 8008532:	d103      	bne.n	800853c <_printf_common+0xac>
 8008534:	f04f 30ff 	mov.w	r0, #4294967295
 8008538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800853c:	3501      	adds	r5, #1
 800853e:	e7c6      	b.n	80084ce <_printf_common+0x3e>
 8008540:	18e1      	adds	r1, r4, r3
 8008542:	1c5a      	adds	r2, r3, #1
 8008544:	2030      	movs	r0, #48	; 0x30
 8008546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800854a:	4422      	add	r2, r4
 800854c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008554:	3302      	adds	r3, #2
 8008556:	e7c7      	b.n	80084e8 <_printf_common+0x58>
 8008558:	2301      	movs	r3, #1
 800855a:	4622      	mov	r2, r4
 800855c:	4649      	mov	r1, r9
 800855e:	4638      	mov	r0, r7
 8008560:	47c0      	blx	r8
 8008562:	3001      	adds	r0, #1
 8008564:	d0e6      	beq.n	8008534 <_printf_common+0xa4>
 8008566:	3601      	adds	r6, #1
 8008568:	e7d9      	b.n	800851e <_printf_common+0x8e>
	...

0800856c <_printf_i>:
 800856c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008570:	460c      	mov	r4, r1
 8008572:	4691      	mov	r9, r2
 8008574:	7e27      	ldrb	r7, [r4, #24]
 8008576:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008578:	2f78      	cmp	r7, #120	; 0x78
 800857a:	4680      	mov	r8, r0
 800857c:	469a      	mov	sl, r3
 800857e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008582:	d807      	bhi.n	8008594 <_printf_i+0x28>
 8008584:	2f62      	cmp	r7, #98	; 0x62
 8008586:	d80a      	bhi.n	800859e <_printf_i+0x32>
 8008588:	2f00      	cmp	r7, #0
 800858a:	f000 80d8 	beq.w	800873e <_printf_i+0x1d2>
 800858e:	2f58      	cmp	r7, #88	; 0x58
 8008590:	f000 80a3 	beq.w	80086da <_printf_i+0x16e>
 8008594:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800859c:	e03a      	b.n	8008614 <_printf_i+0xa8>
 800859e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085a2:	2b15      	cmp	r3, #21
 80085a4:	d8f6      	bhi.n	8008594 <_printf_i+0x28>
 80085a6:	a001      	add	r0, pc, #4	; (adr r0, 80085ac <_printf_i+0x40>)
 80085a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80085ac:	08008605 	.word	0x08008605
 80085b0:	08008619 	.word	0x08008619
 80085b4:	08008595 	.word	0x08008595
 80085b8:	08008595 	.word	0x08008595
 80085bc:	08008595 	.word	0x08008595
 80085c0:	08008595 	.word	0x08008595
 80085c4:	08008619 	.word	0x08008619
 80085c8:	08008595 	.word	0x08008595
 80085cc:	08008595 	.word	0x08008595
 80085d0:	08008595 	.word	0x08008595
 80085d4:	08008595 	.word	0x08008595
 80085d8:	08008725 	.word	0x08008725
 80085dc:	08008649 	.word	0x08008649
 80085e0:	08008707 	.word	0x08008707
 80085e4:	08008595 	.word	0x08008595
 80085e8:	08008595 	.word	0x08008595
 80085ec:	08008747 	.word	0x08008747
 80085f0:	08008595 	.word	0x08008595
 80085f4:	08008649 	.word	0x08008649
 80085f8:	08008595 	.word	0x08008595
 80085fc:	08008595 	.word	0x08008595
 8008600:	0800870f 	.word	0x0800870f
 8008604:	680b      	ldr	r3, [r1, #0]
 8008606:	1d1a      	adds	r2, r3, #4
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	600a      	str	r2, [r1, #0]
 800860c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008614:	2301      	movs	r3, #1
 8008616:	e0a3      	b.n	8008760 <_printf_i+0x1f4>
 8008618:	6825      	ldr	r5, [r4, #0]
 800861a:	6808      	ldr	r0, [r1, #0]
 800861c:	062e      	lsls	r6, r5, #24
 800861e:	f100 0304 	add.w	r3, r0, #4
 8008622:	d50a      	bpl.n	800863a <_printf_i+0xce>
 8008624:	6805      	ldr	r5, [r0, #0]
 8008626:	600b      	str	r3, [r1, #0]
 8008628:	2d00      	cmp	r5, #0
 800862a:	da03      	bge.n	8008634 <_printf_i+0xc8>
 800862c:	232d      	movs	r3, #45	; 0x2d
 800862e:	426d      	negs	r5, r5
 8008630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008634:	485e      	ldr	r0, [pc, #376]	; (80087b0 <_printf_i+0x244>)
 8008636:	230a      	movs	r3, #10
 8008638:	e019      	b.n	800866e <_printf_i+0x102>
 800863a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800863e:	6805      	ldr	r5, [r0, #0]
 8008640:	600b      	str	r3, [r1, #0]
 8008642:	bf18      	it	ne
 8008644:	b22d      	sxthne	r5, r5
 8008646:	e7ef      	b.n	8008628 <_printf_i+0xbc>
 8008648:	680b      	ldr	r3, [r1, #0]
 800864a:	6825      	ldr	r5, [r4, #0]
 800864c:	1d18      	adds	r0, r3, #4
 800864e:	6008      	str	r0, [r1, #0]
 8008650:	0628      	lsls	r0, r5, #24
 8008652:	d501      	bpl.n	8008658 <_printf_i+0xec>
 8008654:	681d      	ldr	r5, [r3, #0]
 8008656:	e002      	b.n	800865e <_printf_i+0xf2>
 8008658:	0669      	lsls	r1, r5, #25
 800865a:	d5fb      	bpl.n	8008654 <_printf_i+0xe8>
 800865c:	881d      	ldrh	r5, [r3, #0]
 800865e:	4854      	ldr	r0, [pc, #336]	; (80087b0 <_printf_i+0x244>)
 8008660:	2f6f      	cmp	r7, #111	; 0x6f
 8008662:	bf0c      	ite	eq
 8008664:	2308      	moveq	r3, #8
 8008666:	230a      	movne	r3, #10
 8008668:	2100      	movs	r1, #0
 800866a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800866e:	6866      	ldr	r6, [r4, #4]
 8008670:	60a6      	str	r6, [r4, #8]
 8008672:	2e00      	cmp	r6, #0
 8008674:	bfa2      	ittt	ge
 8008676:	6821      	ldrge	r1, [r4, #0]
 8008678:	f021 0104 	bicge.w	r1, r1, #4
 800867c:	6021      	strge	r1, [r4, #0]
 800867e:	b90d      	cbnz	r5, 8008684 <_printf_i+0x118>
 8008680:	2e00      	cmp	r6, #0
 8008682:	d04d      	beq.n	8008720 <_printf_i+0x1b4>
 8008684:	4616      	mov	r6, r2
 8008686:	fbb5 f1f3 	udiv	r1, r5, r3
 800868a:	fb03 5711 	mls	r7, r3, r1, r5
 800868e:	5dc7      	ldrb	r7, [r0, r7]
 8008690:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008694:	462f      	mov	r7, r5
 8008696:	42bb      	cmp	r3, r7
 8008698:	460d      	mov	r5, r1
 800869a:	d9f4      	bls.n	8008686 <_printf_i+0x11a>
 800869c:	2b08      	cmp	r3, #8
 800869e:	d10b      	bne.n	80086b8 <_printf_i+0x14c>
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	07df      	lsls	r7, r3, #31
 80086a4:	d508      	bpl.n	80086b8 <_printf_i+0x14c>
 80086a6:	6923      	ldr	r3, [r4, #16]
 80086a8:	6861      	ldr	r1, [r4, #4]
 80086aa:	4299      	cmp	r1, r3
 80086ac:	bfde      	ittt	le
 80086ae:	2330      	movle	r3, #48	; 0x30
 80086b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086b8:	1b92      	subs	r2, r2, r6
 80086ba:	6122      	str	r2, [r4, #16]
 80086bc:	f8cd a000 	str.w	sl, [sp]
 80086c0:	464b      	mov	r3, r9
 80086c2:	aa03      	add	r2, sp, #12
 80086c4:	4621      	mov	r1, r4
 80086c6:	4640      	mov	r0, r8
 80086c8:	f7ff fee2 	bl	8008490 <_printf_common>
 80086cc:	3001      	adds	r0, #1
 80086ce:	d14c      	bne.n	800876a <_printf_i+0x1fe>
 80086d0:	f04f 30ff 	mov.w	r0, #4294967295
 80086d4:	b004      	add	sp, #16
 80086d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086da:	4835      	ldr	r0, [pc, #212]	; (80087b0 <_printf_i+0x244>)
 80086dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086e0:	6823      	ldr	r3, [r4, #0]
 80086e2:	680e      	ldr	r6, [r1, #0]
 80086e4:	061f      	lsls	r7, r3, #24
 80086e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80086ea:	600e      	str	r6, [r1, #0]
 80086ec:	d514      	bpl.n	8008718 <_printf_i+0x1ac>
 80086ee:	07d9      	lsls	r1, r3, #31
 80086f0:	bf44      	itt	mi
 80086f2:	f043 0320 	orrmi.w	r3, r3, #32
 80086f6:	6023      	strmi	r3, [r4, #0]
 80086f8:	b91d      	cbnz	r5, 8008702 <_printf_i+0x196>
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	f023 0320 	bic.w	r3, r3, #32
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	2310      	movs	r3, #16
 8008704:	e7b0      	b.n	8008668 <_printf_i+0xfc>
 8008706:	6823      	ldr	r3, [r4, #0]
 8008708:	f043 0320 	orr.w	r3, r3, #32
 800870c:	6023      	str	r3, [r4, #0]
 800870e:	2378      	movs	r3, #120	; 0x78
 8008710:	4828      	ldr	r0, [pc, #160]	; (80087b4 <_printf_i+0x248>)
 8008712:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008716:	e7e3      	b.n	80086e0 <_printf_i+0x174>
 8008718:	065e      	lsls	r6, r3, #25
 800871a:	bf48      	it	mi
 800871c:	b2ad      	uxthmi	r5, r5
 800871e:	e7e6      	b.n	80086ee <_printf_i+0x182>
 8008720:	4616      	mov	r6, r2
 8008722:	e7bb      	b.n	800869c <_printf_i+0x130>
 8008724:	680b      	ldr	r3, [r1, #0]
 8008726:	6826      	ldr	r6, [r4, #0]
 8008728:	6960      	ldr	r0, [r4, #20]
 800872a:	1d1d      	adds	r5, r3, #4
 800872c:	600d      	str	r5, [r1, #0]
 800872e:	0635      	lsls	r5, r6, #24
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	d501      	bpl.n	8008738 <_printf_i+0x1cc>
 8008734:	6018      	str	r0, [r3, #0]
 8008736:	e002      	b.n	800873e <_printf_i+0x1d2>
 8008738:	0671      	lsls	r1, r6, #25
 800873a:	d5fb      	bpl.n	8008734 <_printf_i+0x1c8>
 800873c:	8018      	strh	r0, [r3, #0]
 800873e:	2300      	movs	r3, #0
 8008740:	6123      	str	r3, [r4, #16]
 8008742:	4616      	mov	r6, r2
 8008744:	e7ba      	b.n	80086bc <_printf_i+0x150>
 8008746:	680b      	ldr	r3, [r1, #0]
 8008748:	1d1a      	adds	r2, r3, #4
 800874a:	600a      	str	r2, [r1, #0]
 800874c:	681e      	ldr	r6, [r3, #0]
 800874e:	6862      	ldr	r2, [r4, #4]
 8008750:	2100      	movs	r1, #0
 8008752:	4630      	mov	r0, r6
 8008754:	f7f7 fd4c 	bl	80001f0 <memchr>
 8008758:	b108      	cbz	r0, 800875e <_printf_i+0x1f2>
 800875a:	1b80      	subs	r0, r0, r6
 800875c:	6060      	str	r0, [r4, #4]
 800875e:	6863      	ldr	r3, [r4, #4]
 8008760:	6123      	str	r3, [r4, #16]
 8008762:	2300      	movs	r3, #0
 8008764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008768:	e7a8      	b.n	80086bc <_printf_i+0x150>
 800876a:	6923      	ldr	r3, [r4, #16]
 800876c:	4632      	mov	r2, r6
 800876e:	4649      	mov	r1, r9
 8008770:	4640      	mov	r0, r8
 8008772:	47d0      	blx	sl
 8008774:	3001      	adds	r0, #1
 8008776:	d0ab      	beq.n	80086d0 <_printf_i+0x164>
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	079b      	lsls	r3, r3, #30
 800877c:	d413      	bmi.n	80087a6 <_printf_i+0x23a>
 800877e:	68e0      	ldr	r0, [r4, #12]
 8008780:	9b03      	ldr	r3, [sp, #12]
 8008782:	4298      	cmp	r0, r3
 8008784:	bfb8      	it	lt
 8008786:	4618      	movlt	r0, r3
 8008788:	e7a4      	b.n	80086d4 <_printf_i+0x168>
 800878a:	2301      	movs	r3, #1
 800878c:	4632      	mov	r2, r6
 800878e:	4649      	mov	r1, r9
 8008790:	4640      	mov	r0, r8
 8008792:	47d0      	blx	sl
 8008794:	3001      	adds	r0, #1
 8008796:	d09b      	beq.n	80086d0 <_printf_i+0x164>
 8008798:	3501      	adds	r5, #1
 800879a:	68e3      	ldr	r3, [r4, #12]
 800879c:	9903      	ldr	r1, [sp, #12]
 800879e:	1a5b      	subs	r3, r3, r1
 80087a0:	42ab      	cmp	r3, r5
 80087a2:	dcf2      	bgt.n	800878a <_printf_i+0x21e>
 80087a4:	e7eb      	b.n	800877e <_printf_i+0x212>
 80087a6:	2500      	movs	r5, #0
 80087a8:	f104 0619 	add.w	r6, r4, #25
 80087ac:	e7f5      	b.n	800879a <_printf_i+0x22e>
 80087ae:	bf00      	nop
 80087b0:	08008c16 	.word	0x08008c16
 80087b4:	08008c27 	.word	0x08008c27

080087b8 <memcpy>:
 80087b8:	440a      	add	r2, r1
 80087ba:	4291      	cmp	r1, r2
 80087bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80087c0:	d100      	bne.n	80087c4 <memcpy+0xc>
 80087c2:	4770      	bx	lr
 80087c4:	b510      	push	{r4, lr}
 80087c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087ce:	4291      	cmp	r1, r2
 80087d0:	d1f9      	bne.n	80087c6 <memcpy+0xe>
 80087d2:	bd10      	pop	{r4, pc}

080087d4 <memmove>:
 80087d4:	4288      	cmp	r0, r1
 80087d6:	b510      	push	{r4, lr}
 80087d8:	eb01 0402 	add.w	r4, r1, r2
 80087dc:	d902      	bls.n	80087e4 <memmove+0x10>
 80087de:	4284      	cmp	r4, r0
 80087e0:	4623      	mov	r3, r4
 80087e2:	d807      	bhi.n	80087f4 <memmove+0x20>
 80087e4:	1e43      	subs	r3, r0, #1
 80087e6:	42a1      	cmp	r1, r4
 80087e8:	d008      	beq.n	80087fc <memmove+0x28>
 80087ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087f2:	e7f8      	b.n	80087e6 <memmove+0x12>
 80087f4:	4402      	add	r2, r0
 80087f6:	4601      	mov	r1, r0
 80087f8:	428a      	cmp	r2, r1
 80087fa:	d100      	bne.n	80087fe <memmove+0x2a>
 80087fc:	bd10      	pop	{r4, pc}
 80087fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008802:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008806:	e7f7      	b.n	80087f8 <memmove+0x24>

08008808 <_free_r>:
 8008808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800880a:	2900      	cmp	r1, #0
 800880c:	d048      	beq.n	80088a0 <_free_r+0x98>
 800880e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008812:	9001      	str	r0, [sp, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	f1a1 0404 	sub.w	r4, r1, #4
 800881a:	bfb8      	it	lt
 800881c:	18e4      	addlt	r4, r4, r3
 800881e:	f000 f8d3 	bl	80089c8 <__malloc_lock>
 8008822:	4a20      	ldr	r2, [pc, #128]	; (80088a4 <_free_r+0x9c>)
 8008824:	9801      	ldr	r0, [sp, #4]
 8008826:	6813      	ldr	r3, [r2, #0]
 8008828:	4615      	mov	r5, r2
 800882a:	b933      	cbnz	r3, 800883a <_free_r+0x32>
 800882c:	6063      	str	r3, [r4, #4]
 800882e:	6014      	str	r4, [r2, #0]
 8008830:	b003      	add	sp, #12
 8008832:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008836:	f000 b8cd 	b.w	80089d4 <__malloc_unlock>
 800883a:	42a3      	cmp	r3, r4
 800883c:	d90b      	bls.n	8008856 <_free_r+0x4e>
 800883e:	6821      	ldr	r1, [r4, #0]
 8008840:	1862      	adds	r2, r4, r1
 8008842:	4293      	cmp	r3, r2
 8008844:	bf04      	itt	eq
 8008846:	681a      	ldreq	r2, [r3, #0]
 8008848:	685b      	ldreq	r3, [r3, #4]
 800884a:	6063      	str	r3, [r4, #4]
 800884c:	bf04      	itt	eq
 800884e:	1852      	addeq	r2, r2, r1
 8008850:	6022      	streq	r2, [r4, #0]
 8008852:	602c      	str	r4, [r5, #0]
 8008854:	e7ec      	b.n	8008830 <_free_r+0x28>
 8008856:	461a      	mov	r2, r3
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	b10b      	cbz	r3, 8008860 <_free_r+0x58>
 800885c:	42a3      	cmp	r3, r4
 800885e:	d9fa      	bls.n	8008856 <_free_r+0x4e>
 8008860:	6811      	ldr	r1, [r2, #0]
 8008862:	1855      	adds	r5, r2, r1
 8008864:	42a5      	cmp	r5, r4
 8008866:	d10b      	bne.n	8008880 <_free_r+0x78>
 8008868:	6824      	ldr	r4, [r4, #0]
 800886a:	4421      	add	r1, r4
 800886c:	1854      	adds	r4, r2, r1
 800886e:	42a3      	cmp	r3, r4
 8008870:	6011      	str	r1, [r2, #0]
 8008872:	d1dd      	bne.n	8008830 <_free_r+0x28>
 8008874:	681c      	ldr	r4, [r3, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	6053      	str	r3, [r2, #4]
 800887a:	4421      	add	r1, r4
 800887c:	6011      	str	r1, [r2, #0]
 800887e:	e7d7      	b.n	8008830 <_free_r+0x28>
 8008880:	d902      	bls.n	8008888 <_free_r+0x80>
 8008882:	230c      	movs	r3, #12
 8008884:	6003      	str	r3, [r0, #0]
 8008886:	e7d3      	b.n	8008830 <_free_r+0x28>
 8008888:	6825      	ldr	r5, [r4, #0]
 800888a:	1961      	adds	r1, r4, r5
 800888c:	428b      	cmp	r3, r1
 800888e:	bf04      	itt	eq
 8008890:	6819      	ldreq	r1, [r3, #0]
 8008892:	685b      	ldreq	r3, [r3, #4]
 8008894:	6063      	str	r3, [r4, #4]
 8008896:	bf04      	itt	eq
 8008898:	1949      	addeq	r1, r1, r5
 800889a:	6021      	streq	r1, [r4, #0]
 800889c:	6054      	str	r4, [r2, #4]
 800889e:	e7c7      	b.n	8008830 <_free_r+0x28>
 80088a0:	b003      	add	sp, #12
 80088a2:	bd30      	pop	{r4, r5, pc}
 80088a4:	20000430 	.word	0x20000430

080088a8 <_malloc_r>:
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	1ccd      	adds	r5, r1, #3
 80088ac:	f025 0503 	bic.w	r5, r5, #3
 80088b0:	3508      	adds	r5, #8
 80088b2:	2d0c      	cmp	r5, #12
 80088b4:	bf38      	it	cc
 80088b6:	250c      	movcc	r5, #12
 80088b8:	2d00      	cmp	r5, #0
 80088ba:	4606      	mov	r6, r0
 80088bc:	db01      	blt.n	80088c2 <_malloc_r+0x1a>
 80088be:	42a9      	cmp	r1, r5
 80088c0:	d903      	bls.n	80088ca <_malloc_r+0x22>
 80088c2:	230c      	movs	r3, #12
 80088c4:	6033      	str	r3, [r6, #0]
 80088c6:	2000      	movs	r0, #0
 80088c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ca:	f000 f87d 	bl	80089c8 <__malloc_lock>
 80088ce:	4921      	ldr	r1, [pc, #132]	; (8008954 <_malloc_r+0xac>)
 80088d0:	680a      	ldr	r2, [r1, #0]
 80088d2:	4614      	mov	r4, r2
 80088d4:	b99c      	cbnz	r4, 80088fe <_malloc_r+0x56>
 80088d6:	4f20      	ldr	r7, [pc, #128]	; (8008958 <_malloc_r+0xb0>)
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	b923      	cbnz	r3, 80088e6 <_malloc_r+0x3e>
 80088dc:	4621      	mov	r1, r4
 80088de:	4630      	mov	r0, r6
 80088e0:	f000 f862 	bl	80089a8 <_sbrk_r>
 80088e4:	6038      	str	r0, [r7, #0]
 80088e6:	4629      	mov	r1, r5
 80088e8:	4630      	mov	r0, r6
 80088ea:	f000 f85d 	bl	80089a8 <_sbrk_r>
 80088ee:	1c43      	adds	r3, r0, #1
 80088f0:	d123      	bne.n	800893a <_malloc_r+0x92>
 80088f2:	230c      	movs	r3, #12
 80088f4:	6033      	str	r3, [r6, #0]
 80088f6:	4630      	mov	r0, r6
 80088f8:	f000 f86c 	bl	80089d4 <__malloc_unlock>
 80088fc:	e7e3      	b.n	80088c6 <_malloc_r+0x1e>
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	1b5b      	subs	r3, r3, r5
 8008902:	d417      	bmi.n	8008934 <_malloc_r+0x8c>
 8008904:	2b0b      	cmp	r3, #11
 8008906:	d903      	bls.n	8008910 <_malloc_r+0x68>
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	441c      	add	r4, r3
 800890c:	6025      	str	r5, [r4, #0]
 800890e:	e004      	b.n	800891a <_malloc_r+0x72>
 8008910:	6863      	ldr	r3, [r4, #4]
 8008912:	42a2      	cmp	r2, r4
 8008914:	bf0c      	ite	eq
 8008916:	600b      	streq	r3, [r1, #0]
 8008918:	6053      	strne	r3, [r2, #4]
 800891a:	4630      	mov	r0, r6
 800891c:	f000 f85a 	bl	80089d4 <__malloc_unlock>
 8008920:	f104 000b 	add.w	r0, r4, #11
 8008924:	1d23      	adds	r3, r4, #4
 8008926:	f020 0007 	bic.w	r0, r0, #7
 800892a:	1ac2      	subs	r2, r0, r3
 800892c:	d0cc      	beq.n	80088c8 <_malloc_r+0x20>
 800892e:	1a1b      	subs	r3, r3, r0
 8008930:	50a3      	str	r3, [r4, r2]
 8008932:	e7c9      	b.n	80088c8 <_malloc_r+0x20>
 8008934:	4622      	mov	r2, r4
 8008936:	6864      	ldr	r4, [r4, #4]
 8008938:	e7cc      	b.n	80088d4 <_malloc_r+0x2c>
 800893a:	1cc4      	adds	r4, r0, #3
 800893c:	f024 0403 	bic.w	r4, r4, #3
 8008940:	42a0      	cmp	r0, r4
 8008942:	d0e3      	beq.n	800890c <_malloc_r+0x64>
 8008944:	1a21      	subs	r1, r4, r0
 8008946:	4630      	mov	r0, r6
 8008948:	f000 f82e 	bl	80089a8 <_sbrk_r>
 800894c:	3001      	adds	r0, #1
 800894e:	d1dd      	bne.n	800890c <_malloc_r+0x64>
 8008950:	e7cf      	b.n	80088f2 <_malloc_r+0x4a>
 8008952:	bf00      	nop
 8008954:	20000430 	.word	0x20000430
 8008958:	20000434 	.word	0x20000434

0800895c <_realloc_r>:
 800895c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895e:	4607      	mov	r7, r0
 8008960:	4614      	mov	r4, r2
 8008962:	460e      	mov	r6, r1
 8008964:	b921      	cbnz	r1, 8008970 <_realloc_r+0x14>
 8008966:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800896a:	4611      	mov	r1, r2
 800896c:	f7ff bf9c 	b.w	80088a8 <_malloc_r>
 8008970:	b922      	cbnz	r2, 800897c <_realloc_r+0x20>
 8008972:	f7ff ff49 	bl	8008808 <_free_r>
 8008976:	4625      	mov	r5, r4
 8008978:	4628      	mov	r0, r5
 800897a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800897c:	f000 f830 	bl	80089e0 <_malloc_usable_size_r>
 8008980:	42a0      	cmp	r0, r4
 8008982:	d20f      	bcs.n	80089a4 <_realloc_r+0x48>
 8008984:	4621      	mov	r1, r4
 8008986:	4638      	mov	r0, r7
 8008988:	f7ff ff8e 	bl	80088a8 <_malloc_r>
 800898c:	4605      	mov	r5, r0
 800898e:	2800      	cmp	r0, #0
 8008990:	d0f2      	beq.n	8008978 <_realloc_r+0x1c>
 8008992:	4631      	mov	r1, r6
 8008994:	4622      	mov	r2, r4
 8008996:	f7ff ff0f 	bl	80087b8 <memcpy>
 800899a:	4631      	mov	r1, r6
 800899c:	4638      	mov	r0, r7
 800899e:	f7ff ff33 	bl	8008808 <_free_r>
 80089a2:	e7e9      	b.n	8008978 <_realloc_r+0x1c>
 80089a4:	4635      	mov	r5, r6
 80089a6:	e7e7      	b.n	8008978 <_realloc_r+0x1c>

080089a8 <_sbrk_r>:
 80089a8:	b538      	push	{r3, r4, r5, lr}
 80089aa:	4d06      	ldr	r5, [pc, #24]	; (80089c4 <_sbrk_r+0x1c>)
 80089ac:	2300      	movs	r3, #0
 80089ae:	4604      	mov	r4, r0
 80089b0:	4608      	mov	r0, r1
 80089b2:	602b      	str	r3, [r5, #0]
 80089b4:	f7f8 fac0 	bl	8000f38 <_sbrk>
 80089b8:	1c43      	adds	r3, r0, #1
 80089ba:	d102      	bne.n	80089c2 <_sbrk_r+0x1a>
 80089bc:	682b      	ldr	r3, [r5, #0]
 80089be:	b103      	cbz	r3, 80089c2 <_sbrk_r+0x1a>
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	2000213c 	.word	0x2000213c

080089c8 <__malloc_lock>:
 80089c8:	4801      	ldr	r0, [pc, #4]	; (80089d0 <__malloc_lock+0x8>)
 80089ca:	f000 b811 	b.w	80089f0 <__retarget_lock_acquire_recursive>
 80089ce:	bf00      	nop
 80089d0:	20002144 	.word	0x20002144

080089d4 <__malloc_unlock>:
 80089d4:	4801      	ldr	r0, [pc, #4]	; (80089dc <__malloc_unlock+0x8>)
 80089d6:	f000 b80c 	b.w	80089f2 <__retarget_lock_release_recursive>
 80089da:	bf00      	nop
 80089dc:	20002144 	.word	0x20002144

080089e0 <_malloc_usable_size_r>:
 80089e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089e4:	1f18      	subs	r0, r3, #4
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	bfbc      	itt	lt
 80089ea:	580b      	ldrlt	r3, [r1, r0]
 80089ec:	18c0      	addlt	r0, r0, r3
 80089ee:	4770      	bx	lr

080089f0 <__retarget_lock_acquire_recursive>:
 80089f0:	4770      	bx	lr

080089f2 <__retarget_lock_release_recursive>:
 80089f2:	4770      	bx	lr

080089f4 <_init>:
 80089f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f6:	bf00      	nop
 80089f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089fa:	bc08      	pop	{r3}
 80089fc:	469e      	mov	lr, r3
 80089fe:	4770      	bx	lr

08008a00 <_fini>:
 8008a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a02:	bf00      	nop
 8008a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a06:	bc08      	pop	{r3}
 8008a08:	469e      	mov	lr, r3
 8008a0a:	4770      	bx	lr
